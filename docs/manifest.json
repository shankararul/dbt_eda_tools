{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v12.json", "dbt_version": "1.8.7", "generated_at": "2024-10-06T10:06:06.959913Z", "invocation_id": "51033e2d-aac5-499c-adeb-e282efb12e15", "env": {}, "project_name": "dbt_eda_tools", "project_id": "9e91aa04a07f0edb696df5efa09df706", "user_id": "8ad595dd-699e-4fe4-b092-5a7ad8f3ab75", "send_anonymous_usage_stats": true, "adapter_type": "duckdb"}, "nodes": {"model.dbt_eda_tools.describe_ex2": {"database": "dbt_db", "schema": "dbt_schema", "name": "describe_ex2", "resource_type": "model", "package_name": "dbt_eda_tools", "path": "public\\describe\\describe_ex2.sql", "original_file_path": "examples\\public\\describe\\describe_ex2.sql", "unique_id": "model.dbt_eda_tools.describe_ex2", "fqn": ["dbt_eda_tools", "public", "describe", "describe_ex2"], "alias": "describe_ex2", "checksum": {"name": "sha256", "checksum": "52d94ff6a476c4888ae1c613610e7d3564059f549727f95b253505afcbe58e90"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "{{ dbt_eda_tools.get_row_count() }}", "transaction": true, "index": null}, {"sql": "{{ dbt_eda_tools.get_preview(20) }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"post-hook": ["{{ dbt_eda_tools.get_row_count() }}", "{{ dbt_eda_tools.get_preview(20) }}"], "materialized": "view"}, "created_at": 1728209049.496827, "relation_name": "\"dbt_db\".\"dbt_schema\".\"describe_ex2\"", "raw_code": "{{dbt_eda_tools.describe('data_aggregated')}}", "language": "sql", "refs": [{"name": "data_aggregated", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_eda_tools.describe", "macro.dbt_eda_tools.get_row_count", "macro.dbt_eda_tools.get_preview"], "nodes": ["model.dbt_eda_tools.data_aggregated"]}, "compiled_path": "target\\compiled\\dbt_eda_tools\\examples\\public\\describe\\describe_ex2.sql", "compiled": true, "compiled_code": "\n\n    \n\n    \n    \n    \n    \n\n    \n\n    WITH\n    \n    dummy AS (SELECT 1)\n    \n        , \n    \n    \n    meta_data AS (\n        -- Need to explicitly cast the type before transposing the data\n        SELECT\n        column_name\n        , data_type\n        , COUNT(*) OVER ():: STRING AS nbr_of_columns\n        , CASE\n                \n                    \n                        WHEN DATA_TYPE IN ('VARCHAR', 'CHAR', 'CHARACTER', 'STRING', 'TEXT') THEN 'text'\n                    \n                \n                    \n                        WHEN DATA_TYPE IN ('DATE', 'DATETIME', 'TIMESTAMP', 'TIMESTAMP_LTZ', 'TIMESTAMP_NTZ', 'TIMESTAMP_TZ') THEN 'date'\n                    \n                \n                    \n                        WHEN DATA_TYPE IN ('NUMBER', 'DECIMAL', 'NUMERIC', 'INT', 'INTEGER', 'BIGINT', 'SMALLINT', 'FLOAT', 'FLOAT4', 'FLOAT8', 'DOUBLE', 'DOUBLE PRECISION', 'REAL', 'INT64', 'TINYINT', 'BYETEINT', 'BIGDECIMAL', 'FLOAT64') THEN 'numeric'\n                    \n                \n                    \n                        WHEN DATA_TYPE IN ('BOOLEAN', 'BOOL') THEN 'boolean'\n                    \n                \n                    \n                        WHEN DATA_TYPE IN ('TIME', 'NEEDSTOBEARRAY') THEN 'time'\n                    \n                \n                    \n                \n                    \n                \n                    \n                \n                    \n                \n        END AS data_type_input\n\n        \n            \n                \n                    , COUNT(CASE WHEN DATA_TYPE IN ('VARCHAR', 'CHAR', 'CHARACTER', 'STRING', 'TEXT') THEN 1 END) OVER ():: STRING AS nbr_of_text_columns\n                \n            \n        \n            \n                \n                    , COUNT(CASE WHEN DATA_TYPE IN ('DATE', 'DATETIME', 'TIMESTAMP', 'TIMESTAMP_LTZ', 'TIMESTAMP_NTZ', 'TIMESTAMP_TZ') THEN 1 END) OVER ():: STRING AS nbr_of_date_columns\n                \n            \n        \n            \n                \n                    , COUNT(CASE WHEN DATA_TYPE IN ('NUMBER', 'DECIMAL', 'NUMERIC', 'INT', 'INTEGER', 'BIGINT', 'SMALLINT', 'FLOAT', 'FLOAT4', 'FLOAT8', 'DOUBLE', 'DOUBLE PRECISION', 'REAL', 'INT64', 'TINYINT', 'BYETEINT', 'BIGDECIMAL', 'FLOAT64') THEN 1 END) OVER ():: STRING AS nbr_of_numeric_columns\n                \n            \n        \n            \n                \n                    , COUNT(CASE WHEN DATA_TYPE IN ('BOOLEAN', 'BOOL') THEN 1 END) OVER ():: STRING AS nbr_of_boolean_columns\n                \n            \n        \n            \n                \n                    , COUNT(CASE WHEN DATA_TYPE IN ('TIME', 'NEEDSTOBEARRAY') THEN 1 END) OVER ():: STRING AS nbr_of_time_columns\n                \n            \n        \n            \n        \n            \n        \n            \n        \n            \n        \n\n        FROM INFORMATION_SCHEMA.TABLES t\n        INNER JOIN INFORMATION_SCHEMA.COLUMNS c ON\n                c.table_schema = t.table_schema AND c.table_name = t.table_name\n                WHERE t.table_name = 'data_aggregated'\n    )\n\n\n        \n        , \n\n    \n\n        meta_data_unique AS (\n            SELECT\n                    DISTINCT\n                    'dataset' AS identifier\n                    , '' AS detail\n                    , nbr_of_columns\n                    , nbr_of_text_columns\n                    , nbr_of_date_columns\n                    , nbr_of_numeric_columns\n                    , nbr_of_boolean_columns\n                    , nbr_of_time_columns\n                FROM meta_data\n        )\n        , dataset_info AS (\n            SELECT\n                    CASE LOWER(meta_data_key)\n                            WHEN 'nbr_of_columns' THEN 1\n                            WHEN 'nbr_of_text_columns' THEN 2\n                            WHEN 'nbr_of_date_columns' THEN 3\n                            WHEN 'nbr_of_numeric_columns' THEN 4\n                            WHEN 'nbr_of_boolean_columns' THEN 5\n                            WHEN 'nbr_of_time_columns' THEN 6\n                    END AS index_pos\n                    , meta_data_key\n                    , identifier\n                    , detail\n                    , CAST(meta_data_value AS STRING) AS meta_data_value\n                FROM meta_data_unique\n                UNPIVOT (meta_data_value FOR meta_data_key IN (nbr_of_columns, nbr_of_text_columns, nbr_of_date_columns, nbr_of_numeric_columns,nbr_of_boolean_columns,nbr_of_time_columns))\n        )\n\n    \n\n\n        \n        , \n\n    \n        rowcount_info AS (\n            SELECT\n                    0 AS index_pos\n                    , ('nbr_of_rows') AS meta_data_key\n                    , 'dataset' AS identifier\n                    , '' AS detail\n                    , CAST(COUNT(*) AS STRING) AS meta_data_value\n            FROM \"dbt_db\".\"dbt_schema\".\"data_aggregated\"\n            GROUP BY ALL\n        )\n    \n\n\n        \n        , \n\n    \n        column_info AS (\n            SELECT\n                20 + ROW_NUMBER() OVER (ORDER BY data_type) AS index_pos\n                , column_name AS meta_data_key\n                , 'column' AS identifier\n                , '' AS detail\n                , CAST(data_type AS STRING) AS meta_data_value\n            FROM meta_data\n        )\n    \n\n\n        \n        , \n    \n    assembled_result AS (\n        \n            SELECT\n                \n                     index_pos\n                \n                    , meta_data_key\n                \n                    , meta_data_value\n                \n                    , identifier\n                \n                    , detail\n                \n            FROM\n            dataset_info\n            UNION ALL\n        \n            SELECT\n                \n                     index_pos\n                \n                    , meta_data_key\n                \n                    , meta_data_value\n                \n                    , identifier\n                \n                    , detail\n                \n            FROM\n            rowcount_info\n            UNION ALL\n        \n            SELECT\n                \n                     index_pos\n                \n                    , meta_data_key\n                \n                    , meta_data_value\n                \n                    , identifier\n                \n                    , detail\n                \n            FROM\n            column_info\n            \n        \n    )\n\n\n    \n    \n        , \n\n    \n    \n\n    \n    \n    \n\n    \n    \n    \n        \n        \n\n            \n\n\n            column_detail_str_length AS (\n                SELECT\n                    1\n                    \n                            , MIN(str_length) AS min\n                            , MAX(str_length) AS max\n                            \n                                , ROUND(AVG(str_length),4) AS avg\n                                \n                                , ROUND(APPROX_QUANTILE(str_length, 0.25),4) AS percentile_25\n                                , ROUND(APPROX_QUANTILE(str_length, 0.5),4) AS percentile_50\n                                , ROUND(APPROX_QUANTILE(str_length, 0.75),4) AS percentile_75\n                                \n                            \n                    \n\n\n                    , SUM(COUNT(str_length)) OVER () AS cnt_total\n                    , SUM(COUNT(DISTINCT str_length)) OVER () AS cnt_unique\n                    , COUNT_IF(str_length IS NULL) AS cnt_null\n\n                FROM \"dbt_db\".\"dbt_schema\".\"data_aggregated\"\n\n                GROUP BY ALL\n\n                \n\n            ) \n        \n\n        \n        , column_detail_info_numeric AS (\n            \n            \n            SELECT\n                'str_length' AS column_name\n                , JSON_OBJECT(\n                    'column_name', 'str_length'\n                    , 'count' , MIN(cnt_total)\n                    , 'count_null' , MAX(cnt_null) -- needs to be max not min otherwise always zero\n                    \n                        , 'min' , MIN(min)\n                        , 'max' , MIN(max)\n                        \n                            , 'mean' , MIN(avg)\n                            , 'percentile_25' , MIN(percentile_25)\n                            , 'percentile_50' , MIN(percentile_50)\n                            , 'percentile_75' , MIN(percentile_75)\n                        \n                    \n                ) AS detail\n            FROM column_detail_str_length\n            \n        \n\n        )\n    \n\n\n    \n        , \n\n    \n    \n\n    \n    \n    \n\n    \n    \n    \n        \n        \n\n            \n\n\n            column_detail_country AS (\n                SELECT\n                    1\n                    \n                        , country\n                        , COUNT(*) AS cnt\n                    \n\n\n                    , SUM(COUNT(country)) OVER () AS cnt_total\n                    , SUM(COUNT(DISTINCT country)) OVER () AS cnt_unique\n                    , COUNT_IF(country IS NULL) AS cnt_null\n\n                FROM \"dbt_db\".\"dbt_schema\".\"data_aggregated\"\n\n                GROUP BY ALL\n\n                \n                    ORDER by cnt_null DESC, cnt DESC\n                    LIMIT 10\n                \n\n            ) ,\n        \n\n            \n\n\n            column_detail_company_name AS (\n                SELECT\n                    1\n                    \n                        , company_name\n                        , COUNT(*) AS cnt\n                    \n\n\n                    , SUM(COUNT(company_name)) OVER () AS cnt_total\n                    , SUM(COUNT(DISTINCT company_name)) OVER () AS cnt_unique\n                    , COUNT_IF(company_name IS NULL) AS cnt_null\n\n                FROM \"dbt_db\".\"dbt_schema\".\"data_aggregated\"\n\n                GROUP BY ALL\n\n                \n                    ORDER by cnt_null DESC, cnt DESC\n                    LIMIT 10\n                \n\n            ) \n        \n\n        \n        , column_detail_info_text AS (\n            \n            \n            SELECT\n                'country' AS column_name\n                , JSON_OBJECT(\n                    'column_name', 'country'\n                    , 'count' , MIN(cnt_total)\n                    , 'count_null' , MAX(cnt_null) -- needs to be max not min otherwise always zero\n                    \n                        \n                            , 'unique_values' , MIN(cnt_unique)\n                        \n                        , 'value_counts_top10',\n                            ARRAY_AGG\n                                (JSON_OBJECT(\n                                    CAST(COALESCE(country,'NULL') AS STRING)\n                                , cnt)\n                                )\n                    \n                ) AS detail\n            FROM column_detail_country\n            UNION ALL\n        \n            \n            SELECT\n                'company_name' AS column_name\n                , JSON_OBJECT(\n                    'column_name', 'company_name'\n                    , 'count' , MIN(cnt_total)\n                    , 'count_null' , MAX(cnt_null) -- needs to be max not min otherwise always zero\n                    \n                        \n                            , 'unique_values' , MIN(cnt_unique)\n                        \n                        , 'value_counts_top10',\n                            ARRAY_AGG\n                                (JSON_OBJECT(\n                                    CAST(COALESCE(company_name,'NULL') AS STRING)\n                                , cnt)\n                                )\n                    \n                ) AS detail\n            FROM column_detail_company_name\n            \n        \n\n        )\n    \n\n\n    \n        , \n\n    \n    \n\n    \n    \n    \n\n    \n    \n    \n        column_detail_info_date AS (\n            SELECT\n                '' AS column_name\n                , TO_JSON(NULL) AS detail\n        )\n    \n\n\n    \n        , \n\n    \n    \n\n    \n    \n    \n\n    \n    \n    \n        column_detail_info_boolean AS (\n            SELECT\n                '' AS column_name\n                , TO_JSON(NULL) AS detail\n        )\n    \n\n\n    \n\n    \n        \n\n\n\n\n\n    SELECT\n        assembed_result.meta_data_key\n        , assembed_result.meta_data_value\n        , assembed_result.identifier\n        , COALESCE(text_detail.detail, numeric_detail.detail,date_detail.detail, boolean_detail.detail) AS detail\n    FROM assembled_result AS assembed_result\n    LEFT JOIN column_detail_info_text AS text_detail\n    ON assembed_result.meta_data_key = text_detail.column_name\n    LEFT JOIN column_detail_info_numeric AS numeric_detail\n    ON assembed_result.meta_data_key = numeric_detail.column_name\n    LEFT JOIN column_detail_info_date AS date_detail\n    ON assembed_result.meta_data_key = date_detail.column_name\n    LEFT JOIN column_detail_info_boolean AS boolean_detail\n    ON assembed_result.meta_data_key = boolean_detail.column_name\n\n    ORDER BY index_pos ASC\n\n\n    \n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_eda_tools.percent_of_total_ex1": {"database": "dbt_db", "schema": "dbt_schema", "name": "percent_of_total_ex1", "resource_type": "model", "package_name": "dbt_eda_tools", "path": "public\\percent_of_total\\percent_of_total_ex1.sql", "original_file_path": "examples\\public\\percent_of_total\\percent_of_total_ex1.sql", "unique_id": "model.dbt_eda_tools.percent_of_total_ex1", "fqn": ["dbt_eda_tools", "public", "percent_of_total", "percent_of_total_ex1"], "alias": "percent_of_total_ex1", "checksum": {"name": "sha256", "checksum": "894d63c8b292c6d938f015e5de50fa983b33b787d63e496843bd8582b0a60be2"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "{{ dbt_eda_tools.get_row_count() }}", "transaction": true, "index": null}, {"sql": "{{ dbt_eda_tools.get_preview(20) }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"post-hook": ["{{ dbt_eda_tools.get_row_count() }}", "{{ dbt_eda_tools.get_preview(20) }}"], "materialized": "view"}, "created_at": 1728209049.6377435, "relation_name": "\"dbt_db\".\"dbt_schema\".\"percent_of_total_ex1\"", "raw_code": "SELECT\r\n    country\r\n    , SUM(str_length) AS sum_2_str_length\r\n    -- example: sum\r\n    , {{dbt_eda_tools.percent_of_total('str_length','sum',3)}} AS sum_percent\r\n\r\n    , COUNT(company_name) AS count_company_name\r\n    -- example: count\r\n    -- defaults to count if no aggregation function is specified and 1 decimal if no precision is specified\r\n\r\n    , {{dbt_eda_tools.percent_of_total('company_name', precision=3)}} AS count_percent\r\n\r\n    , COUNT(DISTINCT company_name) AS count_distinct_company_name\r\n    -- example: countdistinct\r\n    , {{dbt_eda_tools.percent_of_total('company_name','countdistinct', precision=3)}} AS count_distinct_percent\r\n\r\nFROM {{ ref('data_aggregated') }}\r\nGROUP BY 1\r\nORDER BY sum(str_length)  DESC", "language": "sql", "refs": [{"name": "data_aggregated", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_eda_tools.percent_of_total", "macro.dbt_eda_tools.get_row_count", "macro.dbt_eda_tools.get_preview"], "nodes": ["model.dbt_eda_tools.data_aggregated"]}, "compiled_path": "target\\compiled\\dbt_eda_tools\\examples\\public\\percent_of_total\\percent_of_total_ex1.sql", "compiled": true, "compiled_code": "SELECT\n    country\n    , SUM(str_length) AS sum_2_str_length\n    -- example: sum\n    , \n\n  \n\n  \n\n      ROUND(\n        \n          \n            IF(SUM(sum(str_length)) OVER () !=0\n              , sum(str_length)\n              /\n              SUM(sum(str_length)) OVER ()\n              , NULL\n            )\n          \n        \n      , 3)\n\n AS sum_percent\n\n    , COUNT(company_name) AS count_company_name\n    -- example: count\n    -- defaults to count if no aggregation function is specified and 1 decimal if no precision is specified\n\n    , \n\n  \n\n  \n\n      ROUND(\n        \n          \n            IF(SUM(COUNT(company_name)) OVER () !=0\n              , COUNT(company_name)\n              /\n              SUM(COUNT(company_name)) OVER ()\n              , NULL\n            )\n          \n        \n      , 3)\n\n AS count_percent\n\n    , COUNT(DISTINCT company_name) AS count_distinct_company_name\n    -- example: countdistinct\n    , \n\n  \n\n  \n\n      ROUND(\n        \n            \n              IF(SUM(COUNT(DISTINCT company_name)) OVER () !=0\n                , COUNT(DISTINCT company_name)\n                /\n                SUM(COUNT(DISTINCT company_name)) OVER ()\n                , NULL\n              )\n            \n        \n      , 3)\n\n AS count_distinct_percent\n\nFROM \"dbt_db\".\"dbt_schema\".\"data_aggregated\"\nGROUP BY 1\nORDER BY sum(str_length)  DESC", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_eda_tools.percent_of_total_ex2": {"database": "dbt_db", "schema": "dbt_schema", "name": "percent_of_total_ex2", "resource_type": "model", "package_name": "dbt_eda_tools", "path": "public\\percent_of_total\\percent_of_total_ex2.sql", "original_file_path": "examples\\public\\percent_of_total\\percent_of_total_ex2.sql", "unique_id": "model.dbt_eda_tools.percent_of_total_ex2", "fqn": ["dbt_eda_tools", "public", "percent_of_total", "percent_of_total_ex2"], "alias": "percent_of_total_ex2", "checksum": {"name": "sha256", "checksum": "2f8dd78814ef20497b8972f12d02eecf72498af8020c754520f87189587db849"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "{{ dbt_eda_tools.get_row_count() }}", "transaction": true, "index": null}, {"sql": "{{ dbt_eda_tools.get_preview(20) }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"post-hook": ["{{ dbt_eda_tools.get_row_count() }}", "{{ dbt_eda_tools.get_preview(20) }}"], "materialized": "view"}, "created_at": 1728209049.6885848, "relation_name": "\"dbt_db\".\"dbt_schema\".\"percent_of_total_ex2\"", "raw_code": "SELECT\r\n    company_name\r\n    , country\r\n    , count(str_length) AS count_str_length\r\n    -- the percentages are caclulated at the aggregation of company_name and not entire column\r\n    , {{dbt_eda_tools.percent_of_total('str_length','count',3, ['company_name'])}} AS count_percent_level_company_name\r\n    , {{dbt_eda_tools.percent_of_total('str_length')}} AS count_percent_level_full_column\r\n\r\nFROM {{ ref('data_aggregated') }}\r\nGROUP BY 1,2\r\nORDER BY company_name, country, count(str_length)  DESC", "language": "sql", "refs": [{"name": "data_aggregated", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_eda_tools.percent_of_total", "macro.dbt_eda_tools.get_row_count", "macro.dbt_eda_tools.get_preview"], "nodes": ["model.dbt_eda_tools.data_aggregated"]}, "compiled_path": "target\\compiled\\dbt_eda_tools\\examples\\public\\percent_of_total\\percent_of_total_ex2.sql", "compiled": true, "compiled_code": "SELECT\n    company_name\n    , country\n    , count(str_length) AS count_str_length\n    -- the percentages are caclulated at the aggregation of company_name and not entire column\n    , \n\n  \n\n  \n    \n  \n\n      ROUND(\n        \n          \n            IF(SUM(count(str_length)) OVER (PARTITION BY company_name) !=0\n              , count(str_length)\n              /\n              SUM(count(str_length)) OVER (PARTITION BY company_name)\n              , NULL\n            )\n          \n        \n      , 3)\n\n AS count_percent_level_company_name\n    , \n\n  \n\n  \n\n      ROUND(\n        \n          \n            IF(SUM(COUNT(str_length)) OVER () !=0\n              , COUNT(str_length)\n              /\n              SUM(COUNT(str_length)) OVER ()\n              , NULL\n            )\n          \n        \n      , 2)\n\n AS count_percent_level_full_column\n\nFROM \"dbt_db\".\"dbt_schema\".\"data_aggregated\"\nGROUP BY 1,2\nORDER BY company_name, country, count(str_length)  DESC", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_eda_tools.data_aggregated": {"database": "dbt_db", "schema": "dbt_schema", "name": "data_aggregated", "resource_type": "model", "package_name": "dbt_eda_tools", "path": "1.intermediate\\percent_of_total\\data_aggregated.sql", "original_file_path": "examples\\1.intermediate\\percent_of_total\\data_aggregated.sql", "unique_id": "model.dbt_eda_tools.data_aggregated", "fqn": ["dbt_eda_tools", "1.intermediate", "percent_of_total", "data_aggregated"], "alias": "data_aggregated", "checksum": {"name": "sha256", "checksum": "25b2932de29394d90830acba0fb29f6ad4a61bc2ea323e37df80aa6507b03644"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "{{ dbt_eda_tools.get_row_count() }}", "transaction": true, "index": null}, {"sql": "{{ dbt_eda_tools.get_preview(20) }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"post-hook": ["{{ dbt_eda_tools.get_row_count() }}", "{{ dbt_eda_tools.get_preview(20) }}"], "materialized": "view"}, "created_at": 1728209049.7242553, "relation_name": "\"dbt_db\".\"dbt_schema\".\"data_aggregated\"", "raw_code": "SELECT\r\n    company_name\r\n    , country\r\n    , MIN(str_length) AS str_length\r\nFROM {{ ref('data_generator') }}\r\nWHERE\r\n    --exclude some rows. Keeps only 2 companies for France and 3 countries for MSFT\r\n    NOT (\r\n        (company_name = 'MSFT' AND country = 'DE')\r\n        OR\r\n        (country = 'FR' AND (company_name IN ('GOG','A','MSFT')))\r\n    )\r\nGROUP BY 1,2", "language": "sql", "refs": [{"name": "data_generator", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_eda_tools.get_row_count", "macro.dbt_eda_tools.get_preview"], "nodes": ["model.dbt_eda_tools.data_generator"]}, "compiled_path": "target\\compiled\\dbt_eda_tools\\examples\\1.intermediate\\percent_of_total\\data_aggregated.sql", "compiled": true, "compiled_code": "SELECT\n    company_name\n    , country\n    , MIN(str_length) AS str_length\nFROM \"dbt_db\".\"dbt_schema\".\"data_generator\"\nWHERE\n    --exclude some rows. Keeps only 2 companies for France and 3 countries for MSFT\n    NOT (\n        (company_name = 'MSFT' AND country = 'DE')\n        OR\n        (country = 'FR' AND (company_name IN ('GOG','A','MSFT')))\n    )\nGROUP BY 1,2", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_eda_tools.data_aggregated_yearly_granularity": {"database": "dbt_db", "schema": "dbt_schema", "name": "data_aggregated_yearly_granularity", "resource_type": "model", "package_name": "dbt_eda_tools", "path": "1.intermediate\\describe\\data_aggregated_yearly_granularity.sql", "original_file_path": "examples\\1.intermediate\\describe\\data_aggregated_yearly_granularity.sql", "unique_id": "model.dbt_eda_tools.data_aggregated_yearly_granularity", "fqn": ["dbt_eda_tools", "1.intermediate", "describe", "data_aggregated_yearly_granularity"], "alias": "data_aggregated_yearly_granularity", "checksum": {"name": "sha256", "checksum": "564ebe17d240674e7990c066debd7abb9e8674218fbcc28c40495ef0aa063eb6"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "{{ dbt_eda_tools.get_row_count() }}", "transaction": true, "index": null}, {"sql": "{{ dbt_eda_tools.get_preview(20) }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"post-hook": ["{{ dbt_eda_tools.get_row_count() }}", "{{ dbt_eda_tools.get_preview(20) }}"], "materialized": "view"}, "created_at": 1728209049.7498932, "relation_name": "\"dbt_db\".\"dbt_schema\".\"data_aggregated_yearly_granularity\"", "raw_code": "SELECT\r\n    *\r\nFROM {{ ref('data_aggregated_mixed_granularity') }}\r\nWHERE date_mixed_granularity <= CAST('2022-01-01' AS DATE)", "language": "sql", "refs": [{"name": "data_aggregated_mixed_granularity", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_eda_tools.get_row_count", "macro.dbt_eda_tools.get_preview"], "nodes": ["model.dbt_eda_tools.data_aggregated_mixed_granularity"]}, "compiled_path": "target\\compiled\\dbt_eda_tools\\examples\\1.intermediate\\describe\\data_aggregated_yearly_granularity.sql", "compiled": true, "compiled_code": "SELECT\n    *\nFROM \"dbt_db\".\"dbt_schema\".\"data_aggregated_mixed_granularity\"\nWHERE date_mixed_granularity <= CAST('2022-01-01' AS DATE)", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_eda_tools.describe_ex3": {"database": "dbt_db", "schema": "dbt_schema", "name": "describe_ex3", "resource_type": "model", "package_name": "dbt_eda_tools", "path": "public\\describe\\describe_ex3.sql", "original_file_path": "examples\\public\\describe\\describe_ex3.sql", "unique_id": "model.dbt_eda_tools.describe_ex3", "fqn": ["dbt_eda_tools", "public", "describe", "describe_ex3"], "alias": "describe_ex3", "checksum": {"name": "sha256", "checksum": "b57f4db97364d32a0f55082810391f02fefec77ce3c59cf901853da627821ff8"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "{{ dbt_eda_tools.get_row_count() }}", "transaction": true, "index": null}, {"sql": "{{ dbt_eda_tools.get_preview(20) }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"post-hook": ["{{ dbt_eda_tools.get_row_count() }}", "{{ dbt_eda_tools.get_preview(20) }}"], "materialized": "view"}, "created_at": 1728209049.777214, "relation_name": "\"dbt_db\".\"dbt_schema\".\"describe_ex3\"", "raw_code": "{{dbt_eda_tools.describe('data_aggregated_mixed_granularity')}}", "language": "sql", "refs": [{"name": "data_aggregated_mixed_granularity", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_eda_tools.describe", "macro.dbt_eda_tools.get_row_count", "macro.dbt_eda_tools.get_preview"], "nodes": ["model.dbt_eda_tools.data_aggregated_mixed_granularity"]}, "compiled_path": "target\\compiled\\dbt_eda_tools\\examples\\public\\describe\\describe_ex3.sql", "compiled": true, "compiled_code": "\n\n    \n\n    \n    \n    \n    \n\n    \n\n    WITH\n    \n    dummy AS (SELECT 1)\n    \n        , \n    \n    \n    meta_data AS (\n        -- Need to explicitly cast the type before transposing the data\n        SELECT\n        column_name\n        , data_type\n        , COUNT(*) OVER ():: STRING AS nbr_of_columns\n        , CASE\n                \n                    \n                        WHEN DATA_TYPE IN ('VARCHAR', 'CHAR', 'CHARACTER', 'STRING', 'TEXT') THEN 'text'\n                    \n                \n                    \n                        WHEN DATA_TYPE IN ('DATE', 'DATETIME', 'TIMESTAMP', 'TIMESTAMP_LTZ', 'TIMESTAMP_NTZ', 'TIMESTAMP_TZ') THEN 'date'\n                    \n                \n                    \n                        WHEN DATA_TYPE IN ('NUMBER', 'DECIMAL', 'NUMERIC', 'INT', 'INTEGER', 'BIGINT', 'SMALLINT', 'FLOAT', 'FLOAT4', 'FLOAT8', 'DOUBLE', 'DOUBLE PRECISION', 'REAL', 'INT64', 'TINYINT', 'BYETEINT', 'BIGDECIMAL', 'FLOAT64') THEN 'numeric'\n                    \n                \n                    \n                        WHEN DATA_TYPE IN ('BOOLEAN', 'BOOL') THEN 'boolean'\n                    \n                \n                    \n                        WHEN DATA_TYPE IN ('TIME', 'NEEDSTOBEARRAY') THEN 'time'\n                    \n                \n                    \n                \n                    \n                \n                    \n                \n                    \n                \n        END AS data_type_input\n\n        \n            \n                \n                    , COUNT(CASE WHEN DATA_TYPE IN ('VARCHAR', 'CHAR', 'CHARACTER', 'STRING', 'TEXT') THEN 1 END) OVER ():: STRING AS nbr_of_text_columns\n                \n            \n        \n            \n                \n                    , COUNT(CASE WHEN DATA_TYPE IN ('DATE', 'DATETIME', 'TIMESTAMP', 'TIMESTAMP_LTZ', 'TIMESTAMP_NTZ', 'TIMESTAMP_TZ') THEN 1 END) OVER ():: STRING AS nbr_of_date_columns\n                \n            \n        \n            \n                \n                    , COUNT(CASE WHEN DATA_TYPE IN ('NUMBER', 'DECIMAL', 'NUMERIC', 'INT', 'INTEGER', 'BIGINT', 'SMALLINT', 'FLOAT', 'FLOAT4', 'FLOAT8', 'DOUBLE', 'DOUBLE PRECISION', 'REAL', 'INT64', 'TINYINT', 'BYETEINT', 'BIGDECIMAL', 'FLOAT64') THEN 1 END) OVER ():: STRING AS nbr_of_numeric_columns\n                \n            \n        \n            \n                \n                    , COUNT(CASE WHEN DATA_TYPE IN ('BOOLEAN', 'BOOL') THEN 1 END) OVER ():: STRING AS nbr_of_boolean_columns\n                \n            \n        \n            \n                \n                    , COUNT(CASE WHEN DATA_TYPE IN ('TIME', 'NEEDSTOBEARRAY') THEN 1 END) OVER ():: STRING AS nbr_of_time_columns\n                \n            \n        \n            \n        \n            \n        \n            \n        \n            \n        \n\n        FROM INFORMATION_SCHEMA.TABLES t\n        INNER JOIN INFORMATION_SCHEMA.COLUMNS c ON\n                c.table_schema = t.table_schema AND c.table_name = t.table_name\n                WHERE t.table_name = 'data_aggregated_mixed_granularity'\n    )\n\n\n        \n        , \n\n    \n\n        meta_data_unique AS (\n            SELECT\n                    DISTINCT\n                    'dataset' AS identifier\n                    , '' AS detail\n                    , nbr_of_columns\n                    , nbr_of_text_columns\n                    , nbr_of_date_columns\n                    , nbr_of_numeric_columns\n                    , nbr_of_boolean_columns\n                    , nbr_of_time_columns\n                FROM meta_data\n        )\n        , dataset_info AS (\n            SELECT\n                    CASE LOWER(meta_data_key)\n                            WHEN 'nbr_of_columns' THEN 1\n                            WHEN 'nbr_of_text_columns' THEN 2\n                            WHEN 'nbr_of_date_columns' THEN 3\n                            WHEN 'nbr_of_numeric_columns' THEN 4\n                            WHEN 'nbr_of_boolean_columns' THEN 5\n                            WHEN 'nbr_of_time_columns' THEN 6\n                    END AS index_pos\n                    , meta_data_key\n                    , identifier\n                    , detail\n                    , CAST(meta_data_value AS STRING) AS meta_data_value\n                FROM meta_data_unique\n                UNPIVOT (meta_data_value FOR meta_data_key IN (nbr_of_columns, nbr_of_text_columns, nbr_of_date_columns, nbr_of_numeric_columns,nbr_of_boolean_columns,nbr_of_time_columns))\n        )\n\n    \n\n\n        \n        , \n\n    \n        rowcount_info AS (\n            SELECT\n                    0 AS index_pos\n                    , ('nbr_of_rows') AS meta_data_key\n                    , 'dataset' AS identifier\n                    , '' AS detail\n                    , CAST(COUNT(*) AS STRING) AS meta_data_value\n            FROM \"dbt_db\".\"dbt_schema\".\"data_aggregated_mixed_granularity\"\n            GROUP BY ALL\n        )\n    \n\n\n        \n        , \n\n    \n        column_info AS (\n            SELECT\n                20 + ROW_NUMBER() OVER (ORDER BY data_type) AS index_pos\n                , column_name AS meta_data_key\n                , 'column' AS identifier\n                , '' AS detail\n                , CAST(data_type AS STRING) AS meta_data_value\n            FROM meta_data\n        )\n    \n\n\n        \n        , \n    \n    assembled_result AS (\n        \n            SELECT\n                \n                     index_pos\n                \n                    , meta_data_key\n                \n                    , meta_data_value\n                \n                    , identifier\n                \n                    , detail\n                \n            FROM\n            dataset_info\n            UNION ALL\n        \n            SELECT\n                \n                     index_pos\n                \n                    , meta_data_key\n                \n                    , meta_data_value\n                \n                    , identifier\n                \n                    , detail\n                \n            FROM\n            rowcount_info\n            UNION ALL\n        \n            SELECT\n                \n                     index_pos\n                \n                    , meta_data_key\n                \n                    , meta_data_value\n                \n                    , identifier\n                \n                    , detail\n                \n            FROM\n            column_info\n            \n        \n    )\n\n\n    \n    \n        , \n\n    \n    \n\n    \n    \n    \n\n    \n    \n    \n        column_detail_info_numeric AS (\n            SELECT\n                '' AS column_name\n                , TO_JSON(NULL) AS detail\n        )\n    \n\n\n    \n        , \n\n    \n    \n\n    \n    \n    \n\n    \n    \n    \n        \n        \n\n            \n\n\n            column_detail_country AS (\n                SELECT\n                    1\n                    \n                        , country\n                        , COUNT(*) AS cnt\n                    \n\n\n                    , SUM(COUNT(country)) OVER () AS cnt_total\n                    , SUM(COUNT(DISTINCT country)) OVER () AS cnt_unique\n                    , COUNT_IF(country IS NULL) AS cnt_null\n\n                FROM \"dbt_db\".\"dbt_schema\".\"data_aggregated_mixed_granularity\"\n\n                GROUP BY ALL\n\n                \n                    ORDER by cnt_null DESC, cnt DESC\n                    LIMIT 10\n                \n\n            ) ,\n        \n\n            \n\n\n            column_detail_company_name AS (\n                SELECT\n                    1\n                    \n                        , company_name\n                        , COUNT(*) AS cnt\n                    \n\n\n                    , SUM(COUNT(company_name)) OVER () AS cnt_total\n                    , SUM(COUNT(DISTINCT company_name)) OVER () AS cnt_unique\n                    , COUNT_IF(company_name IS NULL) AS cnt_null\n\n                FROM \"dbt_db\".\"dbt_schema\".\"data_aggregated_mixed_granularity\"\n\n                GROUP BY ALL\n\n                \n                    ORDER by cnt_null DESC, cnt DESC\n                    LIMIT 10\n                \n\n            ) \n        \n\n        \n        , column_detail_info_text AS (\n            \n            \n            SELECT\n                'country' AS column_name\n                , JSON_OBJECT(\n                    'column_name', 'country'\n                    , 'count' , MIN(cnt_total)\n                    , 'count_null' , MAX(cnt_null) -- needs to be max not min otherwise always zero\n                    \n                        \n                            , 'unique_values' , MIN(cnt_unique)\n                        \n                        , 'value_counts_top10',\n                            ARRAY_AGG\n                                (JSON_OBJECT(\n                                    CAST(COALESCE(country,'NULL') AS STRING)\n                                , cnt)\n                                )\n                    \n                ) AS detail\n            FROM column_detail_country\n            UNION ALL\n        \n            \n            SELECT\n                'company_name' AS column_name\n                , JSON_OBJECT(\n                    'column_name', 'company_name'\n                    , 'count' , MIN(cnt_total)\n                    , 'count_null' , MAX(cnt_null) -- needs to be max not min otherwise always zero\n                    \n                        \n                            , 'unique_values' , MIN(cnt_unique)\n                        \n                        , 'value_counts_top10',\n                            ARRAY_AGG\n                                (JSON_OBJECT(\n                                    CAST(COALESCE(company_name,'NULL') AS STRING)\n                                , cnt)\n                                )\n                    \n                ) AS detail\n            FROM column_detail_company_name\n            \n        \n\n        )\n    \n\n\n    \n        , \n\n    \n    \n\n    \n    \n    \n\n    \n    \n    \n        \n        \n\n            \n                \n            \n\n\n            column_detail_date_mixed_granularity AS (\n                SELECT\n                    1\n                    \n                            , MIN(date_mixed_granularity) AS min\n                            , MAX(date_mixed_granularity) AS max\n                            \n                                , MIN('Monthly') AS estimated_granularity\n                                , MIN(0.8) AS estimated_granularity_confidence\n                            \n                    \n\n\n                    , SUM(COUNT(date_mixed_granularity)) OVER () AS cnt_total\n                    , SUM(COUNT(DISTINCT date_mixed_granularity)) OVER () AS cnt_unique\n                    , COUNT_IF(date_mixed_granularity IS NULL) AS cnt_null\n\n                FROM \"dbt_db\".\"dbt_schema\".\"data_aggregated_mixed_granularity\"\n\n                GROUP BY ALL\n\n                \n\n            ) \n        \n\n        \n        , column_detail_info_date AS (\n            \n            \n            SELECT\n                'date_mixed_granularity' AS column_name\n                , JSON_OBJECT(\n                    'column_name', 'date_mixed_granularity'\n                    , 'count' , MIN(cnt_total)\n                    , 'count_null' , MAX(cnt_null) -- needs to be max not min otherwise always zero\n                    \n                        , 'min' , MIN(min)\n                        , 'max' , MIN(max)\n                        \n                            , 'estimated_granularity' , MIN(estimated_granularity)\n                            , 'estimated_granularity_confidence' , MIN(estimated_granularity_confidence)\n                        \n                    \n                ) AS detail\n            FROM column_detail_date_mixed_granularity\n            \n        \n\n        )\n    \n\n\n    \n        , \n\n    \n    \n\n    \n    \n    \n\n    \n    \n    \n        column_detail_info_boolean AS (\n            SELECT\n                '' AS column_name\n                , TO_JSON(NULL) AS detail\n        )\n    \n\n\n    \n\n    \n        \n\n\n\n\n\n    SELECT\n        assembed_result.meta_data_key\n        , assembed_result.meta_data_value\n        , assembed_result.identifier\n        , COALESCE(text_detail.detail, numeric_detail.detail,date_detail.detail, boolean_detail.detail) AS detail\n    FROM assembled_result AS assembed_result\n    LEFT JOIN column_detail_info_text AS text_detail\n    ON assembed_result.meta_data_key = text_detail.column_name\n    LEFT JOIN column_detail_info_numeric AS numeric_detail\n    ON assembed_result.meta_data_key = numeric_detail.column_name\n    LEFT JOIN column_detail_info_date AS date_detail\n    ON assembed_result.meta_data_key = date_detail.column_name\n    LEFT JOIN column_detail_info_boolean AS boolean_detail\n    ON assembed_result.meta_data_key = boolean_detail.column_name\n\n    ORDER BY index_pos ASC\n\n\n    \n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_eda_tools.data_aggregated_mixed_granularity": {"database": "dbt_db", "schema": "dbt_schema", "name": "data_aggregated_mixed_granularity", "resource_type": "model", "package_name": "dbt_eda_tools", "path": "1.intermediate\\describe\\data_aggregated_mixed_granularity.sql", "original_file_path": "examples\\1.intermediate\\describe\\data_aggregated_mixed_granularity.sql", "unique_id": "model.dbt_eda_tools.data_aggregated_mixed_granularity", "fqn": ["dbt_eda_tools", "1.intermediate", "describe", "data_aggregated_mixed_granularity"], "alias": "data_aggregated_mixed_granularity", "checksum": {"name": "sha256", "checksum": "99ea6bb7f2d1084cdae1fc7586e1660a1d1c825837d904f2837ca1d4909c4ff0"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "{{ dbt_eda_tools.get_row_count() }}", "transaction": true, "index": null}, {"sql": "{{ dbt_eda_tools.get_preview(20) }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"post-hook": ["{{ dbt_eda_tools.get_row_count() }}", "{{ dbt_eda_tools.get_preview(20) }}"], "materialized": "view"}, "created_at": 1728209049.8202634, "relation_name": "\"dbt_db\".\"dbt_schema\".\"data_aggregated_mixed_granularity\"", "raw_code": "SELECT\r\n    company_name\r\n    , country\r\n    , CASE\r\n        WHEN date_day <= CAST('2022-01-01' AS DATE)  THEN CAST({{ date_trunc(\"year\", \"date_day\") }} AS Date)\r\n        WHEN date_day BETWEEN CAST('2022-01-01' AS DATE) AND CAST('2023-01-01' AS DATE) THEN CAST({{ date_trunc(\"month\", \"date_day\") }} AS DATE)\r\n        {# ELSE date_day #}\r\n    END AS date_mixed_granularity\r\nFROM {{ ref('data_generator') }}\r\nWHERE company_name = 'FB' AND country = 'US'\r\nGROUP BY 1,2,3", "language": "sql", "refs": [{"name": "data_generator", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt_eda_tools.get_row_count", "macro.dbt_eda_tools.get_preview"], "nodes": ["model.dbt_eda_tools.data_generator"]}, "compiled_path": "target\\compiled\\dbt_eda_tools\\examples\\1.intermediate\\describe\\data_aggregated_mixed_granularity.sql", "compiled": true, "compiled_code": "SELECT\n    company_name\n    , country\n    , CASE\n        WHEN date_day <= CAST('2022-01-01' AS DATE)  THEN CAST(date_trunc('year', date_day) AS Date)\n        WHEN date_day BETWEEN CAST('2022-01-01' AS DATE) AND CAST('2023-01-01' AS DATE) THEN CAST(date_trunc('month', date_day) AS DATE)\n        \n    END AS date_mixed_granularity\nFROM \"dbt_db\".\"dbt_schema\".\"data_generator\"\nWHERE company_name = 'FB' AND country = 'US'\nGROUP BY 1,2,3", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_eda_tools.describe_ex1": {"database": "dbt_db", "schema": "dbt_schema", "name": "describe_ex1", "resource_type": "model", "package_name": "dbt_eda_tools", "path": "public\\describe\\describe_ex1.sql", "original_file_path": "examples\\public\\describe\\describe_ex1.sql", "unique_id": "model.dbt_eda_tools.describe_ex1", "fqn": ["dbt_eda_tools", "public", "describe", "describe_ex1"], "alias": "describe_ex1", "checksum": {"name": "sha256", "checksum": "1caa8a117467da1bd432c3f158a9a3f68f330842fc539670a3b24e08d536bcd9"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "{{ dbt_eda_tools.get_row_count() }}", "transaction": true, "index": null}, {"sql": "{{ dbt_eda_tools.get_preview(20) }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"post-hook": ["{{ dbt_eda_tools.get_row_count() }}", "{{ dbt_eda_tools.get_preview(20) }}"], "materialized": "view"}, "created_at": 1728209049.8744874, "relation_name": "\"dbt_db\".\"dbt_schema\".\"describe_ex1\"", "raw_code": "{{dbt_eda_tools.describe('data_generator_enriched_describe')}}", "language": "sql", "refs": [{"name": "data_generator_enriched_describe", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_eda_tools.describe", "macro.dbt_eda_tools.get_row_count", "macro.dbt_eda_tools.get_preview"], "nodes": ["model.dbt_eda_tools.data_generator_enriched_describe"]}, "compiled_path": "target\\compiled\\dbt_eda_tools\\examples\\public\\describe\\describe_ex1.sql", "compiled": true, "compiled_code": "\n\n    \n\n    \n    \n    \n    \n\n    \n\n    WITH\n    \n    dummy AS (SELECT 1)\n    \n        , \n    \n    \n    meta_data AS (\n        -- Need to explicitly cast the type before transposing the data\n        SELECT\n        column_name\n        , data_type\n        , COUNT(*) OVER ():: STRING AS nbr_of_columns\n        , CASE\n                \n                    \n                        WHEN DATA_TYPE IN ('VARCHAR', 'CHAR', 'CHARACTER', 'STRING', 'TEXT') THEN 'text'\n                    \n                \n                    \n                        WHEN DATA_TYPE IN ('DATE', 'DATETIME', 'TIMESTAMP', 'TIMESTAMP_LTZ', 'TIMESTAMP_NTZ', 'TIMESTAMP_TZ') THEN 'date'\n                    \n                \n                    \n                        WHEN DATA_TYPE IN ('NUMBER', 'DECIMAL', 'NUMERIC', 'INT', 'INTEGER', 'BIGINT', 'SMALLINT', 'FLOAT', 'FLOAT4', 'FLOAT8', 'DOUBLE', 'DOUBLE PRECISION', 'REAL', 'INT64', 'TINYINT', 'BYETEINT', 'BIGDECIMAL', 'FLOAT64') THEN 'numeric'\n                    \n                \n                    \n                        WHEN DATA_TYPE IN ('BOOLEAN', 'BOOL') THEN 'boolean'\n                    \n                \n                    \n                        WHEN DATA_TYPE IN ('TIME', 'NEEDSTOBEARRAY') THEN 'time'\n                    \n                \n                    \n                \n                    \n                \n                    \n                \n                    \n                \n        END AS data_type_input\n\n        \n            \n                \n                    , COUNT(CASE WHEN DATA_TYPE IN ('VARCHAR', 'CHAR', 'CHARACTER', 'STRING', 'TEXT') THEN 1 END) OVER ():: STRING AS nbr_of_text_columns\n                \n            \n        \n            \n                \n                    , COUNT(CASE WHEN DATA_TYPE IN ('DATE', 'DATETIME', 'TIMESTAMP', 'TIMESTAMP_LTZ', 'TIMESTAMP_NTZ', 'TIMESTAMP_TZ') THEN 1 END) OVER ():: STRING AS nbr_of_date_columns\n                \n            \n        \n            \n                \n                    , COUNT(CASE WHEN DATA_TYPE IN ('NUMBER', 'DECIMAL', 'NUMERIC', 'INT', 'INTEGER', 'BIGINT', 'SMALLINT', 'FLOAT', 'FLOAT4', 'FLOAT8', 'DOUBLE', 'DOUBLE PRECISION', 'REAL', 'INT64', 'TINYINT', 'BYETEINT', 'BIGDECIMAL', 'FLOAT64') THEN 1 END) OVER ():: STRING AS nbr_of_numeric_columns\n                \n            \n        \n            \n                \n                    , COUNT(CASE WHEN DATA_TYPE IN ('BOOLEAN', 'BOOL') THEN 1 END) OVER ():: STRING AS nbr_of_boolean_columns\n                \n            \n        \n            \n                \n                    , COUNT(CASE WHEN DATA_TYPE IN ('TIME', 'NEEDSTOBEARRAY') THEN 1 END) OVER ():: STRING AS nbr_of_time_columns\n                \n            \n        \n            \n        \n            \n        \n            \n        \n            \n        \n\n        FROM INFORMATION_SCHEMA.TABLES t\n        INNER JOIN INFORMATION_SCHEMA.COLUMNS c ON\n                c.table_schema = t.table_schema AND c.table_name = t.table_name\n                WHERE t.table_name = 'data_generator_enriched_describe'\n    )\n\n\n        \n        , \n\n    \n\n        meta_data_unique AS (\n            SELECT\n                    DISTINCT\n                    'dataset' AS identifier\n                    , '' AS detail\n                    , nbr_of_columns\n                    , nbr_of_text_columns\n                    , nbr_of_date_columns\n                    , nbr_of_numeric_columns\n                    , nbr_of_boolean_columns\n                    , nbr_of_time_columns\n                FROM meta_data\n        )\n        , dataset_info AS (\n            SELECT\n                    CASE LOWER(meta_data_key)\n                            WHEN 'nbr_of_columns' THEN 1\n                            WHEN 'nbr_of_text_columns' THEN 2\n                            WHEN 'nbr_of_date_columns' THEN 3\n                            WHEN 'nbr_of_numeric_columns' THEN 4\n                            WHEN 'nbr_of_boolean_columns' THEN 5\n                            WHEN 'nbr_of_time_columns' THEN 6\n                    END AS index_pos\n                    , meta_data_key\n                    , identifier\n                    , detail\n                    , CAST(meta_data_value AS STRING) AS meta_data_value\n                FROM meta_data_unique\n                UNPIVOT (meta_data_value FOR meta_data_key IN (nbr_of_columns, nbr_of_text_columns, nbr_of_date_columns, nbr_of_numeric_columns,nbr_of_boolean_columns,nbr_of_time_columns))\n        )\n\n    \n\n\n        \n        , \n\n    \n        rowcount_info AS (\n            SELECT\n                    0 AS index_pos\n                    , ('nbr_of_rows') AS meta_data_key\n                    , 'dataset' AS identifier\n                    , '' AS detail\n                    , CAST(COUNT(*) AS STRING) AS meta_data_value\n            FROM \"dbt_db\".\"dbt_schema\".\"data_generator_enriched_describe\"\n            GROUP BY ALL\n        )\n    \n\n\n        \n        , \n\n    \n        column_info AS (\n            SELECT\n                20 + ROW_NUMBER() OVER (ORDER BY data_type) AS index_pos\n                , column_name AS meta_data_key\n                , 'column' AS identifier\n                , '' AS detail\n                , CAST(data_type AS STRING) AS meta_data_value\n            FROM meta_data\n        )\n    \n\n\n        \n        , \n    \n    assembled_result AS (\n        \n            SELECT\n                \n                     index_pos\n                \n                    , meta_data_key\n                \n                    , meta_data_value\n                \n                    , identifier\n                \n                    , detail\n                \n            FROM\n            dataset_info\n            UNION ALL\n        \n            SELECT\n                \n                     index_pos\n                \n                    , meta_data_key\n                \n                    , meta_data_value\n                \n                    , identifier\n                \n                    , detail\n                \n            FROM\n            rowcount_info\n            UNION ALL\n        \n            SELECT\n                \n                     index_pos\n                \n                    , meta_data_key\n                \n                    , meta_data_value\n                \n                    , identifier\n                \n                    , detail\n                \n            FROM\n            column_info\n            \n        \n    )\n\n\n    \n    \n        , \n\n    \n    \n\n    \n    \n    \n\n    \n    \n    \n        \n        \n\n            \n\n\n            column_detail_str_length AS (\n                SELECT\n                    1\n                    \n                            , MIN(str_length) AS min\n                            , MAX(str_length) AS max\n                            \n                                , ROUND(AVG(str_length),4) AS avg\n                                \n                                , ROUND(APPROX_QUANTILE(str_length, 0.25),4) AS percentile_25\n                                , ROUND(APPROX_QUANTILE(str_length, 0.5),4) AS percentile_50\n                                , ROUND(APPROX_QUANTILE(str_length, 0.75),4) AS percentile_75\n                                \n                            \n                    \n\n\n                    , SUM(COUNT(str_length)) OVER () AS cnt_total\n                    , SUM(COUNT(DISTINCT str_length)) OVER () AS cnt_unique\n                    , COUNT_IF(str_length IS NULL) AS cnt_null\n\n                FROM \"dbt_db\".\"dbt_schema\".\"data_generator_enriched_describe\"\n\n                GROUP BY ALL\n\n                \n\n            ) \n        \n\n        \n        , column_detail_info_numeric AS (\n            \n            \n            SELECT\n                'str_length' AS column_name\n                , JSON_OBJECT(\n                    'column_name', 'str_length'\n                    , 'count' , MIN(cnt_total)\n                    , 'count_null' , MAX(cnt_null) -- needs to be max not min otherwise always zero\n                    \n                        , 'min' , MIN(min)\n                        , 'max' , MIN(max)\n                        \n                            , 'mean' , MIN(avg)\n                            , 'percentile_25' , MIN(percentile_25)\n                            , 'percentile_50' , MIN(percentile_50)\n                            , 'percentile_75' , MIN(percentile_75)\n                        \n                    \n                ) AS detail\n            FROM column_detail_str_length\n            \n        \n\n        )\n    \n\n\n    \n        , \n\n    \n    \n\n    \n    \n    \n\n    \n    \n    \n        \n        \n\n            \n\n\n            column_detail_country AS (\n                SELECT\n                    1\n                    \n                        , country\n                        , COUNT(*) AS cnt\n                    \n\n\n                    , SUM(COUNT(country)) OVER () AS cnt_total\n                    , SUM(COUNT(DISTINCT country)) OVER () AS cnt_unique\n                    , COUNT_IF(country IS NULL) AS cnt_null\n\n                FROM \"dbt_db\".\"dbt_schema\".\"data_generator_enriched_describe\"\n\n                GROUP BY ALL\n\n                \n                    ORDER by cnt_null DESC, cnt DESC\n                    LIMIT 10\n                \n\n            ) ,\n        \n\n            \n\n\n            column_detail_company_name AS (\n                SELECT\n                    1\n                    \n                        , company_name\n                        , COUNT(*) AS cnt\n                    \n\n\n                    , SUM(COUNT(company_name)) OVER () AS cnt_total\n                    , SUM(COUNT(DISTINCT company_name)) OVER () AS cnt_unique\n                    , COUNT_IF(company_name IS NULL) AS cnt_null\n\n                FROM \"dbt_db\".\"dbt_schema\".\"data_generator_enriched_describe\"\n\n                GROUP BY ALL\n\n                \n                    ORDER by cnt_null DESC, cnt DESC\n                    LIMIT 10\n                \n\n            ) \n        \n\n        \n        , column_detail_info_text AS (\n            \n            \n            SELECT\n                'country' AS column_name\n                , JSON_OBJECT(\n                    'column_name', 'country'\n                    , 'count' , MIN(cnt_total)\n                    , 'count_null' , MAX(cnt_null) -- needs to be max not min otherwise always zero\n                    \n                        \n                            , 'unique_values' , MIN(cnt_unique)\n                        \n                        , 'value_counts_top10',\n                            ARRAY_AGG\n                                (JSON_OBJECT(\n                                    CAST(COALESCE(country,'NULL') AS STRING)\n                                , cnt)\n                                )\n                    \n                ) AS detail\n            FROM column_detail_country\n            UNION ALL\n        \n            \n            SELECT\n                'company_name' AS column_name\n                , JSON_OBJECT(\n                    'column_name', 'company_name'\n                    , 'count' , MIN(cnt_total)\n                    , 'count_null' , MAX(cnt_null) -- needs to be max not min otherwise always zero\n                    \n                        \n                            , 'unique_values' , MIN(cnt_unique)\n                        \n                        , 'value_counts_top10',\n                            ARRAY_AGG\n                                (JSON_OBJECT(\n                                    CAST(COALESCE(company_name,'NULL') AS STRING)\n                                , cnt)\n                                )\n                    \n                ) AS detail\n            FROM column_detail_company_name\n            \n        \n\n        )\n    \n\n\n    \n        , \n\n    \n    \n\n    \n    \n    \n\n    \n    \n    \n        \n        \n\n            \n                \n            \n\n\n            column_detail_date_day AS (\n                SELECT\n                    1\n                    \n                            , MIN(date_day) AS min\n                            , MAX(date_day) AS max\n                            \n                                , MIN('Daily') AS estimated_granularity\n                                , MIN(1.0) AS estimated_granularity_confidence\n                            \n                    \n\n\n                    , SUM(COUNT(date_day)) OVER () AS cnt_total\n                    , SUM(COUNT(DISTINCT date_day)) OVER () AS cnt_unique\n                    , COUNT_IF(date_day IS NULL) AS cnt_null\n\n                FROM \"dbt_db\".\"dbt_schema\".\"data_generator_enriched_describe\"\n\n                GROUP BY ALL\n\n                \n\n            ) \n        \n\n        \n        , column_detail_info_date AS (\n            \n            \n            SELECT\n                'date_day' AS column_name\n                , JSON_OBJECT(\n                    'column_name', 'date_day'\n                    , 'count' , MIN(cnt_total)\n                    , 'count_null' , MAX(cnt_null) -- needs to be max not min otherwise always zero\n                    \n                        , 'min' , MIN(min)\n                        , 'max' , MIN(max)\n                        \n                            , 'estimated_granularity' , MIN(estimated_granularity)\n                            , 'estimated_granularity_confidence' , MIN(estimated_granularity_confidence)\n                        \n                    \n                ) AS detail\n            FROM column_detail_date_day\n            \n        \n\n        )\n    \n\n\n    \n        , \n\n    \n    \n\n    \n    \n    \n\n    \n    \n    \n        \n        \n\n            \n\n\n            column_detail_is_short_string AS (\n                SELECT\n                    1\n                    \n                        , is_short_string\n                        , COUNT(*) AS cnt\n                    \n\n\n                    , SUM(COUNT(is_short_string)) OVER () AS cnt_total\n                    , SUM(COUNT(DISTINCT is_short_string)) OVER () AS cnt_unique\n                    , COUNT_IF(is_short_string IS NULL) AS cnt_null\n\n                FROM \"dbt_db\".\"dbt_schema\".\"data_generator_enriched_describe\"\n\n                GROUP BY ALL\n\n                \n\n            ) \n        \n\n        \n        , column_detail_info_boolean AS (\n            \n            \n            SELECT\n                'is_short_string' AS column_name\n                , JSON_OBJECT(\n                    'column_name', 'is_short_string'\n                    , 'count' , MIN(cnt_total)\n                    , 'count_null' , MAX(cnt_null) -- needs to be max not min otherwise always zero\n                    \n                        \n                        , 'value_counts_top10',\n                            ARRAY_AGG\n                                (JSON_OBJECT(\n                                    CAST(COALESCE(is_short_string,false) AS STRING)\n                                , cnt)\n                                )\n                    \n                ) AS detail\n            FROM column_detail_is_short_string\n            \n        \n\n        )\n    \n\n\n    \n\n    \n        \n\n\n\n\n\n    SELECT\n        assembed_result.meta_data_key\n        , assembed_result.meta_data_value\n        , assembed_result.identifier\n        , COALESCE(text_detail.detail, numeric_detail.detail,date_detail.detail, boolean_detail.detail) AS detail\n    FROM assembled_result AS assembed_result\n    LEFT JOIN column_detail_info_text AS text_detail\n    ON assembed_result.meta_data_key = text_detail.column_name\n    LEFT JOIN column_detail_info_numeric AS numeric_detail\n    ON assembed_result.meta_data_key = numeric_detail.column_name\n    LEFT JOIN column_detail_info_date AS date_detail\n    ON assembed_result.meta_data_key = date_detail.column_name\n    LEFT JOIN column_detail_info_boolean AS boolean_detail\n    ON assembed_result.meta_data_key = boolean_detail.column_name\n\n    ORDER BY index_pos ASC\n\n\n    \n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_eda_tools.describe_ex4": {"database": "dbt_db", "schema": "dbt_schema", "name": "describe_ex4", "resource_type": "model", "package_name": "dbt_eda_tools", "path": "public\\describe\\describe_ex4.sql", "original_file_path": "examples\\public\\describe\\describe_ex4.sql", "unique_id": "model.dbt_eda_tools.describe_ex4", "fqn": ["dbt_eda_tools", "public", "describe", "describe_ex4"], "alias": "describe_ex4", "checksum": {"name": "sha256", "checksum": "bb170e7b73af505b577679ff30108188a2cd8808c60d67b9a38d34210e9a21f5"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "{{ dbt_eda_tools.get_row_count() }}", "transaction": true, "index": null}, {"sql": "{{ dbt_eda_tools.get_preview(20) }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"post-hook": ["{{ dbt_eda_tools.get_row_count() }}", "{{ dbt_eda_tools.get_preview(20) }}"], "materialized": "view"}, "created_at": 1728209049.9550223, "relation_name": "\"dbt_db\".\"dbt_schema\".\"describe_ex4\"", "raw_code": "{{dbt_eda_tools.describe('data_generator_enriched_describe', include='all')}}", "language": "sql", "refs": [{"name": "data_generator_enriched_describe", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_eda_tools.describe", "macro.dbt_eda_tools.get_row_count", "macro.dbt_eda_tools.get_preview"], "nodes": ["model.dbt_eda_tools.data_generator_enriched_describe"]}, "compiled_path": "target\\compiled\\dbt_eda_tools\\examples\\public\\describe\\describe_ex4.sql", "compiled": true, "compiled_code": "\n\n    \n\n    \n    \n    \n    \n\n    \n\n    WITH\n    \n    dummy AS (SELECT 1)\n    \n    \n        , \n\n    \n    \n\n    \n    \n    \n\n    \n    \n    \n        \n        \n\n            \n\n\n            column_detail_str_length AS (\n                SELECT\n                    1\n                    \n                            , MIN(str_length) AS min\n                            , MAX(str_length) AS max\n                            \n                                , ROUND(AVG(str_length),4) AS avg\n                                \n                                , ROUND(APPROX_QUANTILE(str_length, 0.25),4) AS percentile_25\n                                , ROUND(APPROX_QUANTILE(str_length, 0.5),4) AS percentile_50\n                                , ROUND(APPROX_QUANTILE(str_length, 0.75),4) AS percentile_75\n                                \n                            \n                    \n\n\n                    , SUM(COUNT(str_length)) OVER () AS cnt_total\n                    , SUM(COUNT(DISTINCT str_length)) OVER () AS cnt_unique\n                    , COUNT_IF(str_length IS NULL) AS cnt_null\n\n                FROM \"dbt_db\".\"dbt_schema\".\"data_generator_enriched_describe\"\n\n                GROUP BY ALL\n\n                \n\n            ) \n        \n\n        \n        , column_detail_info_numeric AS (\n            \n            \n            SELECT\n                'str_length' AS column_name\n                , JSON_OBJECT(\n                    'column_name', 'str_length'\n                    , 'count' , MIN(cnt_total)\n                    , 'count_null' , MAX(cnt_null) -- needs to be max not min otherwise always zero\n                    \n                        , 'min' , MIN(min)\n                        , 'max' , MIN(max)\n                        \n                            , 'mean' , MIN(avg)\n                            , 'percentile_25' , MIN(percentile_25)\n                            , 'percentile_50' , MIN(percentile_50)\n                            , 'percentile_75' , MIN(percentile_75)\n                        \n                    \n                ) AS detail\n            FROM column_detail_str_length\n            \n        \n\n        )\n    \n\n\n    \n        , \n\n    \n    \n\n    \n    \n    \n\n    \n    \n    \n        \n        \n\n            \n\n\n            column_detail_country AS (\n                SELECT\n                    1\n                    \n                        , country\n                        , COUNT(*) AS cnt\n                    \n\n\n                    , SUM(COUNT(country)) OVER () AS cnt_total\n                    , SUM(COUNT(DISTINCT country)) OVER () AS cnt_unique\n                    , COUNT_IF(country IS NULL) AS cnt_null\n\n                FROM \"dbt_db\".\"dbt_schema\".\"data_generator_enriched_describe\"\n\n                GROUP BY ALL\n\n                \n                    ORDER by cnt_null DESC, cnt DESC\n                    LIMIT 10\n                \n\n            ) ,\n        \n\n            \n\n\n            column_detail_company_name AS (\n                SELECT\n                    1\n                    \n                        , company_name\n                        , COUNT(*) AS cnt\n                    \n\n\n                    , SUM(COUNT(company_name)) OVER () AS cnt_total\n                    , SUM(COUNT(DISTINCT company_name)) OVER () AS cnt_unique\n                    , COUNT_IF(company_name IS NULL) AS cnt_null\n\n                FROM \"dbt_db\".\"dbt_schema\".\"data_generator_enriched_describe\"\n\n                GROUP BY ALL\n\n                \n                    ORDER by cnt_null DESC, cnt DESC\n                    LIMIT 10\n                \n\n            ) \n        \n\n        \n        , column_detail_info_text AS (\n            \n            \n            SELECT\n                'country' AS column_name\n                , JSON_OBJECT(\n                    'column_name', 'country'\n                    , 'count' , MIN(cnt_total)\n                    , 'count_null' , MAX(cnt_null) -- needs to be max not min otherwise always zero\n                    \n                        \n                            , 'unique_values' , MIN(cnt_unique)\n                        \n                        , 'value_counts_top10',\n                            ARRAY_AGG\n                                (JSON_OBJECT(\n                                    CAST(COALESCE(country,'NULL') AS STRING)\n                                , cnt)\n                                )\n                    \n                ) AS detail\n            FROM column_detail_country\n            UNION ALL\n        \n            \n            SELECT\n                'company_name' AS column_name\n                , JSON_OBJECT(\n                    'column_name', 'company_name'\n                    , 'count' , MIN(cnt_total)\n                    , 'count_null' , MAX(cnt_null) -- needs to be max not min otherwise always zero\n                    \n                        \n                            , 'unique_values' , MIN(cnt_unique)\n                        \n                        , 'value_counts_top10',\n                            ARRAY_AGG\n                                (JSON_OBJECT(\n                                    CAST(COALESCE(company_name,'NULL') AS STRING)\n                                , cnt)\n                                )\n                    \n                ) AS detail\n            FROM column_detail_company_name\n            \n        \n\n        )\n    \n\n\n    \n        , \n\n    \n    \n\n    \n    \n    \n\n    \n    \n    \n        \n        \n\n            \n                \n            \n\n\n            column_detail_date_day AS (\n                SELECT\n                    1\n                    \n                            , MIN(date_day) AS min\n                            , MAX(date_day) AS max\n                            \n                                , MIN('Daily') AS estimated_granularity\n                                , MIN(1.0) AS estimated_granularity_confidence\n                            \n                    \n\n\n                    , SUM(COUNT(date_day)) OVER () AS cnt_total\n                    , SUM(COUNT(DISTINCT date_day)) OVER () AS cnt_unique\n                    , COUNT_IF(date_day IS NULL) AS cnt_null\n\n                FROM \"dbt_db\".\"dbt_schema\".\"data_generator_enriched_describe\"\n\n                GROUP BY ALL\n\n                \n\n            ) \n        \n\n        \n        , column_detail_info_date AS (\n            \n            \n            SELECT\n                'date_day' AS column_name\n                , JSON_OBJECT(\n                    'column_name', 'date_day'\n                    , 'count' , MIN(cnt_total)\n                    , 'count_null' , MAX(cnt_null) -- needs to be max not min otherwise always zero\n                    \n                        , 'min' , MIN(min)\n                        , 'max' , MIN(max)\n                        \n                            , 'estimated_granularity' , MIN(estimated_granularity)\n                            , 'estimated_granularity_confidence' , MIN(estimated_granularity_confidence)\n                        \n                    \n                ) AS detail\n            FROM column_detail_date_day\n            \n        \n\n        )\n    \n\n\n    \n        , \n\n    \n    \n\n    \n    \n    \n\n    \n    \n    \n        \n        \n\n            \n\n\n            column_detail_is_short_string AS (\n                SELECT\n                    1\n                    \n                        , is_short_string\n                        , COUNT(*) AS cnt\n                    \n\n\n                    , SUM(COUNT(is_short_string)) OVER () AS cnt_total\n                    , SUM(COUNT(DISTINCT is_short_string)) OVER () AS cnt_unique\n                    , COUNT_IF(is_short_string IS NULL) AS cnt_null\n\n                FROM \"dbt_db\".\"dbt_schema\".\"data_generator_enriched_describe\"\n\n                GROUP BY ALL\n\n                \n\n            ) \n        \n\n        \n        , column_detail_info_boolean AS (\n            \n            \n            SELECT\n                'is_short_string' AS column_name\n                , JSON_OBJECT(\n                    'column_name', 'is_short_string'\n                    , 'count' , MIN(cnt_total)\n                    , 'count_null' , MAX(cnt_null) -- needs to be max not min otherwise always zero\n                    \n                        \n                        , 'value_counts_top10',\n                            ARRAY_AGG\n                                (JSON_OBJECT(\n                                    CAST(COALESCE(is_short_string,false) AS STRING)\n                                , cnt)\n                                )\n                    \n                ) AS detail\n            FROM column_detail_is_short_string\n            \n        \n\n        )\n    \n\n\n    \n\n    \n        \n\n\n\n\n\n    , unioned_data AS (\n            \n                SELECT\n                   'numeric' AS dtype\n                    , * FROM\n                column_detail_info_numeric\n                WHERE column_name != ''\n                \n                    UNION ALL\n                \n            \n                SELECT\n                   'text' AS dtype\n                    , * FROM\n                column_detail_info_text\n                WHERE column_name != ''\n                \n                    UNION ALL\n                \n            \n                SELECT\n                   'date' AS dtype\n                    , * FROM\n                column_detail_info_date\n                WHERE column_name != ''\n                \n                    UNION ALL\n                \n            \n                SELECT\n                   'boolean' AS dtype\n                    , * FROM\n                column_detail_info_boolean\n                WHERE column_name != ''\n                \n            \n        )\n        \n            , flatten_data AS (\n                SELECT\n                    column_name\n                    , dtype\n                    \n                        , json_extract(detail, '$.count') AS count\n                    \n                        , json_extract(detail, '$.count_null') AS count_null\n                    \n                        , json_extract(detail, '$.mean') AS mean\n                    \n                        , json_extract(detail, '$.percentile_25') AS percentile_25\n                    \n                        , json_extract(detail, '$.percentile_50') AS percentile_50\n                    \n                        , json_extract(detail, '$.percentile_75') AS percentile_75\n                    \n                        , json_extract(detail, '$.unique_values') AS unique_values\n                    \n                        , json_extract(detail, '$.value_counts_top10') AS value_counts_top10\n                    \n                        , json_extract(detail, '$.estimated_granularity') AS estimated_granularity\n                    \n                        , json_extract(detail, '$.estimated_granularity_confidence') AS estimated_granularity_confidence\n                    \n                        , json_extract(detail, '$.min') AS min\n                    \n                        , json_extract(detail, '$.max') AS max\n                    \n                    FROM unioned_data\n            )\n        \n        , unpivoted_data AS (\n                SELECT\n                    column_name\n                    , dtype\n                    , key AS pivot_key\n                    , JSON(value) AS pivot_value ,\n                FROM\n            \n                flatten_data AS f\n                UNPIVOT (\n                    value FOR key IN (count, count_null, mean, percentile_25, percentile_50, percentile_75, unique_values, value_counts_top10, estimated_granularity, estimated_granularity_confidence, min, max)\n                )\n            \n\n        )\n        SELECT\n            column_name\n            , dtype\n            , count\n            , count_null\n            , ROUND((\n                CAST(count_null AS NUMERIC)\n                / (CAST(count AS NUMERIC)+CAST(count_null AS NUMERIC))\n            ),3)\n\n            AS percent_null\n            , * EXCLUDE(column_name, dtype\n                , count\n                , count_null\n            )\n        FROM\n        unpivoted_data\n        PIVOT(MIN(pivot_value) FOR pivot_key IN (\"count\", \"count_null\", \"mean\", \"percentile_25\", \"percentile_50\", \"percentile_75\", \"unique_values\", \"value_counts_top10\", \"estimated_granularity\", \"estimated_granularity_confidence\", \"min\", \"max\"))\n        ORDER BY dtype\n\n\n    \n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_eda_tools.describe_ex5": {"database": "dbt_db", "schema": "dbt_schema", "name": "describe_ex5", "resource_type": "model", "package_name": "dbt_eda_tools", "path": "public\\describe\\describe_ex5.sql", "original_file_path": "examples\\public\\describe\\describe_ex5.sql", "unique_id": "model.dbt_eda_tools.describe_ex5", "fqn": ["dbt_eda_tools", "public", "describe", "describe_ex5"], "alias": "describe_ex5", "checksum": {"name": "sha256", "checksum": "2ab86d92a0adaa20eccd42181a1ec846f0be35a63e9098019b0817c778a897bb"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "{{ dbt_eda_tools.get_row_count() }}", "transaction": true, "index": null}, {"sql": "{{ dbt_eda_tools.get_preview(20) }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"post-hook": ["{{ dbt_eda_tools.get_row_count() }}", "{{ dbt_eda_tools.get_preview(20) }}"], "materialized": "view"}, "created_at": 1728209050.0139947, "relation_name": "\"dbt_db\".\"dbt_schema\".\"describe_ex5\"", "raw_code": "{{dbt_eda_tools.describe('data_generator_enriched_describe', include=['text','boolean','numeric'])}}", "language": "sql", "refs": [{"name": "data_generator_enriched_describe", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_eda_tools.describe", "macro.dbt_eda_tools.get_row_count", "macro.dbt_eda_tools.get_preview"], "nodes": ["model.dbt_eda_tools.data_generator_enriched_describe"]}, "compiled_path": "target\\compiled\\dbt_eda_tools\\examples\\public\\describe\\describe_ex5.sql", "compiled": true, "compiled_code": "\n\n    \n\n    \n    \n    \n    \n\n    \n\n    WITH\n    \n    dummy AS (SELECT 1)\n    \n    \n        , \n\n    \n    \n\n    \n    \n    \n\n    \n    \n    \n        \n        \n\n            \n\n\n            column_detail_country AS (\n                SELECT\n                    1\n                    \n                        , country\n                        , COUNT(*) AS cnt\n                    \n\n\n                    , SUM(COUNT(country)) OVER () AS cnt_total\n                    , SUM(COUNT(DISTINCT country)) OVER () AS cnt_unique\n                    , COUNT_IF(country IS NULL) AS cnt_null\n\n                FROM \"dbt_db\".\"dbt_schema\".\"data_generator_enriched_describe\"\n\n                GROUP BY ALL\n\n                \n                    ORDER by cnt_null DESC, cnt DESC\n                    LIMIT 10\n                \n\n            ) ,\n        \n\n            \n\n\n            column_detail_company_name AS (\n                SELECT\n                    1\n                    \n                        , company_name\n                        , COUNT(*) AS cnt\n                    \n\n\n                    , SUM(COUNT(company_name)) OVER () AS cnt_total\n                    , SUM(COUNT(DISTINCT company_name)) OVER () AS cnt_unique\n                    , COUNT_IF(company_name IS NULL) AS cnt_null\n\n                FROM \"dbt_db\".\"dbt_schema\".\"data_generator_enriched_describe\"\n\n                GROUP BY ALL\n\n                \n                    ORDER by cnt_null DESC, cnt DESC\n                    LIMIT 10\n                \n\n            ) \n        \n\n        \n        , column_detail_info_text AS (\n            \n            \n            SELECT\n                'country' AS column_name\n                , JSON_OBJECT(\n                    'column_name', 'country'\n                    , 'count' , MIN(cnt_total)\n                    , 'count_null' , MAX(cnt_null) -- needs to be max not min otherwise always zero\n                    \n                        \n                            , 'unique_values' , MIN(cnt_unique)\n                        \n                        , 'value_counts_top10',\n                            ARRAY_AGG\n                                (JSON_OBJECT(\n                                    CAST(COALESCE(country,'NULL') AS STRING)\n                                , cnt)\n                                )\n                    \n                ) AS detail\n            FROM column_detail_country\n            UNION ALL\n        \n            \n            SELECT\n                'company_name' AS column_name\n                , JSON_OBJECT(\n                    'column_name', 'company_name'\n                    , 'count' , MIN(cnt_total)\n                    , 'count_null' , MAX(cnt_null) -- needs to be max not min otherwise always zero\n                    \n                        \n                            , 'unique_values' , MIN(cnt_unique)\n                        \n                        , 'value_counts_top10',\n                            ARRAY_AGG\n                                (JSON_OBJECT(\n                                    CAST(COALESCE(company_name,'NULL') AS STRING)\n                                , cnt)\n                                )\n                    \n                ) AS detail\n            FROM column_detail_company_name\n            \n        \n\n        )\n    \n\n\n    \n        , \n\n    \n    \n\n    \n    \n    \n\n    \n    \n    \n        \n        \n\n            \n\n\n            column_detail_is_short_string AS (\n                SELECT\n                    1\n                    \n                        , is_short_string\n                        , COUNT(*) AS cnt\n                    \n\n\n                    , SUM(COUNT(is_short_string)) OVER () AS cnt_total\n                    , SUM(COUNT(DISTINCT is_short_string)) OVER () AS cnt_unique\n                    , COUNT_IF(is_short_string IS NULL) AS cnt_null\n\n                FROM \"dbt_db\".\"dbt_schema\".\"data_generator_enriched_describe\"\n\n                GROUP BY ALL\n\n                \n\n            ) \n        \n\n        \n        , column_detail_info_boolean AS (\n            \n            \n            SELECT\n                'is_short_string' AS column_name\n                , JSON_OBJECT(\n                    'column_name', 'is_short_string'\n                    , 'count' , MIN(cnt_total)\n                    , 'count_null' , MAX(cnt_null) -- needs to be max not min otherwise always zero\n                    \n                        \n                        , 'value_counts_top10',\n                            ARRAY_AGG\n                                (JSON_OBJECT(\n                                    CAST(COALESCE(is_short_string,false) AS STRING)\n                                , cnt)\n                                )\n                    \n                ) AS detail\n            FROM column_detail_is_short_string\n            \n        \n\n        )\n    \n\n\n    \n        , \n\n    \n    \n\n    \n    \n    \n\n    \n    \n    \n        \n        \n\n            \n\n\n            column_detail_str_length AS (\n                SELECT\n                    1\n                    \n                            , MIN(str_length) AS min\n                            , MAX(str_length) AS max\n                            \n                                , ROUND(AVG(str_length),4) AS avg\n                                \n                                , ROUND(APPROX_QUANTILE(str_length, 0.25),4) AS percentile_25\n                                , ROUND(APPROX_QUANTILE(str_length, 0.5),4) AS percentile_50\n                                , ROUND(APPROX_QUANTILE(str_length, 0.75),4) AS percentile_75\n                                \n                            \n                    \n\n\n                    , SUM(COUNT(str_length)) OVER () AS cnt_total\n                    , SUM(COUNT(DISTINCT str_length)) OVER () AS cnt_unique\n                    , COUNT_IF(str_length IS NULL) AS cnt_null\n\n                FROM \"dbt_db\".\"dbt_schema\".\"data_generator_enriched_describe\"\n\n                GROUP BY ALL\n\n                \n\n            ) \n        \n\n        \n        , column_detail_info_numeric AS (\n            \n            \n            SELECT\n                'str_length' AS column_name\n                , JSON_OBJECT(\n                    'column_name', 'str_length'\n                    , 'count' , MIN(cnt_total)\n                    , 'count_null' , MAX(cnt_null) -- needs to be max not min otherwise always zero\n                    \n                        , 'min' , MIN(min)\n                        , 'max' , MIN(max)\n                        \n                            , 'mean' , MIN(avg)\n                            , 'percentile_25' , MIN(percentile_25)\n                            , 'percentile_50' , MIN(percentile_50)\n                            , 'percentile_75' , MIN(percentile_75)\n                        \n                    \n                ) AS detail\n            FROM column_detail_str_length\n            \n        \n\n        )\n    \n\n\n    \n\n    \n        \n\n\n\n\n\n    , unioned_data AS (\n            \n                SELECT\n                   'text' AS dtype\n                    , * FROM\n                column_detail_info_text\n                WHERE column_name != ''\n                \n                    UNION ALL\n                \n            \n                SELECT\n                   'boolean' AS dtype\n                    , * FROM\n                column_detail_info_boolean\n                WHERE column_name != ''\n                \n                    UNION ALL\n                \n            \n                SELECT\n                   'numeric' AS dtype\n                    , * FROM\n                column_detail_info_numeric\n                WHERE column_name != ''\n                \n            \n        )\n        \n            , flatten_data AS (\n                SELECT\n                    column_name\n                    , dtype\n                    \n                        , json_extract(detail, '$.count') AS count\n                    \n                        , json_extract(detail, '$.count_null') AS count_null\n                    \n                        , json_extract(detail, '$.mean') AS mean\n                    \n                        , json_extract(detail, '$.percentile_25') AS percentile_25\n                    \n                        , json_extract(detail, '$.percentile_50') AS percentile_50\n                    \n                        , json_extract(detail, '$.percentile_75') AS percentile_75\n                    \n                        , json_extract(detail, '$.unique_values') AS unique_values\n                    \n                        , json_extract(detail, '$.value_counts_top10') AS value_counts_top10\n                    \n                        , json_extract(detail, '$.estimated_granularity') AS estimated_granularity\n                    \n                        , json_extract(detail, '$.estimated_granularity_confidence') AS estimated_granularity_confidence\n                    \n                        , json_extract(detail, '$.min') AS min\n                    \n                        , json_extract(detail, '$.max') AS max\n                    \n                    FROM unioned_data\n            )\n        \n        , unpivoted_data AS (\n                SELECT\n                    column_name\n                    , dtype\n                    , key AS pivot_key\n                    , JSON(value) AS pivot_value ,\n                FROM\n            \n                flatten_data AS f\n                UNPIVOT (\n                    value FOR key IN (count, count_null, mean, percentile_25, percentile_50, percentile_75, unique_values, value_counts_top10, estimated_granularity, estimated_granularity_confidence, min, max)\n                )\n            \n\n        )\n        SELECT\n            column_name\n            , dtype\n            , count\n            , count_null\n            , ROUND((\n                CAST(count_null AS NUMERIC)\n                / (CAST(count AS NUMERIC)+CAST(count_null AS NUMERIC))\n            ),3)\n\n            AS percent_null\n            , * EXCLUDE(column_name, dtype\n                , count\n                , count_null\n            )\n        FROM\n        unpivoted_data\n        PIVOT(MIN(pivot_value) FOR pivot_key IN (\"count\", \"count_null\", \"mean\", \"percentile_25\", \"percentile_50\", \"percentile_75\", \"unique_values\", \"value_counts_top10\", \"estimated_granularity\", \"estimated_granularity_confidence\", \"min\", \"max\"))\n        ORDER BY dtype\n\n\n    \n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_eda_tools.data_generator_enriched_describe": {"database": "dbt_db", "schema": "dbt_schema", "name": "data_generator_enriched_describe", "resource_type": "model", "package_name": "dbt_eda_tools", "path": "0.staging\\data_generator_enriched_describe.sql", "original_file_path": "examples\\0.staging\\data_generator_enriched_describe.sql", "unique_id": "model.dbt_eda_tools.data_generator_enriched_describe", "fqn": ["dbt_eda_tools", "0.staging", "data_generator_enriched_describe"], "alias": "data_generator_enriched_describe", "checksum": {"name": "sha256", "checksum": "00ca2e1e513f3c6112a95b4bf0fa7f9f51cd8639bd715f111d8af9953f56e81e"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "{{ dbt_eda_tools.get_row_count() }}", "transaction": true, "index": null}, {"sql": "{{ dbt_eda_tools.get_preview(20) }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"post-hook": ["{{ dbt_eda_tools.get_row_count() }}", "{{ dbt_eda_tools.get_preview(20) }}"], "materialized": "view"}, "created_at": 1728209050.060555, "relation_name": "\"dbt_db\".\"dbt_schema\".\"data_generator_enriched_describe\"", "raw_code": "{% set db_name = fetch_db() | trim  %}\r\n\r\nSELECT\r\n    *\r\n    , IF{{'F' if db_name=='snowflake' else ''}}(str_length<4,True,False)   AS is_short_string\r\nFROM {{ ref('data_generator') }}", "language": "sql", "refs": [{"name": "data_generator", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_eda_tools.fetch_db", "macro.dbt_eda_tools.get_row_count", "macro.dbt_eda_tools.get_preview"], "nodes": ["model.dbt_eda_tools.data_generator"]}, "compiled_path": "target\\compiled\\dbt_eda_tools\\examples\\0.staging\\data_generator_enriched_describe.sql", "compiled": true, "compiled_code": "\n\nSELECT\n    *\n    , IF(str_length<4,True,False)   AS is_short_string\nFROM \"dbt_db\".\"dbt_schema\".\"data_generator\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_eda_tools.get_missing_dates_ex1": {"database": "dbt_db", "schema": "dbt_schema", "name": "get_missing_dates_ex1", "resource_type": "model", "package_name": "dbt_eda_tools", "path": "public\\get_missing_dates\\get_missing_dates_ex1.sql", "original_file_path": "examples\\public\\get_missing_dates\\get_missing_dates_ex1.sql", "unique_id": "model.dbt_eda_tools.get_missing_dates_ex1", "fqn": ["dbt_eda_tools", "public", "get_missing_dates", "get_missing_dates_ex1"], "alias": "get_missing_dates_ex1", "checksum": {"name": "sha256", "checksum": "88f38583d48d0413ca3e9b19bcbcbebdcb18642394ac129c6c92de6edb4b782f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "{{ dbt_eda_tools.get_row_count() }}", "transaction": true, "index": null}, {"sql": "{{ dbt_eda_tools.get_preview(20) }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"post-hook": ["{{ dbt_eda_tools.get_row_count() }}", "{{ dbt_eda_tools.get_preview(20) }}"], "materialized": "view"}, "created_at": 1728209050.1035867, "relation_name": "\"dbt_db\".\"dbt_schema\".\"get_missing_dates_ex1\"", "raw_code": "/**\r\n * Retrieves the missing dates in the date_day column of the missing_day model at the Day level granularity.\r\n *\r\n * @param {string} missing_day - The name of the model.\r\n * @param {string} date_day - The name of the column containing the dates.\r\n * @param {array} [dimensions] - An optional array of dimensions across which the missing dates are computed.\r\n * @param {object} [filters] - An optional filter object.\r\n * @param {string} [expected_frequency] - The interval to use when generating the missing dates (e.g. 'DAY', 'MONTH', 'YEAR').\r\n * @returns {rows} Rows of missing dates.\r\n */\r\n\r\n{{dbt_eda_tools.get_missing_date('missing_day','date_day', [], {}, 'DAY')}}", "language": "sql", "refs": [{"name": "missing_day", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_eda_tools.get_missing_date", "macro.dbt_eda_tools.get_row_count", "macro.dbt_eda_tools.get_preview"], "nodes": ["model.dbt_eda_tools.missing_day"]}, "compiled_path": "target\\compiled\\dbt_eda_tools\\examples\\public\\get_missing_dates\\get_missing_dates_ex1.sql", "compiled": true, "compiled_code": "/**\n * Retrieves the missing dates in the date_day column of the missing_day model at the Day level granularity.\n *\n * @param {string} missing_day - The name of the model.\n * @param {string} date_day - The name of the column containing the dates.\n * @param {array} [dimensions] - An optional array of dimensions across which the missing dates are computed.\n * @param {object} [filters] - An optional filter object.\n * @param {string} [expected_frequency] - The interval to use when generating the missing dates (e.g. 'DAY', 'MONTH', 'YEAR').\n * @returns {rows} Rows of missing dates.\n */\n\n\n  WITH\n  unique_dates AS (\n    SELECT\n      DISTINCT\n          date_day\n          \n    FROM \"dbt_db\".\"dbt_schema\".\"missing_day\"\n    \n  )\n  , dates_lagged AS (\n    SELECT *\n    , LAG(date_day,1) OVER (\n          ORDER BY\n          \n          date_day DESC) AS next_date_day\n    FROM unique_dates\n  )\n  SELECT\n      date_day\n      \n      , next_date_day\n      , ABS(\n        (date_diff('DAY', next_date_day::timestamp, date_day::timestamp ))\n    ) AS missing_day\n  FROM dates_lagged\n  WHERE \n        (date_diff('DAY', next_date_day::timestamp, date_day::timestamp ))\n     < -1\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_eda_tools.get_missing_dates_ex3": {"database": "dbt_db", "schema": "dbt_schema", "name": "get_missing_dates_ex3", "resource_type": "model", "package_name": "dbt_eda_tools", "path": "public\\get_missing_dates\\get_missing_dates_ex3.sql", "original_file_path": "examples\\public\\get_missing_dates\\get_missing_dates_ex3.sql", "unique_id": "model.dbt_eda_tools.get_missing_dates_ex3", "fqn": ["dbt_eda_tools", "public", "get_missing_dates", "get_missing_dates_ex3"], "alias": "get_missing_dates_ex3", "checksum": {"name": "sha256", "checksum": "aa5438f16a1393857623eb3c009bc6c95398b617bd96e783d5b0df50ff77235d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "{{ dbt_eda_tools.get_row_count() }}", "transaction": true, "index": null}, {"sql": "{{ dbt_eda_tools.get_preview(20) }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"post-hook": ["{{ dbt_eda_tools.get_row_count() }}", "{{ dbt_eda_tools.get_preview(20) }}"], "materialized": "view"}, "created_at": 1728209050.1489449, "relation_name": "\"dbt_db\".\"dbt_schema\".\"get_missing_dates_ex3\"", "raw_code": "/**\r\n * Retrieves the missing dates in the date_day column of the missing_day model at the Day level granularity.\r\n *\r\n * @param {string} missing_day - The name of the model.\r\n * @param {string} date_day - The name of the column containing the dates.\r\n * @param {array} [dimensions] - An optional array of dimensions across which the missing dates are computed.\r\n * @param {object} [filters] - An optional filter object.\r\n * @param {string} [expected_frequency] - The interval to use when generating the missing dates (e.g. 'DAY', 'MONTH', 'YEAR').\r\n * @returns {rows} Rows of missing dates.\r\n */\r\n\r\n{{\r\n    dbt_eda_tools.get_missing_date(\r\n        'missing_day'\r\n        ,'date_day'\r\n        , ['country','company_name']\r\n        , {\r\n            'country': ('DE','US')\r\n            , 'company_name': 'MSFT'\r\n            , 'str_length': '>2'\r\n        }\r\n        , 'DAY'\r\n    )\r\n}}", "language": "sql", "refs": [{"name": "missing_day", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_eda_tools.get_missing_date", "macro.dbt_eda_tools.get_row_count", "macro.dbt_eda_tools.get_preview"], "nodes": ["model.dbt_eda_tools.missing_day"]}, "compiled_path": "target\\compiled\\dbt_eda_tools\\examples\\public\\get_missing_dates\\get_missing_dates_ex3.sql", "compiled": true, "compiled_code": "/**\n * Retrieves the missing dates in the date_day column of the missing_day model at the Day level granularity.\n *\n * @param {string} missing_day - The name of the model.\n * @param {string} date_day - The name of the column containing the dates.\n * @param {array} [dimensions] - An optional array of dimensions across which the missing dates are computed.\n * @param {object} [filters] - An optional filter object.\n * @param {string} [expected_frequency] - The interval to use when generating the missing dates (e.g. 'DAY', 'MONTH', 'YEAR').\n * @returns {rows} Rows of missing dates.\n */\n\n\n  WITH\n  unique_dates AS (\n    SELECT\n      DISTINCT\n          date_day\n          \n              , (country) AS country\n          \n              , (company_name) AS company_name\n          \n    FROM \"dbt_db\".\"dbt_schema\".\"missing_day\"\n    \n      \n          \n            WHERE 1=1\n          \n\n          \n          \n            AND country IN ('DE', 'US')\n          \n      \n          \n\n          \n          \n            \n              AND  company_name = 'MSFT'\n            \n\n          \n      \n          \n\n          \n          \n            \n              AND  str_length >2\n            \n\n          \n      \n    \n  )\n  , dates_lagged AS (\n    SELECT *\n    , LAG(date_day,1) OVER (\n          ORDER BY\n          \n              (country) DESC,\n          \n              (company_name) DESC,\n          \n          date_day DESC) AS next_date_day\n    FROM unique_dates\n  )\n  SELECT\n      date_day\n      \n          , (country) AS country\n      \n          , (company_name) AS company_name\n      \n      , next_date_day\n      , ABS(\n        (date_diff('DAY', next_date_day::timestamp, date_day::timestamp ))\n    ) AS missing_day\n  FROM dates_lagged\n  WHERE \n        (date_diff('DAY', next_date_day::timestamp, date_day::timestamp ))\n     < -1\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_eda_tools.get_missing_dates_ex4": {"database": "dbt_db", "schema": "dbt_schema", "name": "get_missing_dates_ex4", "resource_type": "model", "package_name": "dbt_eda_tools", "path": "public\\get_missing_dates\\get_missing_dates_ex4.sql", "original_file_path": "examples\\public\\get_missing_dates\\get_missing_dates_ex4.sql", "unique_id": "model.dbt_eda_tools.get_missing_dates_ex4", "fqn": ["dbt_eda_tools", "public", "get_missing_dates", "get_missing_dates_ex4"], "alias": "get_missing_dates_ex4", "checksum": {"name": "sha256", "checksum": "5941153c1817151f9bc53ba0640112d9310433d56b63e7cd3e11903d91ad43ac"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "{{ dbt_eda_tools.get_row_count() }}", "transaction": true, "index": null}, {"sql": "{{ dbt_eda_tools.get_preview(20) }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"post-hook": ["{{ dbt_eda_tools.get_row_count() }}", "{{ dbt_eda_tools.get_preview(20) }}"], "materialized": "view"}, "created_at": 1728209050.1893263, "relation_name": "\"dbt_db\".\"dbt_schema\".\"get_missing_dates_ex4\"", "raw_code": "/**\r\n * Retrieves the missing dates in the date_day column of the missing_day model at the Day level granularity.\r\n *\r\n * @param {string} missing_day - The name of the model.\r\n * @param {string} date_day - The name of the column containing the dates.\r\n * @param {array} [dimensions] - An optional array of dimensions across which the missing dates are computed.\r\n * @param {object} [filters] - An optional filter object.\r\n * @param {string} [expected_frequency] - The interval to use when generating the missing dates (e.g. 'DAY', 'MONTH', 'YEAR').\r\n * @returns {rows} Rows of missing dates.\r\n */\r\n\r\n{{\r\n    dbt_eda_tools.get_missing_date(\r\n        'missing_day'\r\n        ,'date_day'\r\n        , ['country','company_name']\r\n        , {\r\n            'country': ('DE','US')\r\n            , 'company_name': ('GOG','A')\r\n            , 'str_length': '=3'\r\n        }\r\n        , 'DAY'\r\n    )\r\n}}", "language": "sql", "refs": [{"name": "missing_day", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_eda_tools.get_missing_date", "macro.dbt_eda_tools.get_row_count", "macro.dbt_eda_tools.get_preview"], "nodes": ["model.dbt_eda_tools.missing_day"]}, "compiled_path": "target\\compiled\\dbt_eda_tools\\examples\\public\\get_missing_dates\\get_missing_dates_ex4.sql", "compiled": true, "compiled_code": "/**\n * Retrieves the missing dates in the date_day column of the missing_day model at the Day level granularity.\n *\n * @param {string} missing_day - The name of the model.\n * @param {string} date_day - The name of the column containing the dates.\n * @param {array} [dimensions] - An optional array of dimensions across which the missing dates are computed.\n * @param {object} [filters] - An optional filter object.\n * @param {string} [expected_frequency] - The interval to use when generating the missing dates (e.g. 'DAY', 'MONTH', 'YEAR').\n * @returns {rows} Rows of missing dates.\n */\n\n\n  WITH\n  unique_dates AS (\n    SELECT\n      DISTINCT\n          date_day\n          \n              , (country) AS country\n          \n              , (company_name) AS company_name\n          \n    FROM \"dbt_db\".\"dbt_schema\".\"missing_day\"\n    \n      \n          \n            WHERE 1=1\n          \n\n          \n          \n            AND country IN ('DE', 'US')\n          \n      \n          \n\n          \n          \n            AND company_name IN ('GOG', 'A')\n          \n      \n          \n\n          \n          \n            \n              AND  str_length =3\n            \n\n          \n      \n    \n  )\n  , dates_lagged AS (\n    SELECT *\n    , LAG(date_day,1) OVER (\n          ORDER BY\n          \n              (country) DESC,\n          \n              (company_name) DESC,\n          \n          date_day DESC) AS next_date_day\n    FROM unique_dates\n  )\n  SELECT\n      date_day\n      \n          , (country) AS country\n      \n          , (company_name) AS company_name\n      \n      , next_date_day\n      , ABS(\n        (date_diff('DAY', next_date_day::timestamp, date_day::timestamp ))\n    ) AS missing_day\n  FROM dates_lagged\n  WHERE \n        (date_diff('DAY', next_date_day::timestamp, date_day::timestamp ))\n     < -1\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_eda_tools.missing_day": {"database": "dbt_db", "schema": "dbt_schema", "name": "missing_day", "resource_type": "model", "package_name": "dbt_eda_tools", "path": "1.intermediate\\get_missing_dates\\missing_day.sql", "original_file_path": "examples\\1.intermediate\\get_missing_dates\\missing_day.sql", "unique_id": "model.dbt_eda_tools.missing_day", "fqn": ["dbt_eda_tools", "1.intermediate", "get_missing_dates", "missing_day"], "alias": "missing_day", "checksum": {"name": "sha256", "checksum": "23f1c3fbd8eba2552c94251399896fe942d2f6cfa48a947a4bb81f568022e450"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "{{ dbt_eda_tools.get_row_count() }}", "transaction": true, "index": null}, {"sql": "{{ dbt_eda_tools.get_preview(20) }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "The 'missing_day' model is a SQL-based model that filters data from the 'data_generator' model. The model filters out specific date ranges for certain companies in specific countries. The filtered companies and countries include 'FB' in 'CA' between '2019-05-01' and '2019-05-17', 'GOOG' in 'FR' between '2020-01-01' and '2020-05-01', 'AAPL' in 'US' between '2021-12-15' and '2021-12-26', all companies and countries between '2022-05-01' and '2022-05-05', all companies in 'DE' between '2019-09-07' and '2019-09-09', and 'AMZN' on any date between '2019-09-07' and '2019-09-09'.", "columns": {"date_day": {"name": "date_day", "description": "", "meta": {}, "data_type": "date", "constraints": [], "quote": null, "tags": []}, "company_name": {"name": "company_name", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "country": {"name": "country", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "str_length": {"name": "str_length", "description": "", "meta": {}, "data_type": "number", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_eda_tools://examples\\1.intermediate\\get_missing_dates\\missing_day.yml", "build_path": null, "unrendered_config": {"post-hook": ["{{ dbt_eda_tools.get_row_count() }}", "{{ dbt_eda_tools.get_preview(20) }}"], "materialized": "view"}, "created_at": 1728209051.1583257, "relation_name": "\"dbt_db\".\"dbt_schema\".\"missing_day\"", "raw_code": "{# Create some fake missing dates at the granularity of the day #}\r\nWITH\r\nmissing_day AS (\r\n    SELECT *\r\n    FROM {{ ref('data_generator') }}\r\n    WHERE NOT (\r\n        {# filter some specific combinations #}\r\n        (company_name = 'FB' AND country = 'CA' AND date_day BETWEEN CAST('2019-05-01' AS DATE) AND CAST('2019-05-17' AS DATE)) OR\r\n        (company_name = 'GOOG' AND country = 'FR' AND date_day BETWEEN CAST('2020-01-01' AS DATE) AND CAST('2020-05-01' AS DATE)) OR\r\n        (company_name = 'AAPL' AND country = 'US' AND date_day BETWEEN CAST('2021-12-15' AS DATE) AND CAST('2021-12-26' AS DATE)) OR\r\n        {# filter out all days across companies and countries #}\r\n        (date_day  BETWEEN CAST('2022-05-01' AS DATE) AND CAST('2022-05-05' AS DATE)) OR\r\n        {# filter some specific combinations for country and date #}\r\n        (country = 'DE' AND date_day BETWEEN CAST('2019-09-07' AS DATE) AND CAST('2019-09-09' AS DATE)) OR\r\n        {# filter some specific combinations for company and date #}\r\n        (company_name = 'AMZN' AND date_day BETWEEN CAST('2019-09-07' AS DATE) AND CAST('2019-09-09' AS DATE))\r\n    )\r\n)\r\nSELECT * FROM missing_day", "language": "sql", "refs": [{"name": "data_generator", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_eda_tools.get_row_count", "macro.dbt_eda_tools.get_preview"], "nodes": ["model.dbt_eda_tools.data_generator"]}, "compiled_path": "target\\compiled\\dbt_eda_tools\\examples\\1.intermediate\\get_missing_dates\\missing_day.sql", "compiled": true, "compiled_code": "\nWITH\nmissing_day AS (\n    SELECT *\n    FROM \"dbt_db\".\"dbt_schema\".\"data_generator\"\n    WHERE NOT (\n        \n        (company_name = 'FB' AND country = 'CA' AND date_day BETWEEN CAST('2019-05-01' AS DATE) AND CAST('2019-05-17' AS DATE)) OR\n        (company_name = 'GOOG' AND country = 'FR' AND date_day BETWEEN CAST('2020-01-01' AS DATE) AND CAST('2020-05-01' AS DATE)) OR\n        (company_name = 'AAPL' AND country = 'US' AND date_day BETWEEN CAST('2021-12-15' AS DATE) AND CAST('2021-12-26' AS DATE)) OR\n        \n        (date_day  BETWEEN CAST('2022-05-01' AS DATE) AND CAST('2022-05-05' AS DATE)) OR\n        \n        (country = 'DE' AND date_day BETWEEN CAST('2019-09-07' AS DATE) AND CAST('2019-09-09' AS DATE)) OR\n        \n        (company_name = 'AMZN' AND date_day BETWEEN CAST('2019-09-07' AS DATE) AND CAST('2019-09-09' AS DATE))\n    )\n)\nSELECT * FROM missing_day", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_eda_tools.get_missing_dates_ex2": {"database": "dbt_db", "schema": "dbt_schema", "name": "get_missing_dates_ex2", "resource_type": "model", "package_name": "dbt_eda_tools", "path": "public\\get_missing_dates\\get_missing_dates_ex2.sql", "original_file_path": "examples\\public\\get_missing_dates\\get_missing_dates_ex2.sql", "unique_id": "model.dbt_eda_tools.get_missing_dates_ex2", "fqn": ["dbt_eda_tools", "public", "get_missing_dates", "get_missing_dates_ex2"], "alias": "get_missing_dates_ex2", "checksum": {"name": "sha256", "checksum": "0d3927bf9582605f96180b4f0ceff8082b46eb71c1e9e3b432a376e1896ec8f8"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "{{ dbt_eda_tools.get_row_count() }}", "transaction": true, "index": null}, {"sql": "{{ dbt_eda_tools.get_preview(20) }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"post-hook": ["{{ dbt_eda_tools.get_row_count() }}", "{{ dbt_eda_tools.get_preview(20) }}"], "materialized": "view"}, "created_at": 1728209050.2739208, "relation_name": "\"dbt_db\".\"dbt_schema\".\"get_missing_dates_ex2\"", "raw_code": "/**\r\n * Retrieves the missing dates in the date_month column of the missing_month model at the Monthly level granularity.\r\n *\r\n * @param {string} missing_day - The name of the model.\r\n * @param {string} date_day - The name of the column containing the dates.\r\n * @param {array} [dimensions] - An optional array of dimensions across which the missing dates are computed.\r\n * @param {object} [filters] - An optional filter object.\r\n * @param {string} [expected_frequency] - The interval to use when generating the missing dates (e.g. 'DAY', 'MONTH', 'YEAR').\r\n * @returns {rows} Rows of missing dates.\r\n */\r\n\r\n{{dbt_eda_tools.get_missing_date('missing_month','date_month', ['country'], {}, 'MONTH')}}", "language": "sql", "refs": [{"name": "missing_month", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_eda_tools.get_missing_date", "macro.dbt_eda_tools.get_row_count", "macro.dbt_eda_tools.get_preview"], "nodes": ["model.dbt_eda_tools.missing_month"]}, "compiled_path": "target\\compiled\\dbt_eda_tools\\examples\\public\\get_missing_dates\\get_missing_dates_ex2.sql", "compiled": true, "compiled_code": "/**\n * Retrieves the missing dates in the date_month column of the missing_month model at the Monthly level granularity.\n *\n * @param {string} missing_day - The name of the model.\n * @param {string} date_day - The name of the column containing the dates.\n * @param {array} [dimensions] - An optional array of dimensions across which the missing dates are computed.\n * @param {object} [filters] - An optional filter object.\n * @param {string} [expected_frequency] - The interval to use when generating the missing dates (e.g. 'DAY', 'MONTH', 'YEAR').\n * @returns {rows} Rows of missing dates.\n */\n\n\n  WITH\n  unique_dates AS (\n    SELECT\n      DISTINCT\n          date_month\n          \n              , (country) AS country\n          \n    FROM \"dbt_db\".\"dbt_schema\".\"missing_month\"\n    \n  )\n  , dates_lagged AS (\n    SELECT *\n    , LAG(date_month,1) OVER (\n          ORDER BY\n          \n              (country) DESC,\n          \n          date_month DESC) AS next_date_month\n    FROM unique_dates\n  )\n  SELECT\n      date_month\n      \n          , (country) AS country\n      \n      , next_date_month\n      , ABS(\n        (date_diff('MONTH', next_date_month::timestamp, date_month::timestamp ))\n    ) AS missing_month\n  FROM dates_lagged\n  WHERE \n        (date_diff('MONTH', next_date_month::timestamp, date_month::timestamp ))\n     < -1\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_eda_tools.missing_month": {"database": "dbt_db", "schema": "dbt_schema", "name": "missing_month", "resource_type": "model", "package_name": "dbt_eda_tools", "path": "1.intermediate\\get_missing_dates\\missing_month.sql", "original_file_path": "examples\\1.intermediate\\get_missing_dates\\missing_month.sql", "unique_id": "model.dbt_eda_tools.missing_month", "fqn": ["dbt_eda_tools", "1.intermediate", "get_missing_dates", "missing_month"], "alias": "missing_month", "checksum": {"name": "sha256", "checksum": "7749c90fad8614c2077130f4547269c1f81ec90672965368cd2f17c2d59cf0b2"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "{{ dbt_eda_tools.get_row_count() }}", "transaction": true, "index": null}, {"sql": "{{ dbt_eda_tools.get_preview(20) }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "The 'missing_month' model is designed to filter out specific data from the 'data_generator' model. It selects distinct company names, countries, and the month part of the date from the 'data_generator' table. The model then filters out data for specific companies in specific countries for specific date ranges. For example, it filters out data for the company 'FB' in the country 'CA' for the date range between '2019-05-01' and '2019-07-05'. It also filters out data for all companies for the date range between '2022-05-01' and '2022-08-05'. Additionally, it filters out data for all companies in the country 'DE' for the date range between '2019-09-07' and '2019-11-09'. Finally, it filters out data for the company 'AMZN' for the date range between '2019-01-07' and '2019-09-09'. The output of the model is the remaining data after these filters have been applied.", "columns": {"company_name": {"name": "company_name", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "country": {"name": "country", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "date_year": {"name": "date_year", "description": "", "meta": {}, "data_type": "date", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_eda_tools://examples\\1.intermediate\\get_missing_dates\\missing_month.yml", "build_path": null, "unrendered_config": {"post-hook": ["{{ dbt_eda_tools.get_row_count() }}", "{{ dbt_eda_tools.get_preview(20) }}"], "materialized": "view"}, "created_at": 1728209051.1603246, "relation_name": "\"dbt_db\".\"dbt_schema\".\"missing_month\"", "raw_code": "{# Create some fake missing dates at the granularity of the month #}\r\nWITH  raw_data AS (\r\n    SELECT\r\n        DISTINCT\r\n        company_name\r\n        , country\r\n        , CAST({{ date_trunc(\"month\", \"date_day\") }} AS Date) AS date_month\r\n    FROM {{ ref('data_generator') }}\r\n),\r\nmissing_month AS (\r\n    SELECT * FROM raw_data\r\n    WHERE NOT (\r\n        {# filter some specific combinations #}\r\n        (company_name = 'FB' AND country = 'CA' AND date_month BETWEEN CAST('2019-05-01' AS DATE) AND CAST('2019-07-05' AS DATE)) OR\r\n        (company_name = 'GOOG' AND country = 'FR' AND date_month BETWEEN CAST('2020-01-01' AS DATE) AND CAST('2020-05-01' AS DATE)) OR\r\n        (company_name = 'AAPL' AND country = 'US' AND date_month BETWEEN CAST('2021-05-15' AS DATE) AND CAST('2021-12-26' AS DATE)) OR\r\n        {# filter out all days across companies and countries #}\r\n        (date_month  BETWEEN CAST('2022-05-01' AS DATE) AND CAST('2022-08-05' AS DATE)) OR\r\n        {# filter some specific combinations for country and date #}\r\n        (country = 'DE' AND date_month BETWEEN CAST('2019-09-07' AS DATE) AND CAST('2019-11-09' AS DATE)) OR\r\n        {# filter some specific combinations for company and date #}\r\n        (company_name = 'AMZN' AND date_month BETWEEN CAST('2019-01-07' AS DATE) AND CAST('2019-09-09' AS DATE))\r\n    )\r\n)\r\nSELECT * FROM missing_month", "language": "sql", "refs": [{"name": "data_generator", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt_eda_tools.get_row_count", "macro.dbt_eda_tools.get_preview"], "nodes": ["model.dbt_eda_tools.data_generator"]}, "compiled_path": "target\\compiled\\dbt_eda_tools\\examples\\1.intermediate\\get_missing_dates\\missing_month.sql", "compiled": true, "compiled_code": "\nWITH  raw_data AS (\n    SELECT\n        DISTINCT\n        company_name\n        , country\n        , CAST(date_trunc('month', date_day) AS Date) AS date_month\n    FROM \"dbt_db\".\"dbt_schema\".\"data_generator\"\n),\nmissing_month AS (\n    SELECT * FROM raw_data\n    WHERE NOT (\n        \n        (company_name = 'FB' AND country = 'CA' AND date_month BETWEEN CAST('2019-05-01' AS DATE) AND CAST('2019-07-05' AS DATE)) OR\n        (company_name = 'GOOG' AND country = 'FR' AND date_month BETWEEN CAST('2020-01-01' AS DATE) AND CAST('2020-05-01' AS DATE)) OR\n        (company_name = 'AAPL' AND country = 'US' AND date_month BETWEEN CAST('2021-05-15' AS DATE) AND CAST('2021-12-26' AS DATE)) OR\n        \n        (date_month  BETWEEN CAST('2022-05-01' AS DATE) AND CAST('2022-08-05' AS DATE)) OR\n        \n        (country = 'DE' AND date_month BETWEEN CAST('2019-09-07' AS DATE) AND CAST('2019-11-09' AS DATE)) OR\n        \n        (company_name = 'AMZN' AND date_month BETWEEN CAST('2019-01-07' AS DATE) AND CAST('2019-09-09' AS DATE))\n    )\n)\nSELECT * FROM missing_month", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_eda_tools.missing_year": {"database": "dbt_db", "schema": "dbt_schema", "name": "missing_year", "resource_type": "model", "package_name": "dbt_eda_tools", "path": "1.intermediate\\get_missing_dates\\missing_year.sql", "original_file_path": "examples\\1.intermediate\\get_missing_dates\\missing_year.sql", "unique_id": "model.dbt_eda_tools.missing_year", "fqn": ["dbt_eda_tools", "1.intermediate", "get_missing_dates", "missing_year"], "alias": "missing_year", "checksum": {"name": "sha256", "checksum": "49da8eb1ab356137c4c5363ec9591622b155970ca614215e06897c3572b8c812"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "{{ dbt_eda_tools.get_row_count() }}", "transaction": true, "index": null}, {"sql": "{{ dbt_eda_tools.get_preview(20) }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "The 'missing_year' model is designed to filter out specific data from the 'data_generator' model. It selects distinct company names, countries, and years from the data. The model then filters out data based on specific conditions. These conditions include specific date ranges for certain companies in certain countries, as well as general date ranges. The filtered data is then selected for the final output.  ", "columns": {"company_name": {"name": "company_name", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "country": {"name": "country", "description": "", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "date_year": {"name": "date_year", "description": "", "meta": {}, "data_type": "date", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_eda_tools://examples\\1.intermediate\\get_missing_dates\\missing_year.yml", "build_path": null, "unrendered_config": {"post-hook": ["{{ dbt_eda_tools.get_row_count() }}", "{{ dbt_eda_tools.get_preview(20) }}"], "materialized": "view"}, "created_at": 1728209051.1648495, "relation_name": "\"dbt_db\".\"dbt_schema\".\"missing_year\"", "raw_code": "{# Create some fake missing dates at the granularity of the year #}\r\nWITH\r\nraw_data AS (\r\n    SELECT\r\n        DISTINCT\r\n        company_name\r\n        , country\r\n        , CAST({{ date_trunc(\"year\", \"date_day\") }} AS Date) AS date_year\r\n    FROM {{ ref('data_generator') }}\r\n)\r\n, missing_year AS (\r\n    SELECT * FROM raw_data\r\n    WHERE NOT (\r\n        {# filter some specific combinations #}\r\n        (company_name = 'FB' AND country = 'CA' AND date_year BETWEEN CAST('2019-05-01' AS DATE) AND CAST('2020-07-05' AS DATE)) OR\r\n        (company_name = 'GOOG' AND country = 'FR' AND date_year BETWEEN CAST('2020-01-01' AS DATE) AND CAST('2021-05-01' AS DATE)) OR\r\n        {# filter out all days across companies and countries #}\r\n        (date_year  BETWEEN CAST('2021-05-01' AS DATE) AND CAST('2022-08-05' AS DATE)) OR\r\n        {# filter some specific combinations for country and date #}\r\n        (country = 'DE' AND date_year BETWEEN CAST('2019-09-07' AS DATE) AND CAST('2020-11-09' AS DATE)) OR\r\n        {# filter some specific combinations for company and date #}\r\n        (company_name = 'AMZN' AND date_year BETWEEN CAST('2020-01-07' AS DATE) AND CAST('2021-09-09' AS DATE)) OR\r\n        (date_year BETWEEN CAST('2021-05-07' AS DATE) AND CAST('2022-09-09' AS DATE))\r\n    )\r\n)\r\nSELECT * FROM missing_year", "language": "sql", "refs": [{"name": "data_generator", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt_eda_tools.get_row_count", "macro.dbt_eda_tools.get_preview"], "nodes": ["model.dbt_eda_tools.data_generator"]}, "compiled_path": "target\\compiled\\dbt_eda_tools\\examples\\1.intermediate\\get_missing_dates\\missing_year.sql", "compiled": true, "compiled_code": "\nWITH\nraw_data AS (\n    SELECT\n        DISTINCT\n        company_name\n        , country\n        , CAST(date_trunc('year', date_day) AS Date) AS date_year\n    FROM \"dbt_db\".\"dbt_schema\".\"data_generator\"\n)\n, missing_year AS (\n    SELECT * FROM raw_data\n    WHERE NOT (\n        \n        (company_name = 'FB' AND country = 'CA' AND date_year BETWEEN CAST('2019-05-01' AS DATE) AND CAST('2020-07-05' AS DATE)) OR\n        (company_name = 'GOOG' AND country = 'FR' AND date_year BETWEEN CAST('2020-01-01' AS DATE) AND CAST('2021-05-01' AS DATE)) OR\n        \n        (date_year  BETWEEN CAST('2021-05-01' AS DATE) AND CAST('2022-08-05' AS DATE)) OR\n        \n        (country = 'DE' AND date_year BETWEEN CAST('2019-09-07' AS DATE) AND CAST('2020-11-09' AS DATE)) OR\n        \n        (company_name = 'AMZN' AND date_year BETWEEN CAST('2020-01-07' AS DATE) AND CAST('2021-09-09' AS DATE)) OR\n        (date_year BETWEEN CAST('2021-05-07' AS DATE) AND CAST('2022-09-09' AS DATE))\n    )\n)\nSELECT * FROM missing_year", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_eda_tools.data_generator": {"database": "dbt_db", "schema": "dbt_schema", "name": "data_generator", "resource_type": "model", "package_name": "dbt_eda_tools", "path": "0.staging\\data_generator.sql", "original_file_path": "examples\\0.staging\\data_generator.sql", "unique_id": "model.dbt_eda_tools.data_generator", "fqn": ["dbt_eda_tools", "0.staging", "data_generator"], "alias": "data_generator", "checksum": {"name": "sha256", "checksum": "18fb2af956903adb4c15c49a619e22347a5537df91fdf36f4f43eaa855b8f221"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "{{ dbt_eda_tools.get_row_count() }}", "transaction": true, "index": null}, {"sql": "{{ dbt_eda_tools.get_preview(20) }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Generates dates between 2019 and 2025 and cross joins it with companies and countries to create a test dataset", "columns": {"date_day": {"name": "date_day", "description": "This column represents the date for each record. The dates are generated starting from '2019-01-01' and ending at '2025-01-01'.  ", "meta": {}, "data_type": "date", "constraints": [], "quote": null, "tags": []}, "company_name": {"name": "company_name", "description": "This column represents the name of the company. The company names are hardcoded in the SQL and include 'MSFT', 'GOG', 'AMZN', 'A', and 'FB'.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "country": {"name": "country", "description": "This column represents the country code. The country codes are hardcoded in the SQL and include 'FR', 'DE', 'GB', 'US', and 'CA'.", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "str_length": {"name": "str_length", "description": "This column represents the sum of the lengths of the 'company_name' and 'country' columns. It is calculated by adding the number of characters in the 'company_name' column to the number of characters in the 'country' column.", "meta": {}, "data_type": "number", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_eda_tools://examples\\0.staging\\schema.yml", "build_path": null, "unrendered_config": {"post-hook": ["{{ dbt_eda_tools.get_row_count() }}", "{{ dbt_eda_tools.get_preview(20) }}"], "materialized": "view"}, "created_at": 1728209051.1563268, "relation_name": "\"dbt_db\".\"dbt_schema\".\"data_generator\"", "raw_code": "WITH date_gen AS (\r\n    {{ dbt_utils.date_spine(\r\n        datepart=\"day\",\r\n        start_date=\"cast('2019-01-01' as date)\",\r\n        end_date=\"cast('2025-01-01' as date)\"\r\n   )\r\n}}\r\n),\r\ncompany_gen AS (\r\n     SELECT 'MSFT' AS company_name\r\n     UNION ALL\r\n     SELECT 'GOG' AS company_name\r\n     UNION ALL\r\n     SELECT 'AMZN' AS company_name\r\n     UNION ALL\r\n     SELECT 'A' AS company_name\r\n     UNION ALL\r\n     SELECT 'FB' AS company_name\r\n),\r\ncountry_gen AS (\r\n    SELECT 'FR' AS country\r\n    UNION ALL\r\n    SELECT 'DE' AS country\r\n    UNION ALL\r\n    SELECT 'GB' AS country\r\n    UNION ALL\r\n    SELECT 'US' AS country\r\n    UNION all\r\n    SELECT 'CA' AS country\r\n)\r\n{# Generate all combos of date, company, and countrys between 2019-01-01 and 2025-01-01 #}\r\nSELECT *, LENGTH(company_name)+LENGTH(country) AS str_length\r\nFROM date_gen, company_gen, country_gen", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.date_spine", "macro.dbt_eda_tools.get_row_count", "macro.dbt_eda_tools.get_preview"], "nodes": []}, "compiled_path": "target\\compiled\\dbt_eda_tools\\examples\\0.staging\\data_generator.sql", "compiled": true, "compiled_code": "WITH date_gen AS (\n    \n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n     + \n    \n    p7.generated_number * power(2, 7)\n     + \n    \n    p8.generated_number * power(2, 8)\n     + \n    \n    p9.generated_number * power(2, 9)\n     + \n    \n    p10.generated_number * power(2, 10)\n     + \n    \n    p11.generated_number * power(2, 11)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n     cross join \n    \n    p as p11\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 2192\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n    date_add(cast('2019-01-01' as date), interval (row_number() over (order by 1) - 1) day)\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= cast('2025-01-01' as date)\n\n)\n\nselect * from filtered\n\n\n),\ncompany_gen AS (\n     SELECT 'MSFT' AS company_name\n     UNION ALL\n     SELECT 'GOG' AS company_name\n     UNION ALL\n     SELECT 'AMZN' AS company_name\n     UNION ALL\n     SELECT 'A' AS company_name\n     UNION ALL\n     SELECT 'FB' AS company_name\n),\ncountry_gen AS (\n    SELECT 'FR' AS country\n    UNION ALL\n    SELECT 'DE' AS country\n    UNION ALL\n    SELECT 'GB' AS country\n    UNION ALL\n    SELECT 'US' AS country\n    UNION all\n    SELECT 'CA' AS country\n)\n\nSELECT *, LENGTH(company_name)+LENGTH(country) AS str_length\nFROM date_gen, company_gen, country_gen", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "test.dbt_eda_tools.assert_percent_of_total_level": {"database": "dbt_db", "schema": "dbt_schema_dbt_test__audit", "name": "assert_percent_of_total_level", "resource_type": "test", "package_name": "dbt_eda_tools", "path": "percent_of_total\\assert_percent_of_total_level.sql", "original_file_path": "tests\\percent_of_total\\assert_percent_of_total_level.sql", "unique_id": "test.dbt_eda_tools.assert_percent_of_total_level", "fqn": ["dbt_eda_tools", "percent_of_total", "assert_percent_of_total_level"], "alias": "assert_percent_of_total_level", "checksum": {"name": "sha256", "checksum": "868a6a361d1c9f241cc108320fce034a013247160031cecfa0718a218c7ef2f2"}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"enabled": true}, "created_at": 1728209050.5449328, "relation_name": null, "raw_code": "WITH\r\npercent_of_total AS (\r\n    SELECT\r\n        company_name\r\n        , country\r\n        , {{dbt_eda_tools.percent_of_total('str_length',precision=3)}} AS count_percent\r\n        , {{dbt_eda_tools.percent_of_total('str_length',precision=3, level=['company_name'])}} AS count_percent_level\r\n\r\n    FROM {{ ref('data_aggregated') }}\r\n    GROUP BY 1,2\r\n    ORDER BY company_name, country, sum(str_length)  DESC\r\n)\r\nSELECT * FROM percent_of_total\r\nWHERE\r\n    1=1\r\n    -- aggregated percent at level is always greater than percent of entire column\r\n    AND\r\n    (\r\n        count_percent_level < count_percent\r\n    -- MSFT has 3 countries, so each should be 1/3 of the total\r\n    OR (company_name = 'MSFT' AND count_percent_level <> .333)\r\n    -- AMZN & FB are unfiltered and have 5 countries, so each should be 1/5 of the total\r\n    OR (company_name IN ('AMZN','FB') AND count_percent_level <> .2)\r\n    -- Each with 4 countries, so each should be 1/4 of the total\r\n    OR (company_name IN ('GOG','A') AND count_percent_level <> .25)\r\n    )", "language": "sql", "refs": [{"name": "data_aggregated", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_eda_tools.percent_of_total"], "nodes": ["model.dbt_eda_tools.data_aggregated"]}, "compiled_path": "target\\compiled\\dbt_eda_tools\\tests\\percent_of_total\\assert_percent_of_total_level.sql", "compiled": true, "compiled_code": "WITH\npercent_of_total AS (\n    SELECT\n        company_name\n        , country\n        , \n\n  \n\n  \n\n      ROUND(\n        \n          \n            IF(SUM(COUNT(str_length)) OVER () !=0\n              , COUNT(str_length)\n              /\n              SUM(COUNT(str_length)) OVER ()\n              , NULL\n            )\n          \n        \n      , 3)\n\n AS count_percent\n        , \n\n  \n\n  \n    \n  \n\n      ROUND(\n        \n          \n            IF(SUM(COUNT(str_length)) OVER (PARTITION BY company_name) !=0\n              , COUNT(str_length)\n              /\n              SUM(COUNT(str_length)) OVER (PARTITION BY company_name)\n              , NULL\n            )\n          \n        \n      , 3)\n\n AS count_percent_level\n\n    FROM \"dbt_db\".\"dbt_schema\".\"data_aggregated\"\n    GROUP BY 1,2\n    ORDER BY company_name, country, sum(str_length)  DESC\n)\nSELECT * FROM percent_of_total\nWHERE\n    1=1\n    -- aggregated percent at level is always greater than percent of entire column\n    AND\n    (\n        count_percent_level < count_percent\n    -- MSFT has 3 countries, so each should be 1/3 of the total\n    OR (company_name = 'MSFT' AND count_percent_level <> .333)\n    -- AMZN & FB are unfiltered and have 5 countries, so each should be 1/5 of the total\n    OR (company_name IN ('AMZN','FB') AND count_percent_level <> .2)\n    -- Each with 4 countries, so each should be 1/4 of the total\n    OR (company_name IN ('GOG','A') AND count_percent_level <> .25)\n    )", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "test.dbt_eda_tools.assert_percent_of_total_rounding": {"database": "dbt_db", "schema": "dbt_schema_dbt_test__audit", "name": "assert_percent_of_total_rounding", "resource_type": "test", "package_name": "dbt_eda_tools", "path": "percent_of_total\\assert_percent_of_total_rounding.sql", "original_file_path": "tests\\percent_of_total\\assert_percent_of_total_rounding.sql", "unique_id": "test.dbt_eda_tools.assert_percent_of_total_rounding", "fqn": ["dbt_eda_tools", "percent_of_total", "assert_percent_of_total_rounding"], "alias": "assert_percent_of_total_rounding", "checksum": {"name": "sha256", "checksum": "65c46d9ea97c19307cebb8c2938d4027202b4ab2396b6eb24cb02176a3ec2b2e"}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"enabled": true}, "created_at": 1728209050.5786006, "relation_name": null, "raw_code": "WITH\r\npercent_of_total AS (\r\n    SELECT\r\n    country\r\n    -- rounding defaults to 2 if unspecified\r\n    , {{dbt_eda_tools.percent_of_total('str_length','sum')}} AS sum_percent\r\n    , {{dbt_eda_tools.percent_of_total('str_length','sum',2)}} AS sum_percent_3\r\n\r\nFROM {{ ref('data_aggregated') }}\r\nGROUP BY 1\r\n)\r\nSELECT * FROM percent_of_total\r\nWHERE\r\n    country = 'GB'\r\n    AND sum_percent <> 0.2\r\n    AND sum_percent <> 0.24", "language": "sql", "refs": [{"name": "data_aggregated", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_eda_tools.percent_of_total"], "nodes": ["model.dbt_eda_tools.data_aggregated"]}, "compiled_path": "target\\compiled\\dbt_eda_tools\\tests\\percent_of_total\\assert_percent_of_total_rounding.sql", "compiled": true, "compiled_code": "WITH\npercent_of_total AS (\n    SELECT\n    country\n    -- rounding defaults to 2 if unspecified\n    , \n\n  \n\n  \n\n      ROUND(\n        \n          \n            IF(SUM(sum(str_length)) OVER () !=0\n              , sum(str_length)\n              /\n              SUM(sum(str_length)) OVER ()\n              , NULL\n            )\n          \n        \n      , 2)\n\n AS sum_percent\n    , \n\n  \n\n  \n\n      ROUND(\n        \n          \n            IF(SUM(sum(str_length)) OVER () !=0\n              , sum(str_length)\n              /\n              SUM(sum(str_length)) OVER ()\n              , NULL\n            )\n          \n        \n      , 2)\n\n AS sum_percent_3\n\nFROM \"dbt_db\".\"dbt_schema\".\"data_aggregated\"\nGROUP BY 1\n)\nSELECT * FROM percent_of_total\nWHERE\n    country = 'GB'\n    AND sum_percent <> 0.2\n    AND sum_percent <> 0.24", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "test.dbt_eda_tools.assert_data_describe_column_details_estimated_granularity_yearly": {"database": "dbt_db", "schema": "dbt_schema_dbt_test__audit", "name": "assert_data_describe_column_details_estimated_granularity_yearly", "resource_type": "test", "package_name": "dbt_eda_tools", "path": "describe\\assert_data_describe_column_details_estimated_granularity_yearly.sql", "original_file_path": "tests\\describe\\assert_data_describe_column_details_estimated_granularity_yearly.sql", "unique_id": "test.dbt_eda_tools.assert_data_describe_column_details_estimated_granularity_yearly", "fqn": ["dbt_eda_tools", "describe", "assert_data_describe_column_details_estimated_granularity_yearly"], "alias": "assert_data_describe_column_details_estimated_granularity_yearly", "checksum": {"name": "sha256", "checksum": "1271c09a9f515874d229ad25cee15fc7bdb48f3e0244dfa2e2cc5a4051741f49"}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"enabled": true}, "created_at": 1728209050.6107357, "relation_name": null, "raw_code": "WITH\r\ndescribe_dataframe AS (\r\n    {{dbt_eda_tools.describe('data_aggregated_yearly_granularity')}}\r\n)\r\nSELECT * FROM describe_dataframe\r\nWHERE\r\n    identifier = 'column'\r\n    AND\r\n    (\r\n        (\r\n            LOWER(meta_data_value) = 'date'\r\n\r\n            AND (\r\n\r\n                detail IS NULL\r\n\r\n                OR (\r\n                    meta_data_key = 'DATE_MIXED_GRANULARITY' AND (\r\n                    CAST(detail->>'column_name' AS STRING) <> 'DATE_MIXED_GRANULARITY'\r\n                    OR CAST(detail->>'estimated_granularity' AS STRING)  <> '\"Yearly\"'\r\n                    OR CAST(detail->>'estimated_granularity_confidence' AS INTEGER) <> 1\r\n                    OR CAST(detail->>'count' AS INTEGER) <> 4\r\n                    OR CAST(detail->>'count_null' AS INTEGER) <> 0\r\n                    OR CAST(detail->>'min' AS DATE) <> CAST('2019-01-01' AS DATE)\r\n                    OR CAST(detail->>'max' AS DATE)<> CAST('2022-01-01' AS DATE)\r\n                    )\r\n                )\r\n            )\r\n        )\r\n    )", "language": "sql", "refs": [{"name": "data_aggregated_yearly_granularity", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_eda_tools.describe"], "nodes": ["model.dbt_eda_tools.data_aggregated_yearly_granularity"]}, "compiled_path": "target\\compiled\\dbt_eda_tools\\tests\\describe\\assert_data_describe_column_details_estimated_granularity_yearly.sql", "compiled": true, "compiled_code": "WITH\ndescribe_dataframe AS (\n    \n\n    \n\n    \n    \n    \n    \n\n    \n\n    WITH\n    \n    dummy AS (SELECT 1)\n    \n        , \n    \n    \n    meta_data AS (\n        -- Need to explicitly cast the type before transposing the data\n        SELECT\n        column_name\n        , data_type\n        , COUNT(*) OVER ():: STRING AS nbr_of_columns\n        , CASE\n                \n                    \n                        WHEN DATA_TYPE IN ('VARCHAR', 'CHAR', 'CHARACTER', 'STRING', 'TEXT') THEN 'text'\n                    \n                \n                    \n                        WHEN DATA_TYPE IN ('DATE', 'DATETIME', 'TIMESTAMP', 'TIMESTAMP_LTZ', 'TIMESTAMP_NTZ', 'TIMESTAMP_TZ') THEN 'date'\n                    \n                \n                    \n                        WHEN DATA_TYPE IN ('NUMBER', 'DECIMAL', 'NUMERIC', 'INT', 'INTEGER', 'BIGINT', 'SMALLINT', 'FLOAT', 'FLOAT4', 'FLOAT8', 'DOUBLE', 'DOUBLE PRECISION', 'REAL', 'INT64', 'TINYINT', 'BYETEINT', 'BIGDECIMAL', 'FLOAT64') THEN 'numeric'\n                    \n                \n                    \n                        WHEN DATA_TYPE IN ('BOOLEAN', 'BOOL') THEN 'boolean'\n                    \n                \n                    \n                        WHEN DATA_TYPE IN ('TIME', 'NEEDSTOBEARRAY') THEN 'time'\n                    \n                \n                    \n                \n                    \n                \n                    \n                \n                    \n                \n        END AS data_type_input\n\n        \n            \n                \n                    , COUNT(CASE WHEN DATA_TYPE IN ('VARCHAR', 'CHAR', 'CHARACTER', 'STRING', 'TEXT') THEN 1 END) OVER ():: STRING AS nbr_of_text_columns\n                \n            \n        \n            \n                \n                    , COUNT(CASE WHEN DATA_TYPE IN ('DATE', 'DATETIME', 'TIMESTAMP', 'TIMESTAMP_LTZ', 'TIMESTAMP_NTZ', 'TIMESTAMP_TZ') THEN 1 END) OVER ():: STRING AS nbr_of_date_columns\n                \n            \n        \n            \n                \n                    , COUNT(CASE WHEN DATA_TYPE IN ('NUMBER', 'DECIMAL', 'NUMERIC', 'INT', 'INTEGER', 'BIGINT', 'SMALLINT', 'FLOAT', 'FLOAT4', 'FLOAT8', 'DOUBLE', 'DOUBLE PRECISION', 'REAL', 'INT64', 'TINYINT', 'BYETEINT', 'BIGDECIMAL', 'FLOAT64') THEN 1 END) OVER ():: STRING AS nbr_of_numeric_columns\n                \n            \n        \n            \n                \n                    , COUNT(CASE WHEN DATA_TYPE IN ('BOOLEAN', 'BOOL') THEN 1 END) OVER ():: STRING AS nbr_of_boolean_columns\n                \n            \n        \n            \n                \n                    , COUNT(CASE WHEN DATA_TYPE IN ('TIME', 'NEEDSTOBEARRAY') THEN 1 END) OVER ():: STRING AS nbr_of_time_columns\n                \n            \n        \n            \n        \n            \n        \n            \n        \n            \n        \n\n        FROM INFORMATION_SCHEMA.TABLES t\n        INNER JOIN INFORMATION_SCHEMA.COLUMNS c ON\n                c.table_schema = t.table_schema AND c.table_name = t.table_name\n                WHERE t.table_name = 'data_aggregated_yearly_granularity'\n    )\n\n\n        \n        , \n\n    \n\n        meta_data_unique AS (\n            SELECT\n                    DISTINCT\n                    'dataset' AS identifier\n                    , '' AS detail\n                    , nbr_of_columns\n                    , nbr_of_text_columns\n                    , nbr_of_date_columns\n                    , nbr_of_numeric_columns\n                    , nbr_of_boolean_columns\n                    , nbr_of_time_columns\n                FROM meta_data\n        )\n        , dataset_info AS (\n            SELECT\n                    CASE LOWER(meta_data_key)\n                            WHEN 'nbr_of_columns' THEN 1\n                            WHEN 'nbr_of_text_columns' THEN 2\n                            WHEN 'nbr_of_date_columns' THEN 3\n                            WHEN 'nbr_of_numeric_columns' THEN 4\n                            WHEN 'nbr_of_boolean_columns' THEN 5\n                            WHEN 'nbr_of_time_columns' THEN 6\n                    END AS index_pos\n                    , meta_data_key\n                    , identifier\n                    , detail\n                    , CAST(meta_data_value AS STRING) AS meta_data_value\n                FROM meta_data_unique\n                UNPIVOT (meta_data_value FOR meta_data_key IN (nbr_of_columns, nbr_of_text_columns, nbr_of_date_columns, nbr_of_numeric_columns,nbr_of_boolean_columns,nbr_of_time_columns))\n        )\n\n    \n\n\n        \n        , \n\n    \n        rowcount_info AS (\n            SELECT\n                    0 AS index_pos\n                    , ('nbr_of_rows') AS meta_data_key\n                    , 'dataset' AS identifier\n                    , '' AS detail\n                    , CAST(COUNT(*) AS STRING) AS meta_data_value\n            FROM \"dbt_db\".\"dbt_schema\".\"data_aggregated_yearly_granularity\"\n            GROUP BY ALL\n        )\n    \n\n\n        \n        , \n\n    \n        column_info AS (\n            SELECT\n                20 + ROW_NUMBER() OVER (ORDER BY data_type) AS index_pos\n                , column_name AS meta_data_key\n                , 'column' AS identifier\n                , '' AS detail\n                , CAST(data_type AS STRING) AS meta_data_value\n            FROM meta_data\n        )\n    \n\n\n        \n        , \n    \n    assembled_result AS (\n        \n            SELECT\n                \n                     index_pos\n                \n                    , meta_data_key\n                \n                    , meta_data_value\n                \n                    , identifier\n                \n                    , detail\n                \n            FROM\n            dataset_info\n            UNION ALL\n        \n            SELECT\n                \n                     index_pos\n                \n                    , meta_data_key\n                \n                    , meta_data_value\n                \n                    , identifier\n                \n                    , detail\n                \n            FROM\n            rowcount_info\n            UNION ALL\n        \n            SELECT\n                \n                     index_pos\n                \n                    , meta_data_key\n                \n                    , meta_data_value\n                \n                    , identifier\n                \n                    , detail\n                \n            FROM\n            column_info\n            \n        \n    )\n\n\n    \n    \n        , \n\n    \n    \n\n    \n    \n    \n\n    \n    \n    \n        column_detail_info_numeric AS (\n            SELECT\n                '' AS column_name\n                , TO_JSON(NULL) AS detail\n        )\n    \n\n\n    \n        , \n\n    \n    \n\n    \n    \n    \n\n    \n    \n    \n        \n        \n\n            \n\n\n            column_detail_country AS (\n                SELECT\n                    1\n                    \n                        , country\n                        , COUNT(*) AS cnt\n                    \n\n\n                    , SUM(COUNT(country)) OVER () AS cnt_total\n                    , SUM(COUNT(DISTINCT country)) OVER () AS cnt_unique\n                    , COUNT_IF(country IS NULL) AS cnt_null\n\n                FROM \"dbt_db\".\"dbt_schema\".\"data_aggregated_yearly_granularity\"\n\n                GROUP BY ALL\n\n                \n                    ORDER by cnt_null DESC, cnt DESC\n                    LIMIT 10\n                \n\n            ) ,\n        \n\n            \n\n\n            column_detail_company_name AS (\n                SELECT\n                    1\n                    \n                        , company_name\n                        , COUNT(*) AS cnt\n                    \n\n\n                    , SUM(COUNT(company_name)) OVER () AS cnt_total\n                    , SUM(COUNT(DISTINCT company_name)) OVER () AS cnt_unique\n                    , COUNT_IF(company_name IS NULL) AS cnt_null\n\n                FROM \"dbt_db\".\"dbt_schema\".\"data_aggregated_yearly_granularity\"\n\n                GROUP BY ALL\n\n                \n                    ORDER by cnt_null DESC, cnt DESC\n                    LIMIT 10\n                \n\n            ) \n        \n\n        \n        , column_detail_info_text AS (\n            \n            \n            SELECT\n                'country' AS column_name\n                , JSON_OBJECT(\n                    'column_name', 'country'\n                    , 'count' , MIN(cnt_total)\n                    , 'count_null' , MAX(cnt_null) -- needs to be max not min otherwise always zero\n                    \n                        \n                            , 'unique_values' , MIN(cnt_unique)\n                        \n                        , 'value_counts_top10',\n                            ARRAY_AGG\n                                (JSON_OBJECT(\n                                    CAST(COALESCE(country,'NULL') AS STRING)\n                                , cnt)\n                                )\n                    \n                ) AS detail\n            FROM column_detail_country\n            UNION ALL\n        \n            \n            SELECT\n                'company_name' AS column_name\n                , JSON_OBJECT(\n                    'column_name', 'company_name'\n                    , 'count' , MIN(cnt_total)\n                    , 'count_null' , MAX(cnt_null) -- needs to be max not min otherwise always zero\n                    \n                        \n                            , 'unique_values' , MIN(cnt_unique)\n                        \n                        , 'value_counts_top10',\n                            ARRAY_AGG\n                                (JSON_OBJECT(\n                                    CAST(COALESCE(company_name,'NULL') AS STRING)\n                                , cnt)\n                                )\n                    \n                ) AS detail\n            FROM column_detail_company_name\n            \n        \n\n        )\n    \n\n\n    \n        , \n\n    \n    \n\n    \n    \n    \n\n    \n    \n    \n        \n        \n\n            \n                \n            \n\n\n            column_detail_date_mixed_granularity AS (\n                SELECT\n                    1\n                    \n                            , MIN(date_mixed_granularity) AS min\n                            , MAX(date_mixed_granularity) AS max\n                            \n                                , MIN('Yearly') AS estimated_granularity\n                                , MIN(1.0) AS estimated_granularity_confidence\n                            \n                    \n\n\n                    , SUM(COUNT(date_mixed_granularity)) OVER () AS cnt_total\n                    , SUM(COUNT(DISTINCT date_mixed_granularity)) OVER () AS cnt_unique\n                    , COUNT_IF(date_mixed_granularity IS NULL) AS cnt_null\n\n                FROM \"dbt_db\".\"dbt_schema\".\"data_aggregated_yearly_granularity\"\n\n                GROUP BY ALL\n\n                \n\n            ) \n        \n\n        \n        , column_detail_info_date AS (\n            \n            \n            SELECT\n                'date_mixed_granularity' AS column_name\n                , JSON_OBJECT(\n                    'column_name', 'date_mixed_granularity'\n                    , 'count' , MIN(cnt_total)\n                    , 'count_null' , MAX(cnt_null) -- needs to be max not min otherwise always zero\n                    \n                        , 'min' , MIN(min)\n                        , 'max' , MIN(max)\n                        \n                            , 'estimated_granularity' , MIN(estimated_granularity)\n                            , 'estimated_granularity_confidence' , MIN(estimated_granularity_confidence)\n                        \n                    \n                ) AS detail\n            FROM column_detail_date_mixed_granularity\n            \n        \n\n        )\n    \n\n\n    \n        , \n\n    \n    \n\n    \n    \n    \n\n    \n    \n    \n        column_detail_info_boolean AS (\n            SELECT\n                '' AS column_name\n                , TO_JSON(NULL) AS detail\n        )\n    \n\n\n    \n\n    \n        \n\n\n\n\n\n    SELECT\n        assembed_result.meta_data_key\n        , assembed_result.meta_data_value\n        , assembed_result.identifier\n        , COALESCE(text_detail.detail, numeric_detail.detail,date_detail.detail, boolean_detail.detail) AS detail\n    FROM assembled_result AS assembed_result\n    LEFT JOIN column_detail_info_text AS text_detail\n    ON assembed_result.meta_data_key = text_detail.column_name\n    LEFT JOIN column_detail_info_numeric AS numeric_detail\n    ON assembed_result.meta_data_key = numeric_detail.column_name\n    LEFT JOIN column_detail_info_date AS date_detail\n    ON assembed_result.meta_data_key = date_detail.column_name\n    LEFT JOIN column_detail_info_boolean AS boolean_detail\n    ON assembed_result.meta_data_key = boolean_detail.column_name\n\n    ORDER BY index_pos ASC\n\n\n    \n\n\n)\nSELECT * FROM describe_dataframe\nWHERE\n    identifier = 'column'\n    AND\n    (\n        (\n            LOWER(meta_data_value) = 'date'\n\n            AND (\n\n                detail IS NULL\n\n                OR (\n                    meta_data_key = 'DATE_MIXED_GRANULARITY' AND (\n                    CAST(detail->>'column_name' AS STRING) <> 'DATE_MIXED_GRANULARITY'\n                    OR CAST(detail->>'estimated_granularity' AS STRING)  <> '\"Yearly\"'\n                    OR CAST(detail->>'estimated_granularity_confidence' AS INTEGER) <> 1\n                    OR CAST(detail->>'count' AS INTEGER) <> 4\n                    OR CAST(detail->>'count_null' AS INTEGER) <> 0\n                    OR CAST(detail->>'min' AS DATE) <> CAST('2019-01-01' AS DATE)\n                    OR CAST(detail->>'max' AS DATE)<> CAST('2022-01-01' AS DATE)\n                    )\n                )\n            )\n        )\n    )", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "test.dbt_eda_tools.assert_data_describe_column_details_estimated_granularity": {"database": "dbt_db", "schema": "dbt_schema_dbt_test__audit", "name": "assert_data_describe_column_details_estimated_granularity", "resource_type": "test", "package_name": "dbt_eda_tools", "path": "describe\\assert_data_describe_column_details_estimated_granularity.sql", "original_file_path": "tests\\describe\\assert_data_describe_column_details_estimated_granularity.sql", "unique_id": "test.dbt_eda_tools.assert_data_describe_column_details_estimated_granularity", "fqn": ["dbt_eda_tools", "describe", "assert_data_describe_column_details_estimated_granularity"], "alias": "assert_data_describe_column_details_estimated_granularity", "checksum": {"name": "sha256", "checksum": "9474a7c7d4b1cb4ecf45fdc76531f3c531d121a821dbe80a2b57240da55f9545"}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"enabled": true}, "created_at": 1728209050.639117, "relation_name": null, "raw_code": "WITH\r\ndescribe_dataframe AS (\r\n    {{dbt_eda_tools.describe('data_aggregated_mixed_granularity')}}\r\n)\r\nSELECT * FROM describe_dataframe\r\nWHERE\r\n    identifier = 'column'\r\n    AND\r\n    (\r\n        (\r\n            LOWER(meta_data_value) = 'date'\r\n\r\n            AND (\r\n\r\n                detail IS NULL\r\n\r\n                OR (\r\n                    meta_data_key = 'DATE_MIXED_GRANULARITY' AND (\r\n                    CAST(detail->>'column_name' AS STRING) <> 'DATE_MIXED_GRANULARITY'\r\n                    OR CAST(detail->>'estimated_granularity' AS STRING) <> 'Monthly'\r\n                    OR CAST(detail->>'estimated_granularity_confidence' AS FLOAT) <> 0.8\r\n                    OR CAST(detail->>'count' AS INTEGER) <> 16\r\n                    OR CAST(detail->>'count_null' AS INTEGER) <> 1\r\n                    OR CAST(detail->>'min' AS DATE) <> CAST('2019-01-01' AS DATE)\r\n                    OR CAST(detail->>'max' AS DATE) <> CAST('2023-01-01' AS DATE)\r\n                    )\r\n                )\r\n            )\r\n        )\r\n    )", "language": "sql", "refs": [{"name": "data_aggregated_mixed_granularity", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_eda_tools.describe"], "nodes": ["model.dbt_eda_tools.data_aggregated_mixed_granularity"]}, "compiled_path": "target\\compiled\\dbt_eda_tools\\tests\\describe\\assert_data_describe_column_details_estimated_granularity.sql", "compiled": true, "compiled_code": "WITH\ndescribe_dataframe AS (\n    \n\n    \n\n    \n    \n    \n    \n\n    \n\n    WITH\n    \n    dummy AS (SELECT 1)\n    \n        , \n    \n    \n    meta_data AS (\n        -- Need to explicitly cast the type before transposing the data\n        SELECT\n        column_name\n        , data_type\n        , COUNT(*) OVER ():: STRING AS nbr_of_columns\n        , CASE\n                \n                    \n                        WHEN DATA_TYPE IN ('VARCHAR', 'CHAR', 'CHARACTER', 'STRING', 'TEXT') THEN 'text'\n                    \n                \n                    \n                        WHEN DATA_TYPE IN ('DATE', 'DATETIME', 'TIMESTAMP', 'TIMESTAMP_LTZ', 'TIMESTAMP_NTZ', 'TIMESTAMP_TZ') THEN 'date'\n                    \n                \n                    \n                        WHEN DATA_TYPE IN ('NUMBER', 'DECIMAL', 'NUMERIC', 'INT', 'INTEGER', 'BIGINT', 'SMALLINT', 'FLOAT', 'FLOAT4', 'FLOAT8', 'DOUBLE', 'DOUBLE PRECISION', 'REAL', 'INT64', 'TINYINT', 'BYETEINT', 'BIGDECIMAL', 'FLOAT64') THEN 'numeric'\n                    \n                \n                    \n                        WHEN DATA_TYPE IN ('BOOLEAN', 'BOOL') THEN 'boolean'\n                    \n                \n                    \n                        WHEN DATA_TYPE IN ('TIME', 'NEEDSTOBEARRAY') THEN 'time'\n                    \n                \n                    \n                \n                    \n                \n                    \n                \n                    \n                \n        END AS data_type_input\n\n        \n            \n                \n                    , COUNT(CASE WHEN DATA_TYPE IN ('VARCHAR', 'CHAR', 'CHARACTER', 'STRING', 'TEXT') THEN 1 END) OVER ():: STRING AS nbr_of_text_columns\n                \n            \n        \n            \n                \n                    , COUNT(CASE WHEN DATA_TYPE IN ('DATE', 'DATETIME', 'TIMESTAMP', 'TIMESTAMP_LTZ', 'TIMESTAMP_NTZ', 'TIMESTAMP_TZ') THEN 1 END) OVER ():: STRING AS nbr_of_date_columns\n                \n            \n        \n            \n                \n                    , COUNT(CASE WHEN DATA_TYPE IN ('NUMBER', 'DECIMAL', 'NUMERIC', 'INT', 'INTEGER', 'BIGINT', 'SMALLINT', 'FLOAT', 'FLOAT4', 'FLOAT8', 'DOUBLE', 'DOUBLE PRECISION', 'REAL', 'INT64', 'TINYINT', 'BYETEINT', 'BIGDECIMAL', 'FLOAT64') THEN 1 END) OVER ():: STRING AS nbr_of_numeric_columns\n                \n            \n        \n            \n                \n                    , COUNT(CASE WHEN DATA_TYPE IN ('BOOLEAN', 'BOOL') THEN 1 END) OVER ():: STRING AS nbr_of_boolean_columns\n                \n            \n        \n            \n                \n                    , COUNT(CASE WHEN DATA_TYPE IN ('TIME', 'NEEDSTOBEARRAY') THEN 1 END) OVER ():: STRING AS nbr_of_time_columns\n                \n            \n        \n            \n        \n            \n        \n            \n        \n            \n        \n\n        FROM INFORMATION_SCHEMA.TABLES t\n        INNER JOIN INFORMATION_SCHEMA.COLUMNS c ON\n                c.table_schema = t.table_schema AND c.table_name = t.table_name\n                WHERE t.table_name = 'data_aggregated_mixed_granularity'\n    )\n\n\n        \n        , \n\n    \n\n        meta_data_unique AS (\n            SELECT\n                    DISTINCT\n                    'dataset' AS identifier\n                    , '' AS detail\n                    , nbr_of_columns\n                    , nbr_of_text_columns\n                    , nbr_of_date_columns\n                    , nbr_of_numeric_columns\n                    , nbr_of_boolean_columns\n                    , nbr_of_time_columns\n                FROM meta_data\n        )\n        , dataset_info AS (\n            SELECT\n                    CASE LOWER(meta_data_key)\n                            WHEN 'nbr_of_columns' THEN 1\n                            WHEN 'nbr_of_text_columns' THEN 2\n                            WHEN 'nbr_of_date_columns' THEN 3\n                            WHEN 'nbr_of_numeric_columns' THEN 4\n                            WHEN 'nbr_of_boolean_columns' THEN 5\n                            WHEN 'nbr_of_time_columns' THEN 6\n                    END AS index_pos\n                    , meta_data_key\n                    , identifier\n                    , detail\n                    , CAST(meta_data_value AS STRING) AS meta_data_value\n                FROM meta_data_unique\n                UNPIVOT (meta_data_value FOR meta_data_key IN (nbr_of_columns, nbr_of_text_columns, nbr_of_date_columns, nbr_of_numeric_columns,nbr_of_boolean_columns,nbr_of_time_columns))\n        )\n\n    \n\n\n        \n        , \n\n    \n        rowcount_info AS (\n            SELECT\n                    0 AS index_pos\n                    , ('nbr_of_rows') AS meta_data_key\n                    , 'dataset' AS identifier\n                    , '' AS detail\n                    , CAST(COUNT(*) AS STRING) AS meta_data_value\n            FROM \"dbt_db\".\"dbt_schema\".\"data_aggregated_mixed_granularity\"\n            GROUP BY ALL\n        )\n    \n\n\n        \n        , \n\n    \n        column_info AS (\n            SELECT\n                20 + ROW_NUMBER() OVER (ORDER BY data_type) AS index_pos\n                , column_name AS meta_data_key\n                , 'column' AS identifier\n                , '' AS detail\n                , CAST(data_type AS STRING) AS meta_data_value\n            FROM meta_data\n        )\n    \n\n\n        \n        , \n    \n    assembled_result AS (\n        \n            SELECT\n                \n                     index_pos\n                \n                    , meta_data_key\n                \n                    , meta_data_value\n                \n                    , identifier\n                \n                    , detail\n                \n            FROM\n            dataset_info\n            UNION ALL\n        \n            SELECT\n                \n                     index_pos\n                \n                    , meta_data_key\n                \n                    , meta_data_value\n                \n                    , identifier\n                \n                    , detail\n                \n            FROM\n            rowcount_info\n            UNION ALL\n        \n            SELECT\n                \n                     index_pos\n                \n                    , meta_data_key\n                \n                    , meta_data_value\n                \n                    , identifier\n                \n                    , detail\n                \n            FROM\n            column_info\n            \n        \n    )\n\n\n    \n    \n        , \n\n    \n    \n\n    \n    \n    \n\n    \n    \n    \n        column_detail_info_numeric AS (\n            SELECT\n                '' AS column_name\n                , TO_JSON(NULL) AS detail\n        )\n    \n\n\n    \n        , \n\n    \n    \n\n    \n    \n    \n\n    \n    \n    \n        \n        \n\n            \n\n\n            column_detail_country AS (\n                SELECT\n                    1\n                    \n                        , country\n                        , COUNT(*) AS cnt\n                    \n\n\n                    , SUM(COUNT(country)) OVER () AS cnt_total\n                    , SUM(COUNT(DISTINCT country)) OVER () AS cnt_unique\n                    , COUNT_IF(country IS NULL) AS cnt_null\n\n                FROM \"dbt_db\".\"dbt_schema\".\"data_aggregated_mixed_granularity\"\n\n                GROUP BY ALL\n\n                \n                    ORDER by cnt_null DESC, cnt DESC\n                    LIMIT 10\n                \n\n            ) ,\n        \n\n            \n\n\n            column_detail_company_name AS (\n                SELECT\n                    1\n                    \n                        , company_name\n                        , COUNT(*) AS cnt\n                    \n\n\n                    , SUM(COUNT(company_name)) OVER () AS cnt_total\n                    , SUM(COUNT(DISTINCT company_name)) OVER () AS cnt_unique\n                    , COUNT_IF(company_name IS NULL) AS cnt_null\n\n                FROM \"dbt_db\".\"dbt_schema\".\"data_aggregated_mixed_granularity\"\n\n                GROUP BY ALL\n\n                \n                    ORDER by cnt_null DESC, cnt DESC\n                    LIMIT 10\n                \n\n            ) \n        \n\n        \n        , column_detail_info_text AS (\n            \n            \n            SELECT\n                'country' AS column_name\n                , JSON_OBJECT(\n                    'column_name', 'country'\n                    , 'count' , MIN(cnt_total)\n                    , 'count_null' , MAX(cnt_null) -- needs to be max not min otherwise always zero\n                    \n                        \n                            , 'unique_values' , MIN(cnt_unique)\n                        \n                        , 'value_counts_top10',\n                            ARRAY_AGG\n                                (JSON_OBJECT(\n                                    CAST(COALESCE(country,'NULL') AS STRING)\n                                , cnt)\n                                )\n                    \n                ) AS detail\n            FROM column_detail_country\n            UNION ALL\n        \n            \n            SELECT\n                'company_name' AS column_name\n                , JSON_OBJECT(\n                    'column_name', 'company_name'\n                    , 'count' , MIN(cnt_total)\n                    , 'count_null' , MAX(cnt_null) -- needs to be max not min otherwise always zero\n                    \n                        \n                            , 'unique_values' , MIN(cnt_unique)\n                        \n                        , 'value_counts_top10',\n                            ARRAY_AGG\n                                (JSON_OBJECT(\n                                    CAST(COALESCE(company_name,'NULL') AS STRING)\n                                , cnt)\n                                )\n                    \n                ) AS detail\n            FROM column_detail_company_name\n            \n        \n\n        )\n    \n\n\n    \n        , \n\n    \n    \n\n    \n    \n    \n\n    \n    \n    \n        \n        \n\n            \n                \n            \n\n\n            column_detail_date_mixed_granularity AS (\n                SELECT\n                    1\n                    \n                            , MIN(date_mixed_granularity) AS min\n                            , MAX(date_mixed_granularity) AS max\n                            \n                                , MIN('Monthly') AS estimated_granularity\n                                , MIN(0.8) AS estimated_granularity_confidence\n                            \n                    \n\n\n                    , SUM(COUNT(date_mixed_granularity)) OVER () AS cnt_total\n                    , SUM(COUNT(DISTINCT date_mixed_granularity)) OVER () AS cnt_unique\n                    , COUNT_IF(date_mixed_granularity IS NULL) AS cnt_null\n\n                FROM \"dbt_db\".\"dbt_schema\".\"data_aggregated_mixed_granularity\"\n\n                GROUP BY ALL\n\n                \n\n            ) \n        \n\n        \n        , column_detail_info_date AS (\n            \n            \n            SELECT\n                'date_mixed_granularity' AS column_name\n                , JSON_OBJECT(\n                    'column_name', 'date_mixed_granularity'\n                    , 'count' , MIN(cnt_total)\n                    , 'count_null' , MAX(cnt_null) -- needs to be max not min otherwise always zero\n                    \n                        , 'min' , MIN(min)\n                        , 'max' , MIN(max)\n                        \n                            , 'estimated_granularity' , MIN(estimated_granularity)\n                            , 'estimated_granularity_confidence' , MIN(estimated_granularity_confidence)\n                        \n                    \n                ) AS detail\n            FROM column_detail_date_mixed_granularity\n            \n        \n\n        )\n    \n\n\n    \n        , \n\n    \n    \n\n    \n    \n    \n\n    \n    \n    \n        column_detail_info_boolean AS (\n            SELECT\n                '' AS column_name\n                , TO_JSON(NULL) AS detail\n        )\n    \n\n\n    \n\n    \n        \n\n\n\n\n\n    SELECT\n        assembed_result.meta_data_key\n        , assembed_result.meta_data_value\n        , assembed_result.identifier\n        , COALESCE(text_detail.detail, numeric_detail.detail,date_detail.detail, boolean_detail.detail) AS detail\n    FROM assembled_result AS assembed_result\n    LEFT JOIN column_detail_info_text AS text_detail\n    ON assembed_result.meta_data_key = text_detail.column_name\n    LEFT JOIN column_detail_info_numeric AS numeric_detail\n    ON assembed_result.meta_data_key = numeric_detail.column_name\n    LEFT JOIN column_detail_info_date AS date_detail\n    ON assembed_result.meta_data_key = date_detail.column_name\n    LEFT JOIN column_detail_info_boolean AS boolean_detail\n    ON assembed_result.meta_data_key = boolean_detail.column_name\n\n    ORDER BY index_pos ASC\n\n\n    \n\n\n)\nSELECT * FROM describe_dataframe\nWHERE\n    identifier = 'column'\n    AND\n    (\n        (\n            LOWER(meta_data_value) = 'date'\n\n            AND (\n\n                detail IS NULL\n\n                OR (\n                    meta_data_key = 'DATE_MIXED_GRANULARITY' AND (\n                    CAST(detail->>'column_name' AS STRING) <> 'DATE_MIXED_GRANULARITY'\n                    OR CAST(detail->>'estimated_granularity' AS STRING) <> 'Monthly'\n                    OR CAST(detail->>'estimated_granularity_confidence' AS FLOAT) <> 0.8\n                    OR CAST(detail->>'count' AS INTEGER) <> 16\n                    OR CAST(detail->>'count_null' AS INTEGER) <> 1\n                    OR CAST(detail->>'min' AS DATE) <> CAST('2019-01-01' AS DATE)\n                    OR CAST(detail->>'max' AS DATE) <> CAST('2023-01-01' AS DATE)\n                    )\n                )\n            )\n        )\n    )", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "test.dbt_eda_tools.assert_data_describe_all": {"database": "dbt_db", "schema": "dbt_schema_dbt_test__audit", "name": "assert_data_describe_all", "resource_type": "test", "package_name": "dbt_eda_tools", "path": "describe\\assert_data_describe_all.sql", "original_file_path": "tests\\describe\\assert_data_describe_all.sql", "unique_id": "test.dbt_eda_tools.assert_data_describe_all", "fqn": ["dbt_eda_tools", "describe", "assert_data_describe_all"], "alias": "assert_data_describe_all", "checksum": {"name": "sha256", "checksum": "33f4042e43b0f9726d34f1b42a511da9f7a2034c6b9a970549d905584b658e87"}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"enabled": true}, "created_at": 1728209050.6734707, "relation_name": null, "raw_code": "WITH\r\ndescribe_dataframe AS (\r\n    {{dbt_eda_tools.describe('data_generator_enriched_describe', include='all')}}\r\n)\r\nSELECT * FROM describe_dataframe\r\nWHERE\r\n    1=1\r\n    -- 5 column names as rows\r\n    AND\r\n    (\r\n        (\r\n        column_name NOT IN ('is_short_string', 'date_day', 'str_length', 'company_name', 'country')\r\n        )\r\n        OR column_name = 'is_short_string' AND NOT (\r\n            dtype = 'boolean' AND CAST(\"count\" AS INTEGER)=54800 AND CAST(\"unique_values\" AS INTEGER)=5\r\n            AND CAST(value_counts_top10->>'false' AS INTEGER) = 43840 AND CAST(value_counts_top10->>'true' AS INTEGER) = 10960\r\n        )\r\n        OR column_name = 'company_name' AND NOT (\r\n            dtype = 'text' AND CAST(\"count\" AS INTEGER)=54800 AND CAST(\"unique_values\" AS INTEGER)=5\r\n            AND CAST(value_counts_top10->>'AMZN' AS INTEGER) = 10960 AND CAST(value_counts_top10->>'A' AS INTEGER) = 10960 AND CAST(value_counts_top10->>'FB' AS INTEGER) = 10960 AND CAST(value_counts_top10->>'MSFT' AS INTEGER) = 10960 AND CAST(value_counts_top10->>'GOG' AS INTEGER) = 10960\r\n        )\r\n        OR column_name = 'country' AND NOT (\r\n            dtype = 'text' AND CAST(\"count\" AS INTEGER)=54800 AND CAST(\"unique_values\" AS INTEGER)=5\r\n            AND CAST(value_counts_top10->>'CA' AS INTEGER) = 10960 AND CAST(value_counts_top10->>'GB' AS INTEGER) = 10960 AND CAST(value_counts_top10->>'FR' AS INTEGER) = 10960 AND CAST(value_counts_top10->>'DE' AS INTEGER) = 10960 AND CAST(value_counts_top10->>'US' AS INTEGER) = 10960\r\n\r\n        )\r\n        OR column_name = 'str_length' AND NOT (\r\n            dtype = 'numeric' AND CAST(\"count\" AS INTEGER)=54800 AND CAST(\"unique_values\" AS INTEGER)=5\r\n            AND \"max\" = 6 AND \"min\" = 3 AND \"mean\" = 4.8\r\n            AND \"percentile_25\" = 4 AND \"percentile_50\" = 5 AND \"percentile_75\" = 6\r\n        )\r\n        OR column_name = 'date_day' AND NOT (\r\n            dtype = 'date' AND CAST(\"count\" AS INTEGER)=54800 AND \"estimated_granularity\"='\"Daily\"' AND CAST(\"estimated_granularity_confidence\" AS INTEGER)= 1\r\n            AND \"max\" = '\"2024-12-31 00:00:00\"' AND \"min\" = '\"2019-01-01 00:00:00\"'\r\n        )\r\n    )", "language": "sql", "refs": [{"name": "data_generator_enriched_describe", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_eda_tools.describe"], "nodes": ["model.dbt_eda_tools.data_generator_enriched_describe"]}, "compiled_path": "target\\compiled\\dbt_eda_tools\\tests\\describe\\assert_data_describe_all.sql", "compiled": true, "compiled_code": "WITH\ndescribe_dataframe AS (\n    \n\n    \n\n    \n    \n    \n    \n\n    \n\n    WITH\n    \n    dummy AS (SELECT 1)\n    \n    \n        , \n\n    \n    \n\n    \n    \n    \n\n    \n    \n    \n        \n        \n\n            \n\n\n            column_detail_str_length AS (\n                SELECT\n                    1\n                    \n                            , MIN(str_length) AS min\n                            , MAX(str_length) AS max\n                            \n                                , ROUND(AVG(str_length),4) AS avg\n                                \n                                , ROUND(APPROX_QUANTILE(str_length, 0.25),4) AS percentile_25\n                                , ROUND(APPROX_QUANTILE(str_length, 0.5),4) AS percentile_50\n                                , ROUND(APPROX_QUANTILE(str_length, 0.75),4) AS percentile_75\n                                \n                            \n                    \n\n\n                    , SUM(COUNT(str_length)) OVER () AS cnt_total\n                    , SUM(COUNT(DISTINCT str_length)) OVER () AS cnt_unique\n                    , COUNT_IF(str_length IS NULL) AS cnt_null\n\n                FROM \"dbt_db\".\"dbt_schema\".\"data_generator_enriched_describe\"\n\n                GROUP BY ALL\n\n                \n\n            ) \n        \n\n        \n        , column_detail_info_numeric AS (\n            \n            \n            SELECT\n                'str_length' AS column_name\n                , JSON_OBJECT(\n                    'column_name', 'str_length'\n                    , 'count' , MIN(cnt_total)\n                    , 'count_null' , MAX(cnt_null) -- needs to be max not min otherwise always zero\n                    \n                        , 'min' , MIN(min)\n                        , 'max' , MIN(max)\n                        \n                            , 'mean' , MIN(avg)\n                            , 'percentile_25' , MIN(percentile_25)\n                            , 'percentile_50' , MIN(percentile_50)\n                            , 'percentile_75' , MIN(percentile_75)\n                        \n                    \n                ) AS detail\n            FROM column_detail_str_length\n            \n        \n\n        )\n    \n\n\n    \n        , \n\n    \n    \n\n    \n    \n    \n\n    \n    \n    \n        \n        \n\n            \n\n\n            column_detail_country AS (\n                SELECT\n                    1\n                    \n                        , country\n                        , COUNT(*) AS cnt\n                    \n\n\n                    , SUM(COUNT(country)) OVER () AS cnt_total\n                    , SUM(COUNT(DISTINCT country)) OVER () AS cnt_unique\n                    , COUNT_IF(country IS NULL) AS cnt_null\n\n                FROM \"dbt_db\".\"dbt_schema\".\"data_generator_enriched_describe\"\n\n                GROUP BY ALL\n\n                \n                    ORDER by cnt_null DESC, cnt DESC\n                    LIMIT 10\n                \n\n            ) ,\n        \n\n            \n\n\n            column_detail_company_name AS (\n                SELECT\n                    1\n                    \n                        , company_name\n                        , COUNT(*) AS cnt\n                    \n\n\n                    , SUM(COUNT(company_name)) OVER () AS cnt_total\n                    , SUM(COUNT(DISTINCT company_name)) OVER () AS cnt_unique\n                    , COUNT_IF(company_name IS NULL) AS cnt_null\n\n                FROM \"dbt_db\".\"dbt_schema\".\"data_generator_enriched_describe\"\n\n                GROUP BY ALL\n\n                \n                    ORDER by cnt_null DESC, cnt DESC\n                    LIMIT 10\n                \n\n            ) \n        \n\n        \n        , column_detail_info_text AS (\n            \n            \n            SELECT\n                'country' AS column_name\n                , JSON_OBJECT(\n                    'column_name', 'country'\n                    , 'count' , MIN(cnt_total)\n                    , 'count_null' , MAX(cnt_null) -- needs to be max not min otherwise always zero\n                    \n                        \n                            , 'unique_values' , MIN(cnt_unique)\n                        \n                        , 'value_counts_top10',\n                            ARRAY_AGG\n                                (JSON_OBJECT(\n                                    CAST(COALESCE(country,'NULL') AS STRING)\n                                , cnt)\n                                )\n                    \n                ) AS detail\n            FROM column_detail_country\n            UNION ALL\n        \n            \n            SELECT\n                'company_name' AS column_name\n                , JSON_OBJECT(\n                    'column_name', 'company_name'\n                    , 'count' , MIN(cnt_total)\n                    , 'count_null' , MAX(cnt_null) -- needs to be max not min otherwise always zero\n                    \n                        \n                            , 'unique_values' , MIN(cnt_unique)\n                        \n                        , 'value_counts_top10',\n                            ARRAY_AGG\n                                (JSON_OBJECT(\n                                    CAST(COALESCE(company_name,'NULL') AS STRING)\n                                , cnt)\n                                )\n                    \n                ) AS detail\n            FROM column_detail_company_name\n            \n        \n\n        )\n    \n\n\n    \n        , \n\n    \n    \n\n    \n    \n    \n\n    \n    \n    \n        \n        \n\n            \n                \n            \n\n\n            column_detail_date_day AS (\n                SELECT\n                    1\n                    \n                            , MIN(date_day) AS min\n                            , MAX(date_day) AS max\n                            \n                                , MIN('Daily') AS estimated_granularity\n                                , MIN(1.0) AS estimated_granularity_confidence\n                            \n                    \n\n\n                    , SUM(COUNT(date_day)) OVER () AS cnt_total\n                    , SUM(COUNT(DISTINCT date_day)) OVER () AS cnt_unique\n                    , COUNT_IF(date_day IS NULL) AS cnt_null\n\n                FROM \"dbt_db\".\"dbt_schema\".\"data_generator_enriched_describe\"\n\n                GROUP BY ALL\n\n                \n\n            ) \n        \n\n        \n        , column_detail_info_date AS (\n            \n            \n            SELECT\n                'date_day' AS column_name\n                , JSON_OBJECT(\n                    'column_name', 'date_day'\n                    , 'count' , MIN(cnt_total)\n                    , 'count_null' , MAX(cnt_null) -- needs to be max not min otherwise always zero\n                    \n                        , 'min' , MIN(min)\n                        , 'max' , MIN(max)\n                        \n                            , 'estimated_granularity' , MIN(estimated_granularity)\n                            , 'estimated_granularity_confidence' , MIN(estimated_granularity_confidence)\n                        \n                    \n                ) AS detail\n            FROM column_detail_date_day\n            \n        \n\n        )\n    \n\n\n    \n        , \n\n    \n    \n\n    \n    \n    \n\n    \n    \n    \n        \n        \n\n            \n\n\n            column_detail_is_short_string AS (\n                SELECT\n                    1\n                    \n                        , is_short_string\n                        , COUNT(*) AS cnt\n                    \n\n\n                    , SUM(COUNT(is_short_string)) OVER () AS cnt_total\n                    , SUM(COUNT(DISTINCT is_short_string)) OVER () AS cnt_unique\n                    , COUNT_IF(is_short_string IS NULL) AS cnt_null\n\n                FROM \"dbt_db\".\"dbt_schema\".\"data_generator_enriched_describe\"\n\n                GROUP BY ALL\n\n                \n\n            ) \n        \n\n        \n        , column_detail_info_boolean AS (\n            \n            \n            SELECT\n                'is_short_string' AS column_name\n                , JSON_OBJECT(\n                    'column_name', 'is_short_string'\n                    , 'count' , MIN(cnt_total)\n                    , 'count_null' , MAX(cnt_null) -- needs to be max not min otherwise always zero\n                    \n                        \n                        , 'value_counts_top10',\n                            ARRAY_AGG\n                                (JSON_OBJECT(\n                                    CAST(COALESCE(is_short_string,false) AS STRING)\n                                , cnt)\n                                )\n                    \n                ) AS detail\n            FROM column_detail_is_short_string\n            \n        \n\n        )\n    \n\n\n    \n\n    \n        \n\n\n\n\n\n    , unioned_data AS (\n            \n                SELECT\n                   'numeric' AS dtype\n                    , * FROM\n                column_detail_info_numeric\n                WHERE column_name != ''\n                \n                    UNION ALL\n                \n            \n                SELECT\n                   'text' AS dtype\n                    , * FROM\n                column_detail_info_text\n                WHERE column_name != ''\n                \n                    UNION ALL\n                \n            \n                SELECT\n                   'date' AS dtype\n                    , * FROM\n                column_detail_info_date\n                WHERE column_name != ''\n                \n                    UNION ALL\n                \n            \n                SELECT\n                   'boolean' AS dtype\n                    , * FROM\n                column_detail_info_boolean\n                WHERE column_name != ''\n                \n            \n        )\n        \n            , flatten_data AS (\n                SELECT\n                    column_name\n                    , dtype\n                    \n                        , json_extract(detail, '$.count') AS count\n                    \n                        , json_extract(detail, '$.count_null') AS count_null\n                    \n                        , json_extract(detail, '$.mean') AS mean\n                    \n                        , json_extract(detail, '$.percentile_25') AS percentile_25\n                    \n                        , json_extract(detail, '$.percentile_50') AS percentile_50\n                    \n                        , json_extract(detail, '$.percentile_75') AS percentile_75\n                    \n                        , json_extract(detail, '$.unique_values') AS unique_values\n                    \n                        , json_extract(detail, '$.value_counts_top10') AS value_counts_top10\n                    \n                        , json_extract(detail, '$.estimated_granularity') AS estimated_granularity\n                    \n                        , json_extract(detail, '$.estimated_granularity_confidence') AS estimated_granularity_confidence\n                    \n                        , json_extract(detail, '$.min') AS min\n                    \n                        , json_extract(detail, '$.max') AS max\n                    \n                    FROM unioned_data\n            )\n        \n        , unpivoted_data AS (\n                SELECT\n                    column_name\n                    , dtype\n                    , key AS pivot_key\n                    , JSON(value) AS pivot_value ,\n                FROM\n            \n                flatten_data AS f\n                UNPIVOT (\n                    value FOR key IN (count, count_null, mean, percentile_25, percentile_50, percentile_75, unique_values, value_counts_top10, estimated_granularity, estimated_granularity_confidence, min, max)\n                )\n            \n\n        )\n        SELECT\n            column_name\n            , dtype\n            , count\n            , count_null\n            , ROUND((\n                CAST(count_null AS NUMERIC)\n                / (CAST(count AS NUMERIC)+CAST(count_null AS NUMERIC))\n            ),3)\n\n            AS percent_null\n            , * EXCLUDE(column_name, dtype\n                , count\n                , count_null\n            )\n        FROM\n        unpivoted_data\n        PIVOT(MIN(pivot_value) FOR pivot_key IN (\"count\", \"count_null\", \"mean\", \"percentile_25\", \"percentile_50\", \"percentile_75\", \"unique_values\", \"value_counts_top10\", \"estimated_granularity\", \"estimated_granularity_confidence\", \"min\", \"max\"))\n        ORDER BY dtype\n\n\n    \n\n\n)\nSELECT * FROM describe_dataframe\nWHERE\n    1=1\n    -- 5 column names as rows\n    AND\n    (\n        (\n        column_name NOT IN ('is_short_string', 'date_day', 'str_length', 'company_name', 'country')\n        )\n        OR column_name = 'is_short_string' AND NOT (\n            dtype = 'boolean' AND CAST(\"count\" AS INTEGER)=54800 AND CAST(\"unique_values\" AS INTEGER)=5\n            AND CAST(value_counts_top10->>'false' AS INTEGER) = 43840 AND CAST(value_counts_top10->>'true' AS INTEGER) = 10960\n        )\n        OR column_name = 'company_name' AND NOT (\n            dtype = 'text' AND CAST(\"count\" AS INTEGER)=54800 AND CAST(\"unique_values\" AS INTEGER)=5\n            AND CAST(value_counts_top10->>'AMZN' AS INTEGER) = 10960 AND CAST(value_counts_top10->>'A' AS INTEGER) = 10960 AND CAST(value_counts_top10->>'FB' AS INTEGER) = 10960 AND CAST(value_counts_top10->>'MSFT' AS INTEGER) = 10960 AND CAST(value_counts_top10->>'GOG' AS INTEGER) = 10960\n        )\n        OR column_name = 'country' AND NOT (\n            dtype = 'text' AND CAST(\"count\" AS INTEGER)=54800 AND CAST(\"unique_values\" AS INTEGER)=5\n            AND CAST(value_counts_top10->>'CA' AS INTEGER) = 10960 AND CAST(value_counts_top10->>'GB' AS INTEGER) = 10960 AND CAST(value_counts_top10->>'FR' AS INTEGER) = 10960 AND CAST(value_counts_top10->>'DE' AS INTEGER) = 10960 AND CAST(value_counts_top10->>'US' AS INTEGER) = 10960\n\n        )\n        OR column_name = 'str_length' AND NOT (\n            dtype = 'numeric' AND CAST(\"count\" AS INTEGER)=54800 AND CAST(\"unique_values\" AS INTEGER)=5\n            AND \"max\" = 6 AND \"min\" = 3 AND \"mean\" = 4.8\n            AND \"percentile_25\" = 4 AND \"percentile_50\" = 5 AND \"percentile_75\" = 6\n        )\n        OR column_name = 'date_day' AND NOT (\n            dtype = 'date' AND CAST(\"count\" AS INTEGER)=54800 AND \"estimated_granularity\"='\"Daily\"' AND CAST(\"estimated_granularity_confidence\" AS INTEGER)= 1\n            AND \"max\" = '\"2024-12-31 00:00:00\"' AND \"min\" = '\"2019-01-01 00:00:00\"'\n        )\n    )", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "test.dbt_eda_tools.assert_data_describe_column_details": {"database": "dbt_db", "schema": "dbt_schema_dbt_test__audit", "name": "assert_data_describe_column_details", "resource_type": "test", "package_name": "dbt_eda_tools", "path": "describe\\assert_data_describe_column_details.sql", "original_file_path": "tests\\describe\\assert_data_describe_column_details.sql", "unique_id": "test.dbt_eda_tools.assert_data_describe_column_details", "fqn": ["dbt_eda_tools", "describe", "assert_data_describe_column_details"], "alias": "assert_data_describe_column_details", "checksum": {"name": "sha256", "checksum": "598eafc441082c1f8b4f604d3ee4643741f095d86846ad9af1aa70dbe9f9b8e6"}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"enabled": true}, "created_at": 1728209050.7127197, "relation_name": null, "raw_code": "WITH\r\ndescribe_dataframe AS (\r\n    {{dbt_eda_tools.describe('data_generator_enriched_describe')}}\r\n)\r\nSELECT * FROM describe_dataframe\r\nWHERE\r\n    identifier = 'column'\r\n    AND\r\n    (\r\n        (\r\n            LOWER(meta_data_value) = 'text'\r\n\r\n            AND (\r\n\r\n                detail IS NULL\r\n\r\n                OR (\r\n                    meta_data_key = 'COMPANY_NAME' AND (\r\n                    CAST(detail->>'column_name' AS STRING) <> 'COMPANY_NAME'\r\n                    OR CAST(detail->>'count' AS INTEGER) <> 54800\r\n                    OR CAST(detail->>'count_null' AS INTEGER) <> 0\r\n                    OR CAST(detail->>'unique_values' AS INTEGER) <> 5\r\n                    OR CAST(detail->>'value_counts_top10'->>'A' AS INTEGER) <> 10960\r\n                    OR CAST(detail->>'value_counts_top10'->>'AMZN' AS INTEGER) <> 10960\r\n                    OR CAST(detail->>'value_counts_top10'->>'FB' AS INTEGER) <> 10960\r\n                    OR CAST(detail->>'value_counts_top10'->>'GOG' AS INTEGER) <> 10960\r\n                    OR CAST(detail->>'value_counts_top10'->>'MSFT' AS INTEGER) <> 10960\r\n                    )\r\n                )\r\n\r\n                OR (\r\n                    meta_data_key = 'COUNTRY' AND (\r\n                    CAST(detail->>'column_name' AS STRING) <> 'COUNTRY'\r\n                    OR CAST(detail->>'count' AS INTEGER) <> 54800\r\n                    OR CAST(detail->>'count_null' AS INTEGER) <> 0\r\n                    OR CAST(detail->>'unique_values' AS INTEGER) <> 5\r\n                    OR CAST(detail->>'value_counts_top10'->>'GB' AS INTEGER) <> 10960\r\n                    OR CAST(detail->>'value_counts_top10'->>'US' AS INTEGER) <> 10960\r\n                    OR CAST(detail->>'value_counts_top10'->>'FR' AS INTEGER) <> 10960\r\n                    OR CAST(detail->>'value_counts_top10'->>'DE' AS INTEGER) <> 10960\r\n                    OR CAST(detail->>'value_counts_top10'->>'CA' AS INTEGER) <> 10960\r\n                    )\r\n                )\r\n            )\r\n        )\r\n        OR (\r\n            LOWER(meta_data_value) = 'number'\r\n\r\n            AND (\r\n\r\n                detail IS NULL\r\n\r\n                OR (\r\n                    meta_data_key = 'STR_LENGTH' AND (\r\n                    CAST(detail->>'column_name' AS STRING) <> 'STR_LENGTH'\r\n                    OR CAST(detail->>'count' AS INTEGER) <> 54800\r\n                    OR CAST(detail->>'count_null' AS INTEGER) <> 0\r\n                    OR CAST(detail->>'max' AS INTEGER) <> 6\r\n                    OR CAST(detail->>'min' AS INTEGER) <> 3\r\n                    OR ROUND(CAST(detail->>'mean' AS FLOAT),1) <> 4.8\r\n                    OR ROUND(CAST(detail->>'percentile_25' AS FLOAT),0) <> 4\r\n                    OR ROUND(CAST(detail->>'percentile_50' AS FLOAT),0) <> 5\r\n                    OR ROUND(CAST(detail->>'percentile_75' AS FLOAT),0) <> 6\r\n                    )\r\n                )\r\n            )\r\n        )\r\n        OR (\r\n            LOWER(meta_data_value) = 'date'\r\n\r\n            AND (\r\n\r\n                detail IS NULL\r\n\r\n                OR (\r\n                    meta_data_key = 'DATE_DAY' AND (\r\n                    CAST(detail->>'column_name' AS STRING) <> 'DATE_DAY'\r\n                    OR CAST(detail->>'estimated_granularity' AS STRING) <> 'Daily'\r\n                    OR CAST(detail->>'estimated_granularity_confidence' AS INTEGER) <> 1\r\n                    OR CAST(detail->>'count' AS INTEGER) <> 54800\r\n                    OR CAST(detail->>'count_null' AS INTEGER) <> 0\r\n                    OR CAST(detail->>'max' AS DATE) <> CAST('2019-01-01' AS DATE)\r\n                    OR CAST(detail->>'min' AS DATE) <> CAST('2024-12-31' AS DATE)\r\n                    )\r\n                )\r\n            )\r\n        )\r\n        OR (\r\n            LOWER(meta_data_value) = 'boolean'\r\n\r\n            AND (\r\n\r\n                detail IS NULL\r\n\r\n                OR (\r\n                    meta_data_key = 'IS_SHORT_STRING' AND (\r\n                    CAST(detail->>'column_name' AS STRING) <> 'IS_SHORT_STRING'\r\n                    OR CAST(detail->>'count' AS INTEGER) <> 54800\r\n                    OR CAST(detail->>'count_null' AS INTEGER) <> 0\r\n                    OR CAST(detail->>'value_counts_top10'->>'false' AS INTEGER) <> 43840\r\n                    OR CAST(detail->>'value_counts_top10'->>'true' AS INTEGER) <> 10960\r\n                    )\r\n                )\r\n            )\r\n        )\r\n    )", "language": "sql", "refs": [{"name": "data_generator_enriched_describe", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_eda_tools.describe"], "nodes": ["model.dbt_eda_tools.data_generator_enriched_describe"]}, "compiled_path": "target\\compiled\\dbt_eda_tools\\tests\\describe\\assert_data_describe_column_details.sql", "compiled": true, "compiled_code": "WITH\ndescribe_dataframe AS (\n    \n\n    \n\n    \n    \n    \n    \n\n    \n\n    WITH\n    \n    dummy AS (SELECT 1)\n    \n        , \n    \n    \n    meta_data AS (\n        -- Need to explicitly cast the type before transposing the data\n        SELECT\n        column_name\n        , data_type\n        , COUNT(*) OVER ():: STRING AS nbr_of_columns\n        , CASE\n                \n                    \n                        WHEN DATA_TYPE IN ('VARCHAR', 'CHAR', 'CHARACTER', 'STRING', 'TEXT') THEN 'text'\n                    \n                \n                    \n                        WHEN DATA_TYPE IN ('DATE', 'DATETIME', 'TIMESTAMP', 'TIMESTAMP_LTZ', 'TIMESTAMP_NTZ', 'TIMESTAMP_TZ') THEN 'date'\n                    \n                \n                    \n                        WHEN DATA_TYPE IN ('NUMBER', 'DECIMAL', 'NUMERIC', 'INT', 'INTEGER', 'BIGINT', 'SMALLINT', 'FLOAT', 'FLOAT4', 'FLOAT8', 'DOUBLE', 'DOUBLE PRECISION', 'REAL', 'INT64', 'TINYINT', 'BYETEINT', 'BIGDECIMAL', 'FLOAT64') THEN 'numeric'\n                    \n                \n                    \n                        WHEN DATA_TYPE IN ('BOOLEAN', 'BOOL') THEN 'boolean'\n                    \n                \n                    \n                        WHEN DATA_TYPE IN ('TIME', 'NEEDSTOBEARRAY') THEN 'time'\n                    \n                \n                    \n                \n                    \n                \n                    \n                \n                    \n                \n        END AS data_type_input\n\n        \n            \n                \n                    , COUNT(CASE WHEN DATA_TYPE IN ('VARCHAR', 'CHAR', 'CHARACTER', 'STRING', 'TEXT') THEN 1 END) OVER ():: STRING AS nbr_of_text_columns\n                \n            \n        \n            \n                \n                    , COUNT(CASE WHEN DATA_TYPE IN ('DATE', 'DATETIME', 'TIMESTAMP', 'TIMESTAMP_LTZ', 'TIMESTAMP_NTZ', 'TIMESTAMP_TZ') THEN 1 END) OVER ():: STRING AS nbr_of_date_columns\n                \n            \n        \n            \n                \n                    , COUNT(CASE WHEN DATA_TYPE IN ('NUMBER', 'DECIMAL', 'NUMERIC', 'INT', 'INTEGER', 'BIGINT', 'SMALLINT', 'FLOAT', 'FLOAT4', 'FLOAT8', 'DOUBLE', 'DOUBLE PRECISION', 'REAL', 'INT64', 'TINYINT', 'BYETEINT', 'BIGDECIMAL', 'FLOAT64') THEN 1 END) OVER ():: STRING AS nbr_of_numeric_columns\n                \n            \n        \n            \n                \n                    , COUNT(CASE WHEN DATA_TYPE IN ('BOOLEAN', 'BOOL') THEN 1 END) OVER ():: STRING AS nbr_of_boolean_columns\n                \n            \n        \n            \n                \n                    , COUNT(CASE WHEN DATA_TYPE IN ('TIME', 'NEEDSTOBEARRAY') THEN 1 END) OVER ():: STRING AS nbr_of_time_columns\n                \n            \n        \n            \n        \n            \n        \n            \n        \n            \n        \n\n        FROM INFORMATION_SCHEMA.TABLES t\n        INNER JOIN INFORMATION_SCHEMA.COLUMNS c ON\n                c.table_schema = t.table_schema AND c.table_name = t.table_name\n                WHERE t.table_name = 'data_generator_enriched_describe'\n    )\n\n\n        \n        , \n\n    \n\n        meta_data_unique AS (\n            SELECT\n                    DISTINCT\n                    'dataset' AS identifier\n                    , '' AS detail\n                    , nbr_of_columns\n                    , nbr_of_text_columns\n                    , nbr_of_date_columns\n                    , nbr_of_numeric_columns\n                    , nbr_of_boolean_columns\n                    , nbr_of_time_columns\n                FROM meta_data\n        )\n        , dataset_info AS (\n            SELECT\n                    CASE LOWER(meta_data_key)\n                            WHEN 'nbr_of_columns' THEN 1\n                            WHEN 'nbr_of_text_columns' THEN 2\n                            WHEN 'nbr_of_date_columns' THEN 3\n                            WHEN 'nbr_of_numeric_columns' THEN 4\n                            WHEN 'nbr_of_boolean_columns' THEN 5\n                            WHEN 'nbr_of_time_columns' THEN 6\n                    END AS index_pos\n                    , meta_data_key\n                    , identifier\n                    , detail\n                    , CAST(meta_data_value AS STRING) AS meta_data_value\n                FROM meta_data_unique\n                UNPIVOT (meta_data_value FOR meta_data_key IN (nbr_of_columns, nbr_of_text_columns, nbr_of_date_columns, nbr_of_numeric_columns,nbr_of_boolean_columns,nbr_of_time_columns))\n        )\n\n    \n\n\n        \n        , \n\n    \n        rowcount_info AS (\n            SELECT\n                    0 AS index_pos\n                    , ('nbr_of_rows') AS meta_data_key\n                    , 'dataset' AS identifier\n                    , '' AS detail\n                    , CAST(COUNT(*) AS STRING) AS meta_data_value\n            FROM \"dbt_db\".\"dbt_schema\".\"data_generator_enriched_describe\"\n            GROUP BY ALL\n        )\n    \n\n\n        \n        , \n\n    \n        column_info AS (\n            SELECT\n                20 + ROW_NUMBER() OVER (ORDER BY data_type) AS index_pos\n                , column_name AS meta_data_key\n                , 'column' AS identifier\n                , '' AS detail\n                , CAST(data_type AS STRING) AS meta_data_value\n            FROM meta_data\n        )\n    \n\n\n        \n        , \n    \n    assembled_result AS (\n        \n            SELECT\n                \n                     index_pos\n                \n                    , meta_data_key\n                \n                    , meta_data_value\n                \n                    , identifier\n                \n                    , detail\n                \n            FROM\n            dataset_info\n            UNION ALL\n        \n            SELECT\n                \n                     index_pos\n                \n                    , meta_data_key\n                \n                    , meta_data_value\n                \n                    , identifier\n                \n                    , detail\n                \n            FROM\n            rowcount_info\n            UNION ALL\n        \n            SELECT\n                \n                     index_pos\n                \n                    , meta_data_key\n                \n                    , meta_data_value\n                \n                    , identifier\n                \n                    , detail\n                \n            FROM\n            column_info\n            \n        \n    )\n\n\n    \n    \n        , \n\n    \n    \n\n    \n    \n    \n\n    \n    \n    \n        \n        \n\n            \n\n\n            column_detail_str_length AS (\n                SELECT\n                    1\n                    \n                            , MIN(str_length) AS min\n                            , MAX(str_length) AS max\n                            \n                                , ROUND(AVG(str_length),4) AS avg\n                                \n                                , ROUND(APPROX_QUANTILE(str_length, 0.25),4) AS percentile_25\n                                , ROUND(APPROX_QUANTILE(str_length, 0.5),4) AS percentile_50\n                                , ROUND(APPROX_QUANTILE(str_length, 0.75),4) AS percentile_75\n                                \n                            \n                    \n\n\n                    , SUM(COUNT(str_length)) OVER () AS cnt_total\n                    , SUM(COUNT(DISTINCT str_length)) OVER () AS cnt_unique\n                    , COUNT_IF(str_length IS NULL) AS cnt_null\n\n                FROM \"dbt_db\".\"dbt_schema\".\"data_generator_enriched_describe\"\n\n                GROUP BY ALL\n\n                \n\n            ) \n        \n\n        \n        , column_detail_info_numeric AS (\n            \n            \n            SELECT\n                'str_length' AS column_name\n                , JSON_OBJECT(\n                    'column_name', 'str_length'\n                    , 'count' , MIN(cnt_total)\n                    , 'count_null' , MAX(cnt_null) -- needs to be max not min otherwise always zero\n                    \n                        , 'min' , MIN(min)\n                        , 'max' , MIN(max)\n                        \n                            , 'mean' , MIN(avg)\n                            , 'percentile_25' , MIN(percentile_25)\n                            , 'percentile_50' , MIN(percentile_50)\n                            , 'percentile_75' , MIN(percentile_75)\n                        \n                    \n                ) AS detail\n            FROM column_detail_str_length\n            \n        \n\n        )\n    \n\n\n    \n        , \n\n    \n    \n\n    \n    \n    \n\n    \n    \n    \n        \n        \n\n            \n\n\n            column_detail_country AS (\n                SELECT\n                    1\n                    \n                        , country\n                        , COUNT(*) AS cnt\n                    \n\n\n                    , SUM(COUNT(country)) OVER () AS cnt_total\n                    , SUM(COUNT(DISTINCT country)) OVER () AS cnt_unique\n                    , COUNT_IF(country IS NULL) AS cnt_null\n\n                FROM \"dbt_db\".\"dbt_schema\".\"data_generator_enriched_describe\"\n\n                GROUP BY ALL\n\n                \n                    ORDER by cnt_null DESC, cnt DESC\n                    LIMIT 10\n                \n\n            ) ,\n        \n\n            \n\n\n            column_detail_company_name AS (\n                SELECT\n                    1\n                    \n                        , company_name\n                        , COUNT(*) AS cnt\n                    \n\n\n                    , SUM(COUNT(company_name)) OVER () AS cnt_total\n                    , SUM(COUNT(DISTINCT company_name)) OVER () AS cnt_unique\n                    , COUNT_IF(company_name IS NULL) AS cnt_null\n\n                FROM \"dbt_db\".\"dbt_schema\".\"data_generator_enriched_describe\"\n\n                GROUP BY ALL\n\n                \n                    ORDER by cnt_null DESC, cnt DESC\n                    LIMIT 10\n                \n\n            ) \n        \n\n        \n        , column_detail_info_text AS (\n            \n            \n            SELECT\n                'country' AS column_name\n                , JSON_OBJECT(\n                    'column_name', 'country'\n                    , 'count' , MIN(cnt_total)\n                    , 'count_null' , MAX(cnt_null) -- needs to be max not min otherwise always zero\n                    \n                        \n                            , 'unique_values' , MIN(cnt_unique)\n                        \n                        , 'value_counts_top10',\n                            ARRAY_AGG\n                                (JSON_OBJECT(\n                                    CAST(COALESCE(country,'NULL') AS STRING)\n                                , cnt)\n                                )\n                    \n                ) AS detail\n            FROM column_detail_country\n            UNION ALL\n        \n            \n            SELECT\n                'company_name' AS column_name\n                , JSON_OBJECT(\n                    'column_name', 'company_name'\n                    , 'count' , MIN(cnt_total)\n                    , 'count_null' , MAX(cnt_null) -- needs to be max not min otherwise always zero\n                    \n                        \n                            , 'unique_values' , MIN(cnt_unique)\n                        \n                        , 'value_counts_top10',\n                            ARRAY_AGG\n                                (JSON_OBJECT(\n                                    CAST(COALESCE(company_name,'NULL') AS STRING)\n                                , cnt)\n                                )\n                    \n                ) AS detail\n            FROM column_detail_company_name\n            \n        \n\n        )\n    \n\n\n    \n        , \n\n    \n    \n\n    \n    \n    \n\n    \n    \n    \n        \n        \n\n            \n                \n            \n\n\n            column_detail_date_day AS (\n                SELECT\n                    1\n                    \n                            , MIN(date_day) AS min\n                            , MAX(date_day) AS max\n                            \n                                , MIN('Daily') AS estimated_granularity\n                                , MIN(1.0) AS estimated_granularity_confidence\n                            \n                    \n\n\n                    , SUM(COUNT(date_day)) OVER () AS cnt_total\n                    , SUM(COUNT(DISTINCT date_day)) OVER () AS cnt_unique\n                    , COUNT_IF(date_day IS NULL) AS cnt_null\n\n                FROM \"dbt_db\".\"dbt_schema\".\"data_generator_enriched_describe\"\n\n                GROUP BY ALL\n\n                \n\n            ) \n        \n\n        \n        , column_detail_info_date AS (\n            \n            \n            SELECT\n                'date_day' AS column_name\n                , JSON_OBJECT(\n                    'column_name', 'date_day'\n                    , 'count' , MIN(cnt_total)\n                    , 'count_null' , MAX(cnt_null) -- needs to be max not min otherwise always zero\n                    \n                        , 'min' , MIN(min)\n                        , 'max' , MIN(max)\n                        \n                            , 'estimated_granularity' , MIN(estimated_granularity)\n                            , 'estimated_granularity_confidence' , MIN(estimated_granularity_confidence)\n                        \n                    \n                ) AS detail\n            FROM column_detail_date_day\n            \n        \n\n        )\n    \n\n\n    \n        , \n\n    \n    \n\n    \n    \n    \n\n    \n    \n    \n        \n        \n\n            \n\n\n            column_detail_is_short_string AS (\n                SELECT\n                    1\n                    \n                        , is_short_string\n                        , COUNT(*) AS cnt\n                    \n\n\n                    , SUM(COUNT(is_short_string)) OVER () AS cnt_total\n                    , SUM(COUNT(DISTINCT is_short_string)) OVER () AS cnt_unique\n                    , COUNT_IF(is_short_string IS NULL) AS cnt_null\n\n                FROM \"dbt_db\".\"dbt_schema\".\"data_generator_enriched_describe\"\n\n                GROUP BY ALL\n\n                \n\n            ) \n        \n\n        \n        , column_detail_info_boolean AS (\n            \n            \n            SELECT\n                'is_short_string' AS column_name\n                , JSON_OBJECT(\n                    'column_name', 'is_short_string'\n                    , 'count' , MIN(cnt_total)\n                    , 'count_null' , MAX(cnt_null) -- needs to be max not min otherwise always zero\n                    \n                        \n                        , 'value_counts_top10',\n                            ARRAY_AGG\n                                (JSON_OBJECT(\n                                    CAST(COALESCE(is_short_string,false) AS STRING)\n                                , cnt)\n                                )\n                    \n                ) AS detail\n            FROM column_detail_is_short_string\n            \n        \n\n        )\n    \n\n\n    \n\n    \n        \n\n\n\n\n\n    SELECT\n        assembed_result.meta_data_key\n        , assembed_result.meta_data_value\n        , assembed_result.identifier\n        , COALESCE(text_detail.detail, numeric_detail.detail,date_detail.detail, boolean_detail.detail) AS detail\n    FROM assembled_result AS assembed_result\n    LEFT JOIN column_detail_info_text AS text_detail\n    ON assembed_result.meta_data_key = text_detail.column_name\n    LEFT JOIN column_detail_info_numeric AS numeric_detail\n    ON assembed_result.meta_data_key = numeric_detail.column_name\n    LEFT JOIN column_detail_info_date AS date_detail\n    ON assembed_result.meta_data_key = date_detail.column_name\n    LEFT JOIN column_detail_info_boolean AS boolean_detail\n    ON assembed_result.meta_data_key = boolean_detail.column_name\n\n    ORDER BY index_pos ASC\n\n\n    \n\n\n)\nSELECT * FROM describe_dataframe\nWHERE\n    identifier = 'column'\n    AND\n    (\n        (\n            LOWER(meta_data_value) = 'text'\n\n            AND (\n\n                detail IS NULL\n\n                OR (\n                    meta_data_key = 'COMPANY_NAME' AND (\n                    CAST(detail->>'column_name' AS STRING) <> 'COMPANY_NAME'\n                    OR CAST(detail->>'count' AS INTEGER) <> 54800\n                    OR CAST(detail->>'count_null' AS INTEGER) <> 0\n                    OR CAST(detail->>'unique_values' AS INTEGER) <> 5\n                    OR CAST(detail->>'value_counts_top10'->>'A' AS INTEGER) <> 10960\n                    OR CAST(detail->>'value_counts_top10'->>'AMZN' AS INTEGER) <> 10960\n                    OR CAST(detail->>'value_counts_top10'->>'FB' AS INTEGER) <> 10960\n                    OR CAST(detail->>'value_counts_top10'->>'GOG' AS INTEGER) <> 10960\n                    OR CAST(detail->>'value_counts_top10'->>'MSFT' AS INTEGER) <> 10960\n                    )\n                )\n\n                OR (\n                    meta_data_key = 'COUNTRY' AND (\n                    CAST(detail->>'column_name' AS STRING) <> 'COUNTRY'\n                    OR CAST(detail->>'count' AS INTEGER) <> 54800\n                    OR CAST(detail->>'count_null' AS INTEGER) <> 0\n                    OR CAST(detail->>'unique_values' AS INTEGER) <> 5\n                    OR CAST(detail->>'value_counts_top10'->>'GB' AS INTEGER) <> 10960\n                    OR CAST(detail->>'value_counts_top10'->>'US' AS INTEGER) <> 10960\n                    OR CAST(detail->>'value_counts_top10'->>'FR' AS INTEGER) <> 10960\n                    OR CAST(detail->>'value_counts_top10'->>'DE' AS INTEGER) <> 10960\n                    OR CAST(detail->>'value_counts_top10'->>'CA' AS INTEGER) <> 10960\n                    )\n                )\n            )\n        )\n        OR (\n            LOWER(meta_data_value) = 'number'\n\n            AND (\n\n                detail IS NULL\n\n                OR (\n                    meta_data_key = 'STR_LENGTH' AND (\n                    CAST(detail->>'column_name' AS STRING) <> 'STR_LENGTH'\n                    OR CAST(detail->>'count' AS INTEGER) <> 54800\n                    OR CAST(detail->>'count_null' AS INTEGER) <> 0\n                    OR CAST(detail->>'max' AS INTEGER) <> 6\n                    OR CAST(detail->>'min' AS INTEGER) <> 3\n                    OR ROUND(CAST(detail->>'mean' AS FLOAT),1) <> 4.8\n                    OR ROUND(CAST(detail->>'percentile_25' AS FLOAT),0) <> 4\n                    OR ROUND(CAST(detail->>'percentile_50' AS FLOAT),0) <> 5\n                    OR ROUND(CAST(detail->>'percentile_75' AS FLOAT),0) <> 6\n                    )\n                )\n            )\n        )\n        OR (\n            LOWER(meta_data_value) = 'date'\n\n            AND (\n\n                detail IS NULL\n\n                OR (\n                    meta_data_key = 'DATE_DAY' AND (\n                    CAST(detail->>'column_name' AS STRING) <> 'DATE_DAY'\n                    OR CAST(detail->>'estimated_granularity' AS STRING) <> 'Daily'\n                    OR CAST(detail->>'estimated_granularity_confidence' AS INTEGER) <> 1\n                    OR CAST(detail->>'count' AS INTEGER) <> 54800\n                    OR CAST(detail->>'count_null' AS INTEGER) <> 0\n                    OR CAST(detail->>'max' AS DATE) <> CAST('2019-01-01' AS DATE)\n                    OR CAST(detail->>'min' AS DATE) <> CAST('2024-12-31' AS DATE)\n                    )\n                )\n            )\n        )\n        OR (\n            LOWER(meta_data_value) = 'boolean'\n\n            AND (\n\n                detail IS NULL\n\n                OR (\n                    meta_data_key = 'IS_SHORT_STRING' AND (\n                    CAST(detail->>'column_name' AS STRING) <> 'IS_SHORT_STRING'\n                    OR CAST(detail->>'count' AS INTEGER) <> 54800\n                    OR CAST(detail->>'count_null' AS INTEGER) <> 0\n                    OR CAST(detail->>'value_counts_top10'->>'false' AS INTEGER) <> 43840\n                    OR CAST(detail->>'value_counts_top10'->>'true' AS INTEGER) <> 10960\n                    )\n                )\n            )\n        )\n    )", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "test.dbt_eda_tools.assert_data_describe_include": {"database": "dbt_db", "schema": "dbt_schema_dbt_test__audit", "name": "assert_data_describe_include", "resource_type": "test", "package_name": "dbt_eda_tools", "path": "describe\\assert_data_describe_include.sql", "original_file_path": "tests\\describe\\assert_data_describe_include.sql", "unique_id": "test.dbt_eda_tools.assert_data_describe_include", "fqn": ["dbt_eda_tools", "describe", "assert_data_describe_include"], "alias": "assert_data_describe_include", "checksum": {"name": "sha256", "checksum": "ad472ba6ca58d5c424f3a2aaf41ae45f88aaeeaac5594d835d831665aa28a0d3"}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"enabled": true}, "created_at": 1728209050.7519948, "relation_name": null, "raw_code": "WITH\r\ndescribe_dataframe AS (\r\n    {{dbt_eda_tools.describe('data_generator_enriched_describe', include=['text','boolean','numeric'])}}\r\n)\r\nSELECT * FROM describe_dataframe\r\nWHERE\r\n    1=1\r\n    -- filtered out the date column\r\n    AND\r\n    (\r\n        (\r\n        column_name NOT IN ('is_short_string', 'str_length', 'company_name', 'country')\r\n        )\r\n    )", "language": "sql", "refs": [{"name": "data_generator_enriched_describe", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_eda_tools.describe"], "nodes": ["model.dbt_eda_tools.data_generator_enriched_describe"]}, "compiled_path": "target\\compiled\\dbt_eda_tools\\tests\\describe\\assert_data_describe_include.sql", "compiled": true, "compiled_code": "WITH\ndescribe_dataframe AS (\n    \n\n    \n\n    \n    \n    \n    \n\n    \n\n    WITH\n    \n    dummy AS (SELECT 1)\n    \n    \n        , \n\n    \n    \n\n    \n    \n    \n\n    \n    \n    \n        \n        \n\n            \n\n\n            column_detail_country AS (\n                SELECT\n                    1\n                    \n                        , country\n                        , COUNT(*) AS cnt\n                    \n\n\n                    , SUM(COUNT(country)) OVER () AS cnt_total\n                    , SUM(COUNT(DISTINCT country)) OVER () AS cnt_unique\n                    , COUNT_IF(country IS NULL) AS cnt_null\n\n                FROM \"dbt_db\".\"dbt_schema\".\"data_generator_enriched_describe\"\n\n                GROUP BY ALL\n\n                \n                    ORDER by cnt_null DESC, cnt DESC\n                    LIMIT 10\n                \n\n            ) ,\n        \n\n            \n\n\n            column_detail_company_name AS (\n                SELECT\n                    1\n                    \n                        , company_name\n                        , COUNT(*) AS cnt\n                    \n\n\n                    , SUM(COUNT(company_name)) OVER () AS cnt_total\n                    , SUM(COUNT(DISTINCT company_name)) OVER () AS cnt_unique\n                    , COUNT_IF(company_name IS NULL) AS cnt_null\n\n                FROM \"dbt_db\".\"dbt_schema\".\"data_generator_enriched_describe\"\n\n                GROUP BY ALL\n\n                \n                    ORDER by cnt_null DESC, cnt DESC\n                    LIMIT 10\n                \n\n            ) \n        \n\n        \n        , column_detail_info_text AS (\n            \n            \n            SELECT\n                'country' AS column_name\n                , JSON_OBJECT(\n                    'column_name', 'country'\n                    , 'count' , MIN(cnt_total)\n                    , 'count_null' , MAX(cnt_null) -- needs to be max not min otherwise always zero\n                    \n                        \n                            , 'unique_values' , MIN(cnt_unique)\n                        \n                        , 'value_counts_top10',\n                            ARRAY_AGG\n                                (JSON_OBJECT(\n                                    CAST(COALESCE(country,'NULL') AS STRING)\n                                , cnt)\n                                )\n                    \n                ) AS detail\n            FROM column_detail_country\n            UNION ALL\n        \n            \n            SELECT\n                'company_name' AS column_name\n                , JSON_OBJECT(\n                    'column_name', 'company_name'\n                    , 'count' , MIN(cnt_total)\n                    , 'count_null' , MAX(cnt_null) -- needs to be max not min otherwise always zero\n                    \n                        \n                            , 'unique_values' , MIN(cnt_unique)\n                        \n                        , 'value_counts_top10',\n                            ARRAY_AGG\n                                (JSON_OBJECT(\n                                    CAST(COALESCE(company_name,'NULL') AS STRING)\n                                , cnt)\n                                )\n                    \n                ) AS detail\n            FROM column_detail_company_name\n            \n        \n\n        )\n    \n\n\n    \n        , \n\n    \n    \n\n    \n    \n    \n\n    \n    \n    \n        \n        \n\n            \n\n\n            column_detail_is_short_string AS (\n                SELECT\n                    1\n                    \n                        , is_short_string\n                        , COUNT(*) AS cnt\n                    \n\n\n                    , SUM(COUNT(is_short_string)) OVER () AS cnt_total\n                    , SUM(COUNT(DISTINCT is_short_string)) OVER () AS cnt_unique\n                    , COUNT_IF(is_short_string IS NULL) AS cnt_null\n\n                FROM \"dbt_db\".\"dbt_schema\".\"data_generator_enriched_describe\"\n\n                GROUP BY ALL\n\n                \n\n            ) \n        \n\n        \n        , column_detail_info_boolean AS (\n            \n            \n            SELECT\n                'is_short_string' AS column_name\n                , JSON_OBJECT(\n                    'column_name', 'is_short_string'\n                    , 'count' , MIN(cnt_total)\n                    , 'count_null' , MAX(cnt_null) -- needs to be max not min otherwise always zero\n                    \n                        \n                        , 'value_counts_top10',\n                            ARRAY_AGG\n                                (JSON_OBJECT(\n                                    CAST(COALESCE(is_short_string,false) AS STRING)\n                                , cnt)\n                                )\n                    \n                ) AS detail\n            FROM column_detail_is_short_string\n            \n        \n\n        )\n    \n\n\n    \n        , \n\n    \n    \n\n    \n    \n    \n\n    \n    \n    \n        \n        \n\n            \n\n\n            column_detail_str_length AS (\n                SELECT\n                    1\n                    \n                            , MIN(str_length) AS min\n                            , MAX(str_length) AS max\n                            \n                                , ROUND(AVG(str_length),4) AS avg\n                                \n                                , ROUND(APPROX_QUANTILE(str_length, 0.25),4) AS percentile_25\n                                , ROUND(APPROX_QUANTILE(str_length, 0.5),4) AS percentile_50\n                                , ROUND(APPROX_QUANTILE(str_length, 0.75),4) AS percentile_75\n                                \n                            \n                    \n\n\n                    , SUM(COUNT(str_length)) OVER () AS cnt_total\n                    , SUM(COUNT(DISTINCT str_length)) OVER () AS cnt_unique\n                    , COUNT_IF(str_length IS NULL) AS cnt_null\n\n                FROM \"dbt_db\".\"dbt_schema\".\"data_generator_enriched_describe\"\n\n                GROUP BY ALL\n\n                \n\n            ) \n        \n\n        \n        , column_detail_info_numeric AS (\n            \n            \n            SELECT\n                'str_length' AS column_name\n                , JSON_OBJECT(\n                    'column_name', 'str_length'\n                    , 'count' , MIN(cnt_total)\n                    , 'count_null' , MAX(cnt_null) -- needs to be max not min otherwise always zero\n                    \n                        , 'min' , MIN(min)\n                        , 'max' , MIN(max)\n                        \n                            , 'mean' , MIN(avg)\n                            , 'percentile_25' , MIN(percentile_25)\n                            , 'percentile_50' , MIN(percentile_50)\n                            , 'percentile_75' , MIN(percentile_75)\n                        \n                    \n                ) AS detail\n            FROM column_detail_str_length\n            \n        \n\n        )\n    \n\n\n    \n\n    \n        \n\n\n\n\n\n    , unioned_data AS (\n            \n                SELECT\n                   'text' AS dtype\n                    , * FROM\n                column_detail_info_text\n                WHERE column_name != ''\n                \n                    UNION ALL\n                \n            \n                SELECT\n                   'boolean' AS dtype\n                    , * FROM\n                column_detail_info_boolean\n                WHERE column_name != ''\n                \n                    UNION ALL\n                \n            \n                SELECT\n                   'numeric' AS dtype\n                    , * FROM\n                column_detail_info_numeric\n                WHERE column_name != ''\n                \n            \n        )\n        \n            , flatten_data AS (\n                SELECT\n                    column_name\n                    , dtype\n                    \n                        , json_extract(detail, '$.count') AS count\n                    \n                        , json_extract(detail, '$.count_null') AS count_null\n                    \n                        , json_extract(detail, '$.mean') AS mean\n                    \n                        , json_extract(detail, '$.percentile_25') AS percentile_25\n                    \n                        , json_extract(detail, '$.percentile_50') AS percentile_50\n                    \n                        , json_extract(detail, '$.percentile_75') AS percentile_75\n                    \n                        , json_extract(detail, '$.unique_values') AS unique_values\n                    \n                        , json_extract(detail, '$.value_counts_top10') AS value_counts_top10\n                    \n                        , json_extract(detail, '$.estimated_granularity') AS estimated_granularity\n                    \n                        , json_extract(detail, '$.estimated_granularity_confidence') AS estimated_granularity_confidence\n                    \n                        , json_extract(detail, '$.min') AS min\n                    \n                        , json_extract(detail, '$.max') AS max\n                    \n                    FROM unioned_data\n            )\n        \n        , unpivoted_data AS (\n                SELECT\n                    column_name\n                    , dtype\n                    , key AS pivot_key\n                    , JSON(value) AS pivot_value ,\n                FROM\n            \n                flatten_data AS f\n                UNPIVOT (\n                    value FOR key IN (count, count_null, mean, percentile_25, percentile_50, percentile_75, unique_values, value_counts_top10, estimated_granularity, estimated_granularity_confidence, min, max)\n                )\n            \n\n        )\n        SELECT\n            column_name\n            , dtype\n            , count\n            , count_null\n            , ROUND((\n                CAST(count_null AS NUMERIC)\n                / (CAST(count AS NUMERIC)+CAST(count_null AS NUMERIC))\n            ),3)\n\n            AS percent_null\n            , * EXCLUDE(column_name, dtype\n                , count\n                , count_null\n            )\n        FROM\n        unpivoted_data\n        PIVOT(MIN(pivot_value) FOR pivot_key IN (\"count\", \"count_null\", \"mean\", \"percentile_25\", \"percentile_50\", \"percentile_75\", \"unique_values\", \"value_counts_top10\", \"estimated_granularity\", \"estimated_granularity_confidence\", \"min\", \"max\"))\n        ORDER BY dtype\n\n\n    \n\n\n)\nSELECT * FROM describe_dataframe\nWHERE\n    1=1\n    -- filtered out the date column\n    AND\n    (\n        (\n        column_name NOT IN ('is_short_string', 'str_length', 'company_name', 'country')\n        )\n    )", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "test.dbt_eda_tools.assert_data_describe_structure": {"database": "dbt_db", "schema": "dbt_schema_dbt_test__audit", "name": "assert_data_describe_structure", "resource_type": "test", "package_name": "dbt_eda_tools", "path": "describe\\assert_data_describe_structure.sql", "original_file_path": "tests\\describe\\assert_data_describe_structure.sql", "unique_id": "test.dbt_eda_tools.assert_data_describe_structure", "fqn": ["dbt_eda_tools", "describe", "assert_data_describe_structure"], "alias": "assert_data_describe_structure", "checksum": {"name": "sha256", "checksum": "7eac97cf59b67257615a255df054318dec66e1f350781e72aeed5176017bd47c"}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"enabled": true}, "created_at": 1728209050.7851799, "relation_name": null, "raw_code": "WITH\r\ndescribe_dataframe AS (\r\n    {{dbt_eda_tools.describe('data_generator_enriched_describe')}}\r\n)\r\nSELECT * FROM describe_dataframe\r\nWHERE\r\n    1=1\r\n    AND\r\n    (\r\n        (LOWER(meta_data_key) = 'nbr_of_columns' AND meta_data_value <> '5')\r\n        -- Rows = 54800\r\n        OR (LOWER(meta_data_key) = 'nbr_of_rows' AND meta_data_value <> '54800')\r\n        -- Date Columns = 1\r\n        OR (LOWER(meta_data_key) = 'nbr_of_date_columns' AND meta_data_value <> '1')\r\n        -- Time Columns = 1\r\n        OR (LOWER(meta_data_key) = 'nbr_of_time_columns' AND meta_data_value <> '0')\r\n        -- Boolean Columns = 1\r\n        OR (LOWER(meta_data_key) = 'nbr_of_boolean_columns' AND meta_data_value <> '1')\r\n        -- Text Columns = 1\r\n        OR (LOWER(meta_data_key) = 'nbr_of_text_columns' AND meta_data_value <> '2')\r\n        -- Numeric Columns = 1\r\n        OR (LOWER(meta_data_key) = 'nbr_of_numeric_columns' AND meta_data_value <> '1')\r\n    )", "language": "sql", "refs": [{"name": "data_generator_enriched_describe", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_eda_tools.describe"], "nodes": ["model.dbt_eda_tools.data_generator_enriched_describe"]}, "compiled_path": "target\\compiled\\dbt_eda_tools\\tests\\describe\\assert_data_describe_structure.sql", "compiled": true, "compiled_code": "WITH\ndescribe_dataframe AS (\n    \n\n    \n\n    \n    \n    \n    \n\n    \n\n    WITH\n    \n    dummy AS (SELECT 1)\n    \n        , \n    \n    \n    meta_data AS (\n        -- Need to explicitly cast the type before transposing the data\n        SELECT\n        column_name\n        , data_type\n        , COUNT(*) OVER ():: STRING AS nbr_of_columns\n        , CASE\n                \n                    \n                        WHEN DATA_TYPE IN ('VARCHAR', 'CHAR', 'CHARACTER', 'STRING', 'TEXT') THEN 'text'\n                    \n                \n                    \n                        WHEN DATA_TYPE IN ('DATE', 'DATETIME', 'TIMESTAMP', 'TIMESTAMP_LTZ', 'TIMESTAMP_NTZ', 'TIMESTAMP_TZ') THEN 'date'\n                    \n                \n                    \n                        WHEN DATA_TYPE IN ('NUMBER', 'DECIMAL', 'NUMERIC', 'INT', 'INTEGER', 'BIGINT', 'SMALLINT', 'FLOAT', 'FLOAT4', 'FLOAT8', 'DOUBLE', 'DOUBLE PRECISION', 'REAL', 'INT64', 'TINYINT', 'BYETEINT', 'BIGDECIMAL', 'FLOAT64') THEN 'numeric'\n                    \n                \n                    \n                        WHEN DATA_TYPE IN ('BOOLEAN', 'BOOL') THEN 'boolean'\n                    \n                \n                    \n                        WHEN DATA_TYPE IN ('TIME', 'NEEDSTOBEARRAY') THEN 'time'\n                    \n                \n                    \n                \n                    \n                \n                    \n                \n                    \n                \n        END AS data_type_input\n\n        \n            \n                \n                    , COUNT(CASE WHEN DATA_TYPE IN ('VARCHAR', 'CHAR', 'CHARACTER', 'STRING', 'TEXT') THEN 1 END) OVER ():: STRING AS nbr_of_text_columns\n                \n            \n        \n            \n                \n                    , COUNT(CASE WHEN DATA_TYPE IN ('DATE', 'DATETIME', 'TIMESTAMP', 'TIMESTAMP_LTZ', 'TIMESTAMP_NTZ', 'TIMESTAMP_TZ') THEN 1 END) OVER ():: STRING AS nbr_of_date_columns\n                \n            \n        \n            \n                \n                    , COUNT(CASE WHEN DATA_TYPE IN ('NUMBER', 'DECIMAL', 'NUMERIC', 'INT', 'INTEGER', 'BIGINT', 'SMALLINT', 'FLOAT', 'FLOAT4', 'FLOAT8', 'DOUBLE', 'DOUBLE PRECISION', 'REAL', 'INT64', 'TINYINT', 'BYETEINT', 'BIGDECIMAL', 'FLOAT64') THEN 1 END) OVER ():: STRING AS nbr_of_numeric_columns\n                \n            \n        \n            \n                \n                    , COUNT(CASE WHEN DATA_TYPE IN ('BOOLEAN', 'BOOL') THEN 1 END) OVER ():: STRING AS nbr_of_boolean_columns\n                \n            \n        \n            \n                \n                    , COUNT(CASE WHEN DATA_TYPE IN ('TIME', 'NEEDSTOBEARRAY') THEN 1 END) OVER ():: STRING AS nbr_of_time_columns\n                \n            \n        \n            \n        \n            \n        \n            \n        \n            \n        \n\n        FROM INFORMATION_SCHEMA.TABLES t\n        INNER JOIN INFORMATION_SCHEMA.COLUMNS c ON\n                c.table_schema = t.table_schema AND c.table_name = t.table_name\n                WHERE t.table_name = 'data_generator_enriched_describe'\n    )\n\n\n        \n        , \n\n    \n\n        meta_data_unique AS (\n            SELECT\n                    DISTINCT\n                    'dataset' AS identifier\n                    , '' AS detail\n                    , nbr_of_columns\n                    , nbr_of_text_columns\n                    , nbr_of_date_columns\n                    , nbr_of_numeric_columns\n                    , nbr_of_boolean_columns\n                    , nbr_of_time_columns\n                FROM meta_data\n        )\n        , dataset_info AS (\n            SELECT\n                    CASE LOWER(meta_data_key)\n                            WHEN 'nbr_of_columns' THEN 1\n                            WHEN 'nbr_of_text_columns' THEN 2\n                            WHEN 'nbr_of_date_columns' THEN 3\n                            WHEN 'nbr_of_numeric_columns' THEN 4\n                            WHEN 'nbr_of_boolean_columns' THEN 5\n                            WHEN 'nbr_of_time_columns' THEN 6\n                    END AS index_pos\n                    , meta_data_key\n                    , identifier\n                    , detail\n                    , CAST(meta_data_value AS STRING) AS meta_data_value\n                FROM meta_data_unique\n                UNPIVOT (meta_data_value FOR meta_data_key IN (nbr_of_columns, nbr_of_text_columns, nbr_of_date_columns, nbr_of_numeric_columns,nbr_of_boolean_columns,nbr_of_time_columns))\n        )\n\n    \n\n\n        \n        , \n\n    \n        rowcount_info AS (\n            SELECT\n                    0 AS index_pos\n                    , ('nbr_of_rows') AS meta_data_key\n                    , 'dataset' AS identifier\n                    , '' AS detail\n                    , CAST(COUNT(*) AS STRING) AS meta_data_value\n            FROM \"dbt_db\".\"dbt_schema\".\"data_generator_enriched_describe\"\n            GROUP BY ALL\n        )\n    \n\n\n        \n        , \n\n    \n        column_info AS (\n            SELECT\n                20 + ROW_NUMBER() OVER (ORDER BY data_type) AS index_pos\n                , column_name AS meta_data_key\n                , 'column' AS identifier\n                , '' AS detail\n                , CAST(data_type AS STRING) AS meta_data_value\n            FROM meta_data\n        )\n    \n\n\n        \n        , \n    \n    assembled_result AS (\n        \n            SELECT\n                \n                     index_pos\n                \n                    , meta_data_key\n                \n                    , meta_data_value\n                \n                    , identifier\n                \n                    , detail\n                \n            FROM\n            dataset_info\n            UNION ALL\n        \n            SELECT\n                \n                     index_pos\n                \n                    , meta_data_key\n                \n                    , meta_data_value\n                \n                    , identifier\n                \n                    , detail\n                \n            FROM\n            rowcount_info\n            UNION ALL\n        \n            SELECT\n                \n                     index_pos\n                \n                    , meta_data_key\n                \n                    , meta_data_value\n                \n                    , identifier\n                \n                    , detail\n                \n            FROM\n            column_info\n            \n        \n    )\n\n\n    \n    \n        , \n\n    \n    \n\n    \n    \n    \n\n    \n    \n    \n        \n        \n\n            \n\n\n            column_detail_str_length AS (\n                SELECT\n                    1\n                    \n                            , MIN(str_length) AS min\n                            , MAX(str_length) AS max\n                            \n                                , ROUND(AVG(str_length),4) AS avg\n                                \n                                , ROUND(APPROX_QUANTILE(str_length, 0.25),4) AS percentile_25\n                                , ROUND(APPROX_QUANTILE(str_length, 0.5),4) AS percentile_50\n                                , ROUND(APPROX_QUANTILE(str_length, 0.75),4) AS percentile_75\n                                \n                            \n                    \n\n\n                    , SUM(COUNT(str_length)) OVER () AS cnt_total\n                    , SUM(COUNT(DISTINCT str_length)) OVER () AS cnt_unique\n                    , COUNT_IF(str_length IS NULL) AS cnt_null\n\n                FROM \"dbt_db\".\"dbt_schema\".\"data_generator_enriched_describe\"\n\n                GROUP BY ALL\n\n                \n\n            ) \n        \n\n        \n        , column_detail_info_numeric AS (\n            \n            \n            SELECT\n                'str_length' AS column_name\n                , JSON_OBJECT(\n                    'column_name', 'str_length'\n                    , 'count' , MIN(cnt_total)\n                    , 'count_null' , MAX(cnt_null) -- needs to be max not min otherwise always zero\n                    \n                        , 'min' , MIN(min)\n                        , 'max' , MIN(max)\n                        \n                            , 'mean' , MIN(avg)\n                            , 'percentile_25' , MIN(percentile_25)\n                            , 'percentile_50' , MIN(percentile_50)\n                            , 'percentile_75' , MIN(percentile_75)\n                        \n                    \n                ) AS detail\n            FROM column_detail_str_length\n            \n        \n\n        )\n    \n\n\n    \n        , \n\n    \n    \n\n    \n    \n    \n\n    \n    \n    \n        \n        \n\n            \n\n\n            column_detail_country AS (\n                SELECT\n                    1\n                    \n                        , country\n                        , COUNT(*) AS cnt\n                    \n\n\n                    , SUM(COUNT(country)) OVER () AS cnt_total\n                    , SUM(COUNT(DISTINCT country)) OVER () AS cnt_unique\n                    , COUNT_IF(country IS NULL) AS cnt_null\n\n                FROM \"dbt_db\".\"dbt_schema\".\"data_generator_enriched_describe\"\n\n                GROUP BY ALL\n\n                \n                    ORDER by cnt_null DESC, cnt DESC\n                    LIMIT 10\n                \n\n            ) ,\n        \n\n            \n\n\n            column_detail_company_name AS (\n                SELECT\n                    1\n                    \n                        , company_name\n                        , COUNT(*) AS cnt\n                    \n\n\n                    , SUM(COUNT(company_name)) OVER () AS cnt_total\n                    , SUM(COUNT(DISTINCT company_name)) OVER () AS cnt_unique\n                    , COUNT_IF(company_name IS NULL) AS cnt_null\n\n                FROM \"dbt_db\".\"dbt_schema\".\"data_generator_enriched_describe\"\n\n                GROUP BY ALL\n\n                \n                    ORDER by cnt_null DESC, cnt DESC\n                    LIMIT 10\n                \n\n            ) \n        \n\n        \n        , column_detail_info_text AS (\n            \n            \n            SELECT\n                'country' AS column_name\n                , JSON_OBJECT(\n                    'column_name', 'country'\n                    , 'count' , MIN(cnt_total)\n                    , 'count_null' , MAX(cnt_null) -- needs to be max not min otherwise always zero\n                    \n                        \n                            , 'unique_values' , MIN(cnt_unique)\n                        \n                        , 'value_counts_top10',\n                            ARRAY_AGG\n                                (JSON_OBJECT(\n                                    CAST(COALESCE(country,'NULL') AS STRING)\n                                , cnt)\n                                )\n                    \n                ) AS detail\n            FROM column_detail_country\n            UNION ALL\n        \n            \n            SELECT\n                'company_name' AS column_name\n                , JSON_OBJECT(\n                    'column_name', 'company_name'\n                    , 'count' , MIN(cnt_total)\n                    , 'count_null' , MAX(cnt_null) -- needs to be max not min otherwise always zero\n                    \n                        \n                            , 'unique_values' , MIN(cnt_unique)\n                        \n                        , 'value_counts_top10',\n                            ARRAY_AGG\n                                (JSON_OBJECT(\n                                    CAST(COALESCE(company_name,'NULL') AS STRING)\n                                , cnt)\n                                )\n                    \n                ) AS detail\n            FROM column_detail_company_name\n            \n        \n\n        )\n    \n\n\n    \n        , \n\n    \n    \n\n    \n    \n    \n\n    \n    \n    \n        \n        \n\n            \n                \n            \n\n\n            column_detail_date_day AS (\n                SELECT\n                    1\n                    \n                            , MIN(date_day) AS min\n                            , MAX(date_day) AS max\n                            \n                                , MIN('Daily') AS estimated_granularity\n                                , MIN(1.0) AS estimated_granularity_confidence\n                            \n                    \n\n\n                    , SUM(COUNT(date_day)) OVER () AS cnt_total\n                    , SUM(COUNT(DISTINCT date_day)) OVER () AS cnt_unique\n                    , COUNT_IF(date_day IS NULL) AS cnt_null\n\n                FROM \"dbt_db\".\"dbt_schema\".\"data_generator_enriched_describe\"\n\n                GROUP BY ALL\n\n                \n\n            ) \n        \n\n        \n        , column_detail_info_date AS (\n            \n            \n            SELECT\n                'date_day' AS column_name\n                , JSON_OBJECT(\n                    'column_name', 'date_day'\n                    , 'count' , MIN(cnt_total)\n                    , 'count_null' , MAX(cnt_null) -- needs to be max not min otherwise always zero\n                    \n                        , 'min' , MIN(min)\n                        , 'max' , MIN(max)\n                        \n                            , 'estimated_granularity' , MIN(estimated_granularity)\n                            , 'estimated_granularity_confidence' , MIN(estimated_granularity_confidence)\n                        \n                    \n                ) AS detail\n            FROM column_detail_date_day\n            \n        \n\n        )\n    \n\n\n    \n        , \n\n    \n    \n\n    \n    \n    \n\n    \n    \n    \n        \n        \n\n            \n\n\n            column_detail_is_short_string AS (\n                SELECT\n                    1\n                    \n                        , is_short_string\n                        , COUNT(*) AS cnt\n                    \n\n\n                    , SUM(COUNT(is_short_string)) OVER () AS cnt_total\n                    , SUM(COUNT(DISTINCT is_short_string)) OVER () AS cnt_unique\n                    , COUNT_IF(is_short_string IS NULL) AS cnt_null\n\n                FROM \"dbt_db\".\"dbt_schema\".\"data_generator_enriched_describe\"\n\n                GROUP BY ALL\n\n                \n\n            ) \n        \n\n        \n        , column_detail_info_boolean AS (\n            \n            \n            SELECT\n                'is_short_string' AS column_name\n                , JSON_OBJECT(\n                    'column_name', 'is_short_string'\n                    , 'count' , MIN(cnt_total)\n                    , 'count_null' , MAX(cnt_null) -- needs to be max not min otherwise always zero\n                    \n                        \n                        , 'value_counts_top10',\n                            ARRAY_AGG\n                                (JSON_OBJECT(\n                                    CAST(COALESCE(is_short_string,false) AS STRING)\n                                , cnt)\n                                )\n                    \n                ) AS detail\n            FROM column_detail_is_short_string\n            \n        \n\n        )\n    \n\n\n    \n\n    \n        \n\n\n\n\n\n    SELECT\n        assembed_result.meta_data_key\n        , assembed_result.meta_data_value\n        , assembed_result.identifier\n        , COALESCE(text_detail.detail, numeric_detail.detail,date_detail.detail, boolean_detail.detail) AS detail\n    FROM assembled_result AS assembed_result\n    LEFT JOIN column_detail_info_text AS text_detail\n    ON assembed_result.meta_data_key = text_detail.column_name\n    LEFT JOIN column_detail_info_numeric AS numeric_detail\n    ON assembed_result.meta_data_key = numeric_detail.column_name\n    LEFT JOIN column_detail_info_date AS date_detail\n    ON assembed_result.meta_data_key = date_detail.column_name\n    LEFT JOIN column_detail_info_boolean AS boolean_detail\n    ON assembed_result.meta_data_key = boolean_detail.column_name\n\n    ORDER BY index_pos ASC\n\n\n    \n\n\n)\nSELECT * FROM describe_dataframe\nWHERE\n    1=1\n    AND\n    (\n        (LOWER(meta_data_key) = 'nbr_of_columns' AND meta_data_value <> '5')\n        -- Rows = 54800\n        OR (LOWER(meta_data_key) = 'nbr_of_rows' AND meta_data_value <> '54800')\n        -- Date Columns = 1\n        OR (LOWER(meta_data_key) = 'nbr_of_date_columns' AND meta_data_value <> '1')\n        -- Time Columns = 1\n        OR (LOWER(meta_data_key) = 'nbr_of_time_columns' AND meta_data_value <> '0')\n        -- Boolean Columns = 1\n        OR (LOWER(meta_data_key) = 'nbr_of_boolean_columns' AND meta_data_value <> '1')\n        -- Text Columns = 1\n        OR (LOWER(meta_data_key) = 'nbr_of_text_columns' AND meta_data_value <> '2')\n        -- Numeric Columns = 1\n        OR (LOWER(meta_data_key) = 'nbr_of_numeric_columns' AND meta_data_value <> '1')\n    )", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "test.dbt_eda_tools.assert_missing_day": {"database": "dbt_db", "schema": "dbt_schema_dbt_test__audit", "name": "assert_missing_day", "resource_type": "test", "package_name": "dbt_eda_tools", "path": "get_missing_dates\\assert_missing_day.sql", "original_file_path": "tests\\get_missing_dates\\assert_missing_day.sql", "unique_id": "test.dbt_eda_tools.assert_missing_day", "fqn": ["dbt_eda_tools", "get_missing_dates", "assert_missing_day"], "alias": "assert_missing_day", "checksum": {"name": "sha256", "checksum": "7e6190acd5b931ae9e463e7bbc288720e389c19e45f2dd036e84668ee61116d6"}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"enabled": true}, "created_at": 1728209050.822146, "relation_name": null, "raw_code": "WITH\r\nmissing_values AS (\r\n    {{dbt_eda_tools.get_missing_date('missing_day','date_day', [], {}, 'DAY')}}\r\n)\r\n, row_count_missing_values AS (\r\n    SELECT COUNT(missing_day) AS row_count\r\n    FROM missing_values\r\n)\r\nSELECT * FROM row_count_missing_values WHERE row_count <> 1", "language": "sql", "refs": [{"name": "missing_day", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_eda_tools.get_missing_date"], "nodes": ["model.dbt_eda_tools.missing_day"]}, "compiled_path": "target\\compiled\\dbt_eda_tools\\tests\\get_missing_dates\\assert_missing_day.sql", "compiled": true, "compiled_code": "WITH\nmissing_values AS (\n    \n  WITH\n  unique_dates AS (\n    SELECT\n      DISTINCT\n          date_day\n          \n    FROM \"dbt_db\".\"dbt_schema\".\"missing_day\"\n    \n  )\n  , dates_lagged AS (\n    SELECT *\n    , LAG(date_day,1) OVER (\n          ORDER BY\n          \n          date_day DESC) AS next_date_day\n    FROM unique_dates\n  )\n  SELECT\n      date_day\n      \n      , next_date_day\n      , ABS(\n        (date_diff('DAY', next_date_day::timestamp, date_day::timestamp ))\n    ) AS missing_day\n  FROM dates_lagged\n  WHERE \n        (date_diff('DAY', next_date_day::timestamp, date_day::timestamp ))\n     < -1\n\n)\n, row_count_missing_values AS (\n    SELECT COUNT(missing_day) AS row_count\n    FROM missing_values\n)\nSELECT * FROM row_count_missing_values WHERE row_count <> 1", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "test.dbt_eda_tools.assert_missing_day_by_company": {"database": "dbt_db", "schema": "dbt_schema_dbt_test__audit", "name": "assert_missing_day_by_company", "resource_type": "test", "package_name": "dbt_eda_tools", "path": "get_missing_dates\\assert_missing_day_by_company.sql", "original_file_path": "tests\\get_missing_dates\\assert_missing_day_by_company.sql", "unique_id": "test.dbt_eda_tools.assert_missing_day_by_company", "fqn": ["dbt_eda_tools", "get_missing_dates", "assert_missing_day_by_company"], "alias": "assert_missing_day_by_company", "checksum": {"name": "sha256", "checksum": "7dacadd8409fb748a3f4159c9e92ef4d8f1b8d3a77af8adc175caae59a2a36f7"}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"enabled": true}, "created_at": 1728209050.8473399, "relation_name": null, "raw_code": "WITH\r\nmissing_values AS (\r\n    {{dbt_eda_tools.get_missing_date('missing_day','date_day', ['company_name'], {}, 'DAY')}}\r\n)\r\n, row_count_missing_values AS (\r\n    SELECT COUNT(missing_day) AS row_count\r\n    FROM missing_values\r\n)\r\nSELECT * FROM row_count_missing_values WHERE row_count <> 6", "language": "sql", "refs": [{"name": "missing_day", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_eda_tools.get_missing_date"], "nodes": ["model.dbt_eda_tools.missing_day"]}, "compiled_path": "target\\compiled\\dbt_eda_tools\\tests\\get_missing_dates\\assert_missing_day_by_company.sql", "compiled": true, "compiled_code": "WITH\nmissing_values AS (\n    \n  WITH\n  unique_dates AS (\n    SELECT\n      DISTINCT\n          date_day\n          \n              , (company_name) AS company_name\n          \n    FROM \"dbt_db\".\"dbt_schema\".\"missing_day\"\n    \n  )\n  , dates_lagged AS (\n    SELECT *\n    , LAG(date_day,1) OVER (\n          ORDER BY\n          \n              (company_name) DESC,\n          \n          date_day DESC) AS next_date_day\n    FROM unique_dates\n  )\n  SELECT\n      date_day\n      \n          , (company_name) AS company_name\n      \n      , next_date_day\n      , ABS(\n        (date_diff('DAY', next_date_day::timestamp, date_day::timestamp ))\n    ) AS missing_day\n  FROM dates_lagged\n  WHERE \n        (date_diff('DAY', next_date_day::timestamp, date_day::timestamp ))\n     < -1\n\n)\n, row_count_missing_values AS (\n    SELECT COUNT(missing_day) AS row_count\n    FROM missing_values\n)\nSELECT * FROM row_count_missing_values WHERE row_count <> 6", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "test.dbt_eda_tools.assert_missing_day_by_country": {"database": "dbt_db", "schema": "dbt_schema_dbt_test__audit", "name": "assert_missing_day_by_country", "resource_type": "test", "package_name": "dbt_eda_tools", "path": "get_missing_dates\\assert_missing_day_by_country.sql", "original_file_path": "tests\\get_missing_dates\\assert_missing_day_by_country.sql", "unique_id": "test.dbt_eda_tools.assert_missing_day_by_country", "fqn": ["dbt_eda_tools", "get_missing_dates", "assert_missing_day_by_country"], "alias": "assert_missing_day_by_country", "checksum": {"name": "sha256", "checksum": "bc19c30a1ffe7c8c6b20fada9b7f561dbfcb1df50f4f2a2a166839a7093e3c11"}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"enabled": true}, "created_at": 1728209050.8739219, "relation_name": null, "raw_code": "WITH\r\nmissing_values AS (\r\n    {{dbt_eda_tools.get_missing_date('missing_day','date_day', ['country'], {}, 'DAY')}}\r\n)\r\n, row_count_missing_values AS (\r\n    SELECT COUNT(missing_day) AS row_count\r\n    FROM missing_values\r\n)\r\nSELECT * FROM row_count_missing_values WHERE row_count <> 6", "language": "sql", "refs": [{"name": "missing_day", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_eda_tools.get_missing_date"], "nodes": ["model.dbt_eda_tools.missing_day"]}, "compiled_path": "target\\compiled\\dbt_eda_tools\\tests\\get_missing_dates\\assert_missing_day_by_country.sql", "compiled": true, "compiled_code": "WITH\nmissing_values AS (\n    \n  WITH\n  unique_dates AS (\n    SELECT\n      DISTINCT\n          date_day\n          \n              , (country) AS country\n          \n    FROM \"dbt_db\".\"dbt_schema\".\"missing_day\"\n    \n  )\n  , dates_lagged AS (\n    SELECT *\n    , LAG(date_day,1) OVER (\n          ORDER BY\n          \n              (country) DESC,\n          \n          date_day DESC) AS next_date_day\n    FROM unique_dates\n  )\n  SELECT\n      date_day\n      \n          , (country) AS country\n      \n      , next_date_day\n      , ABS(\n        (date_diff('DAY', next_date_day::timestamp, date_day::timestamp ))\n    ) AS missing_day\n  FROM dates_lagged\n  WHERE \n        (date_diff('DAY', next_date_day::timestamp, date_day::timestamp ))\n     < -1\n\n)\n, row_count_missing_values AS (\n    SELECT COUNT(missing_day) AS row_count\n    FROM missing_values\n)\nSELECT * FROM row_count_missing_values WHERE row_count <> 6", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "test.dbt_eda_tools.assert_missing_day_by_country_company": {"database": "dbt_db", "schema": "dbt_schema_dbt_test__audit", "name": "assert_missing_day_by_country_company", "resource_type": "test", "package_name": "dbt_eda_tools", "path": "get_missing_dates\\assert_missing_day_by_country_company.sql", "original_file_path": "tests\\get_missing_dates\\assert_missing_day_by_country_company.sql", "unique_id": "test.dbt_eda_tools.assert_missing_day_by_country_company", "fqn": ["dbt_eda_tools", "get_missing_dates", "assert_missing_day_by_country_company"], "alias": "assert_missing_day_by_country_company", "checksum": {"name": "sha256", "checksum": "a567cd6e9772ad2af4aec50fdd5191cc01c0262d1216a73a1ca1724e04c632ae"}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"enabled": true}, "created_at": 1728209050.8945365, "relation_name": null, "raw_code": "WITH\r\nmissing_values AS (\r\n    {{dbt_eda_tools.get_missing_date('missing_day','date_day', ['country','company_name'], {}, 'DAY')}}\r\n)\r\n, row_count_missing_values AS (\r\n    SELECT COUNT(missing_day) AS row_count\r\n    FROM missing_values\r\n)\r\nSELECT * FROM row_count_missing_values WHERE row_count <> 35", "language": "sql", "refs": [{"name": "missing_day", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_eda_tools.get_missing_date"], "nodes": ["model.dbt_eda_tools.missing_day"]}, "compiled_path": "target\\compiled\\dbt_eda_tools\\tests\\get_missing_dates\\assert_missing_day_by_country_company.sql", "compiled": true, "compiled_code": "WITH\nmissing_values AS (\n    \n  WITH\n  unique_dates AS (\n    SELECT\n      DISTINCT\n          date_day\n          \n              , (country) AS country\n          \n              , (company_name) AS company_name\n          \n    FROM \"dbt_db\".\"dbt_schema\".\"missing_day\"\n    \n  )\n  , dates_lagged AS (\n    SELECT *\n    , LAG(date_day,1) OVER (\n          ORDER BY\n          \n              (country) DESC,\n          \n              (company_name) DESC,\n          \n          date_day DESC) AS next_date_day\n    FROM unique_dates\n  )\n  SELECT\n      date_day\n      \n          , (country) AS country\n      \n          , (company_name) AS company_name\n      \n      , next_date_day\n      , ABS(\n        (date_diff('DAY', next_date_day::timestamp, date_day::timestamp ))\n    ) AS missing_day\n  FROM dates_lagged\n  WHERE \n        (date_diff('DAY', next_date_day::timestamp, date_day::timestamp ))\n     < -1\n\n)\n, row_count_missing_values AS (\n    SELECT COUNT(missing_day) AS row_count\n    FROM missing_values\n)\nSELECT * FROM row_count_missing_values WHERE row_count <> 35", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "test.dbt_eda_tools.assert_missing_day_by_country_company_filtered_both": {"database": "dbt_db", "schema": "dbt_schema_dbt_test__audit", "name": "assert_missing_day_by_country_company_filtered_both", "resource_type": "test", "package_name": "dbt_eda_tools", "path": "get_missing_dates\\assert_missing_day_by_country_company_filtered_both.sql", "original_file_path": "tests\\get_missing_dates\\assert_missing_day_by_country_company_filtered_both.sql", "unique_id": "test.dbt_eda_tools.assert_missing_day_by_country_company_filtered_both", "fqn": ["dbt_eda_tools", "get_missing_dates", "assert_missing_day_by_country_company_filtered_both"], "alias": "assert_missing_day_by_country_company_filtered_both", "checksum": {"name": "sha256", "checksum": "4e7bc91c65a6e321d881e55d0b905f57ba03c3b90daca0fc8d349950216e14df"}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"enabled": true}, "created_at": 1728209050.9260378, "relation_name": null, "raw_code": "WITH\r\nmissing_values AS (\r\n    {{\r\n        dbt_eda_tools.get_missing_date(\r\n            'missing_day'\r\n            ,'date_day'\r\n            , ['country','company_name']\r\n            , {\r\n                'country': ('DE')\r\n                , 'company_name': 'A'\r\n            }\r\n            , 'DAY'\r\n        )\r\n    }}\r\n)\r\n, row_count_missing_values AS (\r\n    SELECT COUNT(missing_day) AS row_count\r\n    FROM missing_values\r\n)\r\nSELECT * FROM row_count_missing_values WHERE row_count <> 2", "language": "sql", "refs": [{"name": "missing_day", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_eda_tools.get_missing_date"], "nodes": ["model.dbt_eda_tools.missing_day"]}, "compiled_path": "target\\compiled\\dbt_eda_tools\\tests\\get_missing_dates\\assert_missing_day_by_country_company_filtered_both.sql", "compiled": true, "compiled_code": "WITH\nmissing_values AS (\n    \n  WITH\n  unique_dates AS (\n    SELECT\n      DISTINCT\n          date_day\n          \n              , (country) AS country\n          \n              , (company_name) AS company_name\n          \n    FROM \"dbt_db\".\"dbt_schema\".\"missing_day\"\n    \n      \n          \n            WHERE 1=1\n          \n\n          \n          \n            \n              AND  country = 'DE'\n            \n\n          \n      \n          \n\n          \n          \n            \n              AND  company_name = 'A'\n            \n\n          \n      \n    \n  )\n  , dates_lagged AS (\n    SELECT *\n    , LAG(date_day,1) OVER (\n          ORDER BY\n          \n              (country) DESC,\n          \n              (company_name) DESC,\n          \n          date_day DESC) AS next_date_day\n    FROM unique_dates\n  )\n  SELECT\n      date_day\n      \n          , (country) AS country\n      \n          , (company_name) AS company_name\n      \n      , next_date_day\n      , ABS(\n        (date_diff('DAY', next_date_day::timestamp, date_day::timestamp ))\n    ) AS missing_day\n  FROM dates_lagged\n  WHERE \n        (date_diff('DAY', next_date_day::timestamp, date_day::timestamp ))\n     < -1\n\n)\n, row_count_missing_values AS (\n    SELECT COUNT(missing_day) AS row_count\n    FROM missing_values\n)\nSELECT * FROM row_count_missing_values WHERE row_count <> 2", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "test.dbt_eda_tools.assert_missing_day_by_country_company_filtered_country": {"database": "dbt_db", "schema": "dbt_schema_dbt_test__audit", "name": "assert_missing_day_by_country_company_filtered_country", "resource_type": "test", "package_name": "dbt_eda_tools", "path": "get_missing_dates\\assert_missing_day_by_country_company_filtered_country.sql", "original_file_path": "tests\\get_missing_dates\\assert_missing_day_by_country_company_filtered_country.sql", "unique_id": "test.dbt_eda_tools.assert_missing_day_by_country_company_filtered_country", "fqn": ["dbt_eda_tools", "get_missing_dates", "assert_missing_day_by_country_company_filtered_country"], "alias": "assert_missing_day_by_country_company_filtered_country", "checksum": {"name": "sha256", "checksum": "7326cf27d073300abc9b2f69f6b5daececdcb953fb985549f4530e9a642be7bd"}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"enabled": true}, "created_at": 1728209050.9511309, "relation_name": null, "raw_code": "WITH\r\nmissing_values AS (\r\n    {{\r\n        dbt_eda_tools.get_missing_date(\r\n            'missing_day'\r\n            ,'date_day'\r\n            , ['country','company_name']\r\n            , {\r\n                'country': ('DE')\r\n            }\r\n            , 'DAY'\r\n        )\r\n    }}\r\n)\r\n, row_count_missing_values AS (\r\n    SELECT COUNT(missing_day) AS row_count\r\n    FROM missing_values\r\n)\r\nSELECT * FROM row_count_missing_values WHERE row_count <> 10", "language": "sql", "refs": [{"name": "missing_day", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_eda_tools.get_missing_date"], "nodes": ["model.dbt_eda_tools.missing_day"]}, "compiled_path": "target\\compiled\\dbt_eda_tools\\tests\\get_missing_dates\\assert_missing_day_by_country_company_filtered_country.sql", "compiled": true, "compiled_code": "WITH\nmissing_values AS (\n    \n  WITH\n  unique_dates AS (\n    SELECT\n      DISTINCT\n          date_day\n          \n              , (country) AS country\n          \n              , (company_name) AS company_name\n          \n    FROM \"dbt_db\".\"dbt_schema\".\"missing_day\"\n    \n      \n          \n            WHERE 1=1\n          \n\n          \n          \n            \n              AND  country = 'DE'\n            \n\n          \n      \n    \n  )\n  , dates_lagged AS (\n    SELECT *\n    , LAG(date_day,1) OVER (\n          ORDER BY\n          \n              (country) DESC,\n          \n              (company_name) DESC,\n          \n          date_day DESC) AS next_date_day\n    FROM unique_dates\n  )\n  SELECT\n      date_day\n      \n          , (country) AS country\n      \n          , (company_name) AS company_name\n      \n      , next_date_day\n      , ABS(\n        (date_diff('DAY', next_date_day::timestamp, date_day::timestamp ))\n    ) AS missing_day\n  FROM dates_lagged\n  WHERE \n        (date_diff('DAY', next_date_day::timestamp, date_day::timestamp ))\n     < -1\n\n)\n, row_count_missing_values AS (\n    SELECT COUNT(missing_day) AS row_count\n    FROM missing_values\n)\nSELECT * FROM row_count_missing_values WHERE row_count <> 10", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "test.dbt_eda_tools.assert_missing_day_by_country_company_numeric_filter": {"database": "dbt_db", "schema": "dbt_schema_dbt_test__audit", "name": "assert_missing_day_by_country_company_numeric_filter", "resource_type": "test", "package_name": "dbt_eda_tools", "path": "get_missing_dates\\assert_missing_day_by_country_company_numeric_filter.sql", "original_file_path": "tests\\get_missing_dates\\assert_missing_day_by_country_company_numeric_filter.sql", "unique_id": "test.dbt_eda_tools.assert_missing_day_by_country_company_numeric_filter", "fqn": ["dbt_eda_tools", "get_missing_dates", "assert_missing_day_by_country_company_numeric_filter"], "alias": "assert_missing_day_by_country_company_numeric_filter", "checksum": {"name": "sha256", "checksum": "10919b8d436ee6e9151c4c3d55bbf861463d40d77cc0b53d3f74b7b5aead30bc"}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"enabled": true}, "created_at": 1728209050.9742498, "relation_name": null, "raw_code": "WITH\r\nmissing_values AS (\r\n    {{\r\n        dbt_eda_tools.get_missing_date(\r\n            'missing_day'\r\n            ,'date_day'\r\n            , ['country','company_name']\r\n            , {\r\n                'country': ('DE','US')\r\n                , 'company_name': ('GOG','A')\r\n                , 'str_length': '=3'\r\n            }\r\n            , 'DAY'\r\n        )\r\n    }}\r\n\r\n)\r\n, row_count_missing_values AS (\r\n    SELECT COUNT(missing_day) AS row_count\r\n    FROM missing_values\r\n)\r\n-- Only rows corresponding to company A are picked up as the str_length is set to 3\r\nSELECT * FROM row_count_missing_values WHERE row_count <> 3", "language": "sql", "refs": [{"name": "missing_day", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_eda_tools.get_missing_date"], "nodes": ["model.dbt_eda_tools.missing_day"]}, "compiled_path": "target\\compiled\\dbt_eda_tools\\tests\\get_missing_dates\\assert_missing_day_by_country_company_numeric_filter.sql", "compiled": true, "compiled_code": "WITH\nmissing_values AS (\n    \n  WITH\n  unique_dates AS (\n    SELECT\n      DISTINCT\n          date_day\n          \n              , (country) AS country\n          \n              , (company_name) AS company_name\n          \n    FROM \"dbt_db\".\"dbt_schema\".\"missing_day\"\n    \n      \n          \n            WHERE 1=1\n          \n\n          \n          \n            AND country IN ('DE', 'US')\n          \n      \n          \n\n          \n          \n            AND company_name IN ('GOG', 'A')\n          \n      \n          \n\n          \n          \n            \n              AND  str_length =3\n            \n\n          \n      \n    \n  )\n  , dates_lagged AS (\n    SELECT *\n    , LAG(date_day,1) OVER (\n          ORDER BY\n          \n              (country) DESC,\n          \n              (company_name) DESC,\n          \n          date_day DESC) AS next_date_day\n    FROM unique_dates\n  )\n  SELECT\n      date_day\n      \n          , (country) AS country\n      \n          , (company_name) AS company_name\n      \n      , next_date_day\n      , ABS(\n        (date_diff('DAY', next_date_day::timestamp, date_day::timestamp ))\n    ) AS missing_day\n  FROM dates_lagged\n  WHERE \n        (date_diff('DAY', next_date_day::timestamp, date_day::timestamp ))\n     < -1\n\n\n)\n, row_count_missing_values AS (\n    SELECT COUNT(missing_day) AS row_count\n    FROM missing_values\n)\n-- Only rows corresponding to company A are picked up as the str_length is set to 3\nSELECT * FROM row_count_missing_values WHERE row_count <> 3", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "test.dbt_eda_tools.assert_missing_month": {"database": "dbt_db", "schema": "dbt_schema_dbt_test__audit", "name": "assert_missing_month", "resource_type": "test", "package_name": "dbt_eda_tools", "path": "get_missing_dates\\assert_missing_month.sql", "original_file_path": "tests\\get_missing_dates\\assert_missing_month.sql", "unique_id": "test.dbt_eda_tools.assert_missing_month", "fqn": ["dbt_eda_tools", "get_missing_dates", "assert_missing_month"], "alias": "assert_missing_month", "checksum": {"name": "sha256", "checksum": "ffe8e5a1bbe3e20072c07d68b8b35c2738deb9721010ee712c2b6fc9d1dcca98"}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"enabled": true}, "created_at": 1728209051.0004578, "relation_name": null, "raw_code": "WITH\r\nmissing_values AS (\r\n    {{dbt_eda_tools.get_missing_date('missing_month','date_month', [], {}, 'MONTH')}}\r\n)\r\n, row_count_missing_values AS (\r\n    SELECT COUNT(missing_month) AS row_count\r\n    FROM missing_values\r\n)\r\nSELECT * FROM row_count_missing_values WHERE row_count <> 1", "language": "sql", "refs": [{"name": "missing_month", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_eda_tools.get_missing_date"], "nodes": ["model.dbt_eda_tools.missing_month"]}, "compiled_path": "target\\compiled\\dbt_eda_tools\\tests\\get_missing_dates\\assert_missing_month.sql", "compiled": true, "compiled_code": "WITH\nmissing_values AS (\n    \n  WITH\n  unique_dates AS (\n    SELECT\n      DISTINCT\n          date_month\n          \n    FROM \"dbt_db\".\"dbt_schema\".\"missing_month\"\n    \n  )\n  , dates_lagged AS (\n    SELECT *\n    , LAG(date_month,1) OVER (\n          ORDER BY\n          \n          date_month DESC) AS next_date_month\n    FROM unique_dates\n  )\n  SELECT\n      date_month\n      \n      , next_date_month\n      , ABS(\n        (date_diff('MONTH', next_date_month::timestamp, date_month::timestamp ))\n    ) AS missing_month\n  FROM dates_lagged\n  WHERE \n        (date_diff('MONTH', next_date_month::timestamp, date_month::timestamp ))\n     < -1\n\n)\n, row_count_missing_values AS (\n    SELECT COUNT(missing_month) AS row_count\n    FROM missing_values\n)\nSELECT * FROM row_count_missing_values WHERE row_count <> 1", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "test.dbt_eda_tools.assert_missing_month_by_days": {"database": "dbt_db", "schema": "dbt_schema_dbt_test__audit", "name": "assert_missing_month_by_days", "resource_type": "test", "package_name": "dbt_eda_tools", "path": "get_missing_dates\\assert_missing_month_by_days.sql", "original_file_path": "tests\\get_missing_dates\\assert_missing_month_by_days.sql", "unique_id": "test.dbt_eda_tools.assert_missing_month_by_days", "fqn": ["dbt_eda_tools", "get_missing_dates", "assert_missing_month_by_days"], "alias": "assert_missing_month_by_days", "checksum": {"name": "sha256", "checksum": "898ebb512b5e8b09f8a61bf29936a4c5cc066e71d0e6b75917ef57b4a5089ca7"}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"enabled": true}, "created_at": 1728209051.0240757, "relation_name": null, "raw_code": "WITH\r\nmissing_values AS (\r\n    {{dbt_eda_tools.get_missing_date('missing_month','date_month', [], {}, 'DAY')}}\r\n)\r\n, row_count_missing_values AS (\r\n    SELECT COUNT(missing_day) AS row_count\r\n    FROM missing_values\r\n)\r\nSELECT * FROM row_count_missing_values WHERE row_count <> 67", "language": "sql", "refs": [{"name": "missing_month", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_eda_tools.get_missing_date"], "nodes": ["model.dbt_eda_tools.missing_month"]}, "compiled_path": "target\\compiled\\dbt_eda_tools\\tests\\get_missing_dates\\assert_missing_month_by_days.sql", "compiled": true, "compiled_code": "WITH\nmissing_values AS (\n    \n  WITH\n  unique_dates AS (\n    SELECT\n      DISTINCT\n          date_month\n          \n    FROM \"dbt_db\".\"dbt_schema\".\"missing_month\"\n    \n  )\n  , dates_lagged AS (\n    SELECT *\n    , LAG(date_month,1) OVER (\n          ORDER BY\n          \n          date_month DESC) AS next_date_month\n    FROM unique_dates\n  )\n  SELECT\n      date_month\n      \n      , next_date_month\n      , ABS(\n        (date_diff('DAY', next_date_month::timestamp, date_month::timestamp ))\n    ) AS missing_day\n  FROM dates_lagged\n  WHERE \n        (date_diff('DAY', next_date_month::timestamp, date_month::timestamp ))\n     < -1\n\n)\n, row_count_missing_values AS (\n    SELECT COUNT(missing_day) AS row_count\n    FROM missing_values\n)\nSELECT * FROM row_count_missing_values WHERE row_count <> 67", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "test.dbt_eda_tools.assert_missing_year": {"database": "dbt_db", "schema": "dbt_schema_dbt_test__audit", "name": "assert_missing_year", "resource_type": "test", "package_name": "dbt_eda_tools", "path": "get_missing_dates\\assert_missing_year.sql", "original_file_path": "tests\\get_missing_dates\\assert_missing_year.sql", "unique_id": "test.dbt_eda_tools.assert_missing_year", "fqn": ["dbt_eda_tools", "get_missing_dates", "assert_missing_year"], "alias": "assert_missing_year", "checksum": {"name": "sha256", "checksum": "d0fbcb5dd54b25e9faec6d252bc03abd61656e46ee8e4ac6644a3d074a0fd4bb"}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"enabled": true}, "created_at": 1728209051.0491908, "relation_name": null, "raw_code": "WITH\r\nmissing_values AS (\r\n    {{dbt_eda_tools.get_missing_date('missing_year','date_year', [], {}, 'YEAR')}}\r\n)\r\n, row_count_missing_values AS (\r\n    SELECT COUNT(missing_year) AS row_count\r\n    FROM missing_values\r\n)\r\nSELECT * FROM row_count_missing_values WHERE row_count <> 1", "language": "sql", "refs": [{"name": "missing_year", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_eda_tools.get_missing_date"], "nodes": ["model.dbt_eda_tools.missing_year"]}, "compiled_path": "target\\compiled\\dbt_eda_tools\\tests\\get_missing_dates\\assert_missing_year.sql", "compiled": true, "compiled_code": "WITH\nmissing_values AS (\n    \n  WITH\n  unique_dates AS (\n    SELECT\n      DISTINCT\n          date_year\n          \n    FROM \"dbt_db\".\"dbt_schema\".\"missing_year\"\n    \n  )\n  , dates_lagged AS (\n    SELECT *\n    , LAG(date_year,1) OVER (\n          ORDER BY\n          \n          date_year DESC) AS next_date_year\n    FROM unique_dates\n  )\n  SELECT\n      date_year\n      \n      , next_date_year\n      , ABS(\n        (date_diff('YEAR', next_date_year::timestamp, date_year::timestamp ))\n    ) AS missing_year\n  FROM dates_lagged\n  WHERE \n        (date_diff('YEAR', next_date_year::timestamp, date_year::timestamp ))\n     < -1\n\n)\n, row_count_missing_values AS (\n    SELECT COUNT(missing_year) AS row_count\n    FROM missing_values\n)\nSELECT * FROM row_count_missing_values WHERE row_count <> 1", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "test.dbt_eda_tools.assert_missing_year_by_month": {"database": "dbt_db", "schema": "dbt_schema_dbt_test__audit", "name": "assert_missing_year_by_month", "resource_type": "test", "package_name": "dbt_eda_tools", "path": "get_missing_dates\\assert_missing_year_by_month.sql", "original_file_path": "tests\\get_missing_dates\\assert_missing_year_by_month.sql", "unique_id": "test.dbt_eda_tools.assert_missing_year_by_month", "fqn": ["dbt_eda_tools", "get_missing_dates", "assert_missing_year_by_month"], "alias": "assert_missing_year_by_month", "checksum": {"name": "sha256", "checksum": "4865273dbe351fc5c169ac8e6bd198e2b85ed0c0f69940e499f9493a2a06f7b6"}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"enabled": true}, "created_at": 1728209051.0727904, "relation_name": null, "raw_code": "WITH\r\nmissing_values AS (\r\n    {{dbt_eda_tools.get_missing_date('missing_year','date_year', [], {}, 'MONTH')}}\r\n)\r\n, row_count_missing_values AS (\r\n    SELECT COUNT(missing_month) AS row_count\r\n    FROM missing_values\r\n)\r\nSELECT * FROM row_count_missing_values WHERE row_count <> 4", "language": "sql", "refs": [{"name": "missing_year", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_eda_tools.get_missing_date"], "nodes": ["model.dbt_eda_tools.missing_year"]}, "compiled_path": "target\\compiled\\dbt_eda_tools\\tests\\get_missing_dates\\assert_missing_year_by_month.sql", "compiled": true, "compiled_code": "WITH\nmissing_values AS (\n    \n  WITH\n  unique_dates AS (\n    SELECT\n      DISTINCT\n          date_year\n          \n    FROM \"dbt_db\".\"dbt_schema\".\"missing_year\"\n    \n  )\n  , dates_lagged AS (\n    SELECT *\n    , LAG(date_year,1) OVER (\n          ORDER BY\n          \n          date_year DESC) AS next_date_year\n    FROM unique_dates\n  )\n  SELECT\n      date_year\n      \n      , next_date_year\n      , ABS(\n        (date_diff('MONTH', next_date_year::timestamp, date_year::timestamp ))\n    ) AS missing_month\n  FROM dates_lagged\n  WHERE \n        (date_diff('MONTH', next_date_year::timestamp, date_year::timestamp ))\n     < -1\n\n)\n, row_count_missing_values AS (\n    SELECT COUNT(missing_month) AS row_count\n    FROM missing_values\n)\nSELECT * FROM row_count_missing_values WHERE row_count <> 4", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}}, "sources": {}, "macros": {"macro.dbt_eda_tools.assemble_data": {"name": "assemble_data", "resource_type": "macro", "package_name": "dbt_eda_tools", "path": "macros\\assemble_data.sql", "original_file_path": "macros\\assemble_data.sql", "unique_id": "macro.dbt_eda_tools.assemble_data", "macro_sql": "{% macro assemble_data(tables, columns, output_name, db_name) %}\r\n    {{ return(adapter.dispatch('assemble_data', 'dbt_eda_tools')(tables, columns, output_name, db_name)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_eda_tools.default__assemble_data"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205801.701325, "supported_languages": null}, "macro.dbt_eda_tools.default__assemble_data": {"name": "default__assemble_data", "resource_type": "macro", "package_name": "dbt_eda_tools", "path": "macros\\assemble_data.sql", "original_file_path": "macros\\assemble_data.sql", "unique_id": "macro.dbt_eda_tools.default__assemble_data", "macro_sql": "{% macro default__assemble_data(tables, columns, output_name, db_name) %}\r\n    {# cannot use dbt_utils.union_relations because it does not support CTEs in macro #}\r\n    {{output_name}} AS (\r\n        {% for tbl in tables %}\r\n            SELECT\r\n                {% for col in columns%}\r\n                    {% if not loop.first %},{% endif %} {{col}}\r\n                {% endfor %}\r\n            FROM\r\n            {{tbl}}\r\n            {% if not loop.last %}UNION ALL{% endif %}\r\n        {% endfor %}\r\n    )\r\n\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205801.7068682, "supported_languages": null}, "macro.dbt_eda_tools.describe": {"name": "describe", "resource_type": "macro", "package_name": "dbt_eda_tools", "path": "macros\\describe.sql", "original_file_path": "macros\\describe.sql", "unique_id": "macro.dbt_eda_tools.describe", "macro_sql": "{% macro describe(model_name, include=None) %}\r\n    {{ return(adapter.dispatch('describe', 'dbt_eda_tools')(model_name,include)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_eda_tools.default__describe"]}, "description": "The macro describes the structure of the dataset along with the column types. A loose and close implementation of pandas.describe().", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_eda_tools://macros\\schema.yml", "arguments": [{"name": "model_name", "type": "string", "description": "The DBT model which needs to be described."}], "created_at": 1728205812.0982006, "supported_languages": null}, "macro.dbt_eda_tools.default__describe": {"name": "default__describe", "resource_type": "macro", "package_name": "dbt_eda_tools", "path": "macros\\describe.sql", "original_file_path": "macros\\describe.sql", "unique_id": "macro.dbt_eda_tools.default__describe", "macro_sql": "{% macro default__describe(model_name,include) %}\r\n\r\n    {% set information_metadata = ((dbt_eda_tools.fetch_information_metadata(model_name)) | replace(\"'\", \"\")| replace(\"[\", \" \")| replace(\"]\", \" \")  | trim).split(',') %}\r\n\r\n    {% set full_path = information_metadata[0] | trim%}\r\n    {% set table_name = information_metadata[1] | trim %}\r\n    {% set db_name = dbt_eda_tools.fetch_db() | trim %}\r\n    {% set model_ref = ref(model_name) %}\r\n\r\n    {% set dtype_loop = ['numeric','text','date','boolean'] if include == 'all' or not include else include %}\r\n\r\n    WITH\r\n    {# fetch meta data about the table from the information schema #}\r\n    dummy AS (SELECT 1)\r\n    {% if not include %}\r\n        , {{dbt_eda_tools.fetch_meta_data('meta_data', full_path, db_name, table_name)}}\r\n        {# filter and prepare the meta data for the dataset #}\r\n        , {{dbt_eda_tools.filter_meta_data('dataset_info', 'dataset', 'meta_data', db_name)}}\r\n        {# Add the row count for the dataset #}\r\n        , {{dbt_eda_tools.filter_meta_data('rowcount_info', 'rowcount', model_ref, db_name)}}\r\n        {# filter and prepare the meta data for the column types #}\r\n        , {{dbt_eda_tools.filter_meta_data('column_info', 'column', 'meta_data', db_name)}}\r\n        {# Union the above results #}\r\n        , {{dbt_eda_tools.assemble_data(['dataset_info','rowcount_info','column_info'],['index_pos','meta_data_key','meta_data_value','identifier','detail'],'assembled_result', db_name)}}\r\n    {% endif %}\r\n    {% for dtype in dtype_loop %}\r\n        , {{dbt_eda_tools.fetch_column_metadata(model_name,'column_detail_info_'+dtype, dtype, full_path, db_name, table_name)}}\r\n    {% endfor %}\r\n\r\n    {% if not include %}\r\n        {{ dbt_eda_tools.summarize_dataset(db_name)}}\r\n    {% else %}\r\n        {{ dbt_eda_tools.summarize_dataset(db_name, dtype_loop)}}\r\n    {% endif %}\r\n\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_eda_tools.fetch_information_metadata", "macro.dbt_eda_tools.fetch_db", "macro.dbt_eda_tools.fetch_meta_data", "macro.dbt_eda_tools.filter_meta_data", "macro.dbt_eda_tools.assemble_data", "macro.dbt_eda_tools.fetch_column_metadata", "macro.dbt_eda_tools.summarize_dataset"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205801.7434876, "supported_languages": null}, "macro.dbt_eda_tools.estimated_granularity": {"name": "estimated_granularity", "resource_type": "macro", "package_name": "dbt_eda_tools", "path": "macros\\estimated_granularity.sql", "original_file_path": "macros\\estimated_granularity.sql", "unique_id": "macro.dbt_eda_tools.estimated_granularity", "macro_sql": "{% macro estimated_granularity(model_name, date_col) %}\r\n    {{ return(adapter.dispatch('estimated_granularity', 'dbt_eda_tools')(model_name, date_col)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_eda_tools.default__estimated_granularity"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205801.752018, "supported_languages": null}, "macro.dbt_eda_tools.default__estimated_granularity": {"name": "default__estimated_granularity", "resource_type": "macro", "package_name": "dbt_eda_tools", "path": "macros\\estimated_granularity.sql", "original_file_path": "macros\\estimated_granularity.sql", "unique_id": "macro.dbt_eda_tools.default__estimated_granularity", "macro_sql": "{% macro default__estimated_granularity(model_name, date_col) %}\r\n\r\n    SELECT\r\n        lag_bucketed AS estimated_granularity\r\n        , {{dbt_eda_tools.percent_of_total('count_total','sum',3)}} AS estimated_granularity_confidence\r\n        FROM (\r\n            SELECT\r\n                CASE\r\n                    WHEN lags_day BETWEEN 28 AND 31 THEN 'Monthly'\r\n                    WHEN lags_day BETWEEN 0 AND 3 THEN 'Daily'\r\n                    WHEN lags_day BETWEEN 363 AND 366 THEN 'Yearly'\r\n                    ELSE 'Unknown'\r\n                END AS lag_bucketed\r\n                , lags_day\r\n                , COUNT(*) AS count_total\r\n            FROM (\r\n                SELECT\r\n                    {{date_col}}\r\n                    , {{datediff( 'LAG(' + date_col +',1) OVER (ORDER BY '+date_col+')', date_col, 'day')}} AS lags_day\r\n                FROM (\r\n                    SELECT DISTINCT {{date_col}}\r\n                    FROM {{ ref(model_name) }}\r\n                )\r\n            )\r\n            WHERE lags_day IS NOT NULL\r\n            GROUP BY ALL\r\n        )\r\n    GROUP BY ALL\r\n    ORDER BY estimated_granularity_confidence DESC\r\n    LIMIT 1\r\n\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_eda_tools.percent_of_total", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205801.7636387, "supported_languages": null}, "macro.dbt_eda_tools.fetch_column_metadata": {"name": "fetch_column_metadata", "resource_type": "macro", "package_name": "dbt_eda_tools", "path": "macros\\fetch_column_metadata.sql", "original_file_path": "macros\\fetch_column_metadata.sql", "unique_id": "macro.dbt_eda_tools.fetch_column_metadata", "macro_sql": "{% macro fetch_column_metadata(model_name, output_name, data_type, full_path, db_name, table_name) %}\r\n    {{ return(adapter.dispatch('fetch_column_metadata', 'dbt_eda_tools')(model_name, output_name, data_type, full_path, db_name, table_name)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_eda_tools.default__fetch_column_metadata"]}, "description": "Fetch metadata about the columns in a given table, specifically the data type, count, top 10 unique count, and null count of each text column.\nThe macro first filters the metadata table to only include columns with a data type of 'text', then executes a SQL query to fetch the column metadata for those text columns. The results are then transformed into a JSON object containing the column name, count, unique count, and null count.\nOutput returned as CTE.", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_eda_tools://macros\\schema.yml", "arguments": [{"name": "model_name", "type": "string", "description": "The DBT model that the column metadata is being fetched for."}, {"name": "output_name", "type": "string", "description": "The name to use for the output CTE."}, {"name": "data_type", "type": "string", "description": "Fetch metadata for columns filtered by provided data_type"}, {"name": "full_path", "type": "string", "description": "The full path to the information_schema table being queried."}, {"name": "db_name", "type": "string", "description": "The name of the database, used to handle differences in SQL syntax between Snowflake and other databases."}, {"name": "table_name", "type": "string", "description": "The name of the table being queried."}], "created_at": 1728205812.101192, "supported_languages": null}, "macro.dbt_eda_tools.default__fetch_column_metadata": {"name": "default__fetch_column_metadata", "resource_type": "macro", "package_name": "dbt_eda_tools", "path": "macros\\fetch_column_metadata.sql", "original_file_path": "macros\\fetch_column_metadata.sql", "unique_id": "macro.dbt_eda_tools.default__fetch_column_metadata", "macro_sql": "{% macro default__fetch_column_metadata(model_name, output_name, data_type, full_path, db_name, table_name) %}\r\n\r\n    {# filter the metadata table to only include columns with a data type of 'text'. #}\r\n    {% set meta_data_query %}\r\n        WITH\r\n        {{dbt_eda_tools.fetch_meta_data('meta_data', full_path, db_name, table_name)}}\r\n        SELECT column_name FROM meta_data WHERE data_type_input = '{{data_type}}'\r\n    {% endset %}\r\n\r\n    {% set conditional_col_name = 'COLUMN_NAME' if db_name == 'snowflake' else 'column_name' %}\r\n    {% set conditional_estimated_granularity_name = 'ESTIMATED_GRANULARITY' if db_name == 'snowflake' else 'estimated_granularity' %}\r\n    {% set conditional_estimated_granularity_confidence_name = 'ESTIMATED_GRANULARITY_CONFIDENCE' if db_name == 'snowflake' else 'estimated_granularity_confidence' %}\r\n\r\n    {# execute the SQL and fetch the results #}\r\n    {% set results = dbt_utils.get_query_results_as_dict(meta_data_query) %}\r\n    {% if results[conditional_col_name] %}\r\n        {# construct the column detail results #}\r\n        {% for col_name in results[conditional_col_name]%}\r\n\r\n            {% if data_type == 'date'%}\r\n                {% set results_granularity = dbt_utils.get_query_results_as_dict(dbt_eda_tools.estimated_granularity(model_name, col_name) ) %}\r\n            {% endif %}\r\n\r\n\r\n            column_detail_{{col_name}} AS (\r\n                SELECT\r\n                    1\r\n                    {% if data_type in ('text','boolean') %}\r\n                        , {{col_name}}\r\n                        , COUNT(*) AS cnt\r\n                    {%  elif data_type in ('numeric','date') %}\r\n                            , MIN({{col_name}}) AS min\r\n                            , MAX({{col_name}}) AS max\r\n                            {%  if data_type == 'numeric' %}\r\n                                , ROUND(AVG({{col_name}}),4) AS avg\r\n                                {% if db_name == 'snowflake' %}\r\n                                , ROUND(TO_VARCHAR(APPROX_PERCENTILE({{col_name}}, 0.25),'999.999999'),4) AS percentile_25\r\n                                , ROUND(TO_VARCHAR(APPROX_PERCENTILE({{col_name}}, 0.5),'999.999999'),4) AS percentile_50\r\n                                , ROUND(TO_VARCHAR(APPROX_PERCENTILE({{col_name}}, 0.75),'999.999999'),4) AS percentile_75\r\n                                {% elif db_name == 'duckdb' %}\r\n                                , ROUND(APPROX_QUANTILE({{col_name}}, 0.25),4) AS percentile_25\r\n                                , ROUND(APPROX_QUANTILE({{col_name}}, 0.5),4) AS percentile_50\r\n                                , ROUND(APPROX_QUANTILE({{col_name}}, 0.75),4) AS percentile_75\r\n                                {% elif db_name == 'bigquery' %}\r\n                                , ROUND(APPROX_QUANTILES({{col_name}}, 100)[OFFSET(25)],4) AS percentile_25\r\n                                , ROUND(APPROX_QUANTILES({{col_name}}, 100)[OFFSET(50)],4) AS percentile_50\r\n                                , ROUND(APPROX_QUANTILES({{col_name}}, 100)[OFFSET(75)],4) AS percentile_75\r\n                                {% endif %}\r\n                            {%  elif data_type == 'date' %}\r\n                                , MIN('{{results_granularity[conditional_estimated_granularity_name][0]}}') AS estimated_granularity\r\n                                , MIN({{results_granularity[conditional_estimated_granularity_confidence_name][0]}}) AS estimated_granularity_confidence\r\n                            {% endif %}\r\n                    {% endif %}\r\n\r\n\r\n                    , SUM(COUNT({{col_name}})) OVER () AS cnt_total\r\n                    , SUM(COUNT(DISTINCT {{col_name}})) OVER () AS cnt_unique\r\n                    , {{'COUNT_IF' if db_name in ('snowflake','duckdb') else 'COUNTIF'}}({{col_name}} IS NULL) AS cnt_null\r\n\r\n                FROM {{ref(model_name)}}\r\n\r\n                GROUP BY ALL\r\n\r\n                {% if data_type == 'text' %}\r\n                    ORDER by cnt_null DESC, cnt DESC\r\n                    LIMIT 10\r\n                {% endif %}\r\n\r\n            ) {{ ',' if not loop.last else ''}}\r\n        {% endfor %}\r\n\r\n        {# turn the results into a json object #}\r\n        , {{output_name}} AS (\r\n            {% for col_name in results[conditional_col_name] %}\r\n            {% set non_null_json_key = \"COALESCE(\"+col_name+\",\"+(\"'NULL'\" if data_type != 'boolean' else 'false')+\")\" %}\r\n            SELECT\r\n                '{{col_name}}' AS column_name\r\n                , {{'OBJECT_CONSTRUCT' if db_name == 'snowflake' else 'JSON_OBJECT'}}(\r\n                    'column_name', '{{col_name}}'\r\n                    , 'count' , MIN(cnt_total)\r\n                    , 'count_null' , MAX(cnt_null) -- needs to be max not min otherwise always zero\r\n                    {% if data_type in ('text', 'boolean') %}\r\n                        {% if data_type == 'text' %}\r\n                            , 'unique_values' , MIN(cnt_unique)\r\n                        {% endif %}\r\n                        , 'value_counts_top10',\r\n                            {{'OBJECT_AGG' if db_name == 'snowflake' else 'ARRAY_AGG'}}\r\n                                ({{'' if db_name == 'snowflake' else 'JSON_OBJECT('}}\r\n                                    {{ (non_null_json_key+ ':: STRING') if db_name == 'snowflake' else 'CAST('+non_null_json_key+' AS STRING)' }}\r\n                                , cnt)\r\n                                {{'' if db_name == 'snowflake' else ')'}}\r\n                    {% elif data_type in ('numeric','date') %}\r\n                        , 'min' , MIN(min)\r\n                        , 'max' , MIN(max)\r\n                        {%  if data_type == 'numeric' %}\r\n                            , 'mean' , MIN(avg)\r\n                            , 'percentile_25' , MIN(percentile_25)\r\n                            , 'percentile_50' , MIN(percentile_50)\r\n                            , 'percentile_75' , MIN(percentile_75)\r\n                        {%  elif data_type == 'date' %}\r\n                            , 'estimated_granularity' , MIN(estimated_granularity)\r\n                            , 'estimated_granularity_confidence' , MIN(estimated_granularity_confidence)\r\n                        {% endif %}\r\n                    {% endif %}\r\n                ) AS detail\r\n            FROM column_detail_{{col_name}}\r\n            {{ 'UNION ALL' if not loop.last else ''}}\r\n        {% endfor %}\r\n\r\n        )\r\n    {% else %}\r\n        {{output_name}} AS (\r\n            SELECT\r\n                '{{col_name}}' AS column_name\r\n                , {{'' if db_name == 'snowflake' else 'TO_JSON'}}(NULL) AS detail\r\n        )\r\n    {% endif %}\r\n\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_eda_tools.fetch_meta_data", "macro.dbt_utils.get_query_results_as_dict", "macro.dbt_eda_tools.estimated_granularity"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205801.866483, "supported_languages": null}, "macro.dbt_eda_tools.fetch_db": {"name": "fetch_db", "resource_type": "macro", "package_name": "dbt_eda_tools", "path": "macros\\fetch_db.sql", "original_file_path": "macros\\fetch_db.sql", "unique_id": "macro.dbt_eda_tools.fetch_db", "macro_sql": "{% macro fetch_db() %}\r\n        {{ return(adapter.dispatch('fetch_db', 'dbt_eda_tools')()) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_eda_tools.duckdb__fetch_db"]}, "description": "Determines the database adapter being used in the current context. It dispatches to different implementation macros based on the current adapter, returning a string representing the database type. The available implementations are Bigquery and Snowflake", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_eda_tools://macros\\schema.yml", "arguments": [], "created_at": 1728205812.1047027, "supported_languages": null}, "macro.dbt_eda_tools.bigquery__fetch_db": {"name": "bigquery__fetch_db", "resource_type": "macro", "package_name": "dbt_eda_tools", "path": "macros\\fetch_db.sql", "original_file_path": "macros\\fetch_db.sql", "unique_id": "macro.dbt_eda_tools.bigquery__fetch_db", "macro_sql": "{% macro bigquery__fetch_db() %}\r\n\r\n        {%- do return ('bigquery') -%}\r\n\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205801.8730264, "supported_languages": null}, "macro.dbt_eda_tools.snowflake__fetch_db": {"name": "snowflake__fetch_db", "resource_type": "macro", "package_name": "dbt_eda_tools", "path": "macros\\fetch_db.sql", "original_file_path": "macros\\fetch_db.sql", "unique_id": "macro.dbt_eda_tools.snowflake__fetch_db", "macro_sql": "{% macro snowflake__fetch_db() %}\r\n\r\n        {%- do return ('snowflake') -%}\r\n\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205801.8740106, "supported_languages": null}, "macro.dbt_eda_tools.duckdb__fetch_db": {"name": "duckdb__fetch_db", "resource_type": "macro", "package_name": "dbt_eda_tools", "path": "macros\\fetch_db.sql", "original_file_path": "macros\\fetch_db.sql", "unique_id": "macro.dbt_eda_tools.duckdb__fetch_db", "macro_sql": "{% macro duckdb__fetch_db() %}\r\n\r\n        {%- do return ('duckdb') -%}\r\n\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205801.8760073, "supported_languages": null}, "macro.dbt_eda_tools.default__fetch_db": {"name": "default__fetch_db", "resource_type": "macro", "package_name": "dbt_eda_tools", "path": "macros\\fetch_db.sql", "original_file_path": "macros\\fetch_db.sql", "unique_id": "macro.dbt_eda_tools.default__fetch_db", "macro_sql": "{% macro default__fetch_db()%}\r\n\r\n        {%- do return ('rest') -%}\r\n\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205801.877007, "supported_languages": null}, "macro.dbt_eda_tools.fetch_information_metadata": {"name": "fetch_information_metadata", "resource_type": "macro", "package_name": "dbt_eda_tools", "path": "macros\\fetch_information_metadata.sql", "original_file_path": "macros\\fetch_information_metadata.sql", "unique_id": "macro.dbt_eda_tools.fetch_information_metadata", "macro_sql": "{% macro fetch_information_metadata(model_name) %}\r\n        {{ return(adapter.dispatch('fetch_information_metadata', 'dbt_eda_tools')(model_name)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_eda_tools.default__fetch_information_metadata"]}, "description": "The information_schema table which houses the table metadata lives in different locations in bigquery and snowflake. This macro returns the right paths to these tables based on the database.", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_eda_tools://macros\\schema.yml", "arguments": [{"name": "model_name", "type": "string", "description": "The DBT model for which the information_schema needs to be fetched."}], "created_at": 1728205812.0991943, "supported_languages": null}, "macro.dbt_eda_tools.bigquery__fetch_information_metadata": {"name": "bigquery__fetch_information_metadata", "resource_type": "macro", "package_name": "dbt_eda_tools", "path": "macros\\fetch_information_metadata.sql", "original_file_path": "macros\\fetch_information_metadata.sql", "unique_id": "macro.dbt_eda_tools.bigquery__fetch_information_metadata", "macro_sql": "{% macro bigquery__fetch_information_metadata(model_name) %}\r\n\r\n        {% set relation = ref(model_name) %}\r\n        {% set full_path = (relation|replace(('.`'+relation.identifier+'`'),'')| replace(\"`\", \"\"))+'.INFORMATION_SCHEMA' %}\r\n\r\n        {% set return_value = [full_path,model_name] %}\r\n        {# {{ return (return_value) }} #}\r\n\r\n        {% do return (return_value) %}\r\n\r\n\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205801.8850079, "supported_languages": null}, "macro.dbt_eda_tools.snowflake__fetch_information_metadata": {"name": "snowflake__fetch_information_metadata", "resource_type": "macro", "package_name": "dbt_eda_tools", "path": "macros\\fetch_information_metadata.sql", "original_file_path": "macros\\fetch_information_metadata.sql", "unique_id": "macro.dbt_eda_tools.snowflake__fetch_information_metadata", "macro_sql": "{% macro snowflake__fetch_information_metadata(model_name) %}\r\n\r\n        {% set full_path = 'INFORMATION_SCHEMA' %}\r\n        {% set return_value = [full_path,model_name|upper]  %}\r\n        {# {{ return (return_value) }} #}\r\n\r\n        {% do return (return_value) %}\r\n\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205801.8885224, "supported_languages": null}, "macro.dbt_eda_tools.default__fetch_information_metadata": {"name": "default__fetch_information_metadata", "resource_type": "macro", "package_name": "dbt_eda_tools", "path": "macros\\fetch_information_metadata.sql", "original_file_path": "macros\\fetch_information_metadata.sql", "unique_id": "macro.dbt_eda_tools.default__fetch_information_metadata", "macro_sql": "{% macro default__fetch_information_metadata(model_name) %}\r\n\r\n        {% set full_path = 'INFORMATION_SCHEMA' %}\r\n        {% set return_value = [full_path, model_name]  %}\r\n        {# {{ return (return_value) }} #}\r\n\r\n        {% do return (return_value) %}\r\n\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205801.8941283, "supported_languages": null}, "macro.dbt_eda_tools.fetch_meta_data": {"name": "fetch_meta_data", "resource_type": "macro", "package_name": "dbt_eda_tools", "path": "macros\\fetch_meta_data.sql", "original_file_path": "macros\\fetch_meta_data.sql", "unique_id": "macro.dbt_eda_tools.fetch_meta_data", "macro_sql": "{% macro fetch_meta_data(output_name, full_path,db_name,table_name) %}\r\n    {{ return(adapter.dispatch('fetch_meta_data', 'dbt_eda_tools')(output_name, full_path,db_name,table_name)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_eda_tools.default__fetch_meta_data"]}, "description": "Retrieves metadata about the columns in a given table. It returns a common table expression (CTE) named `meta_data` that contains the following information for each column in the table >> `column_name`: The name of the column >> `data_type`: The data type of the column >> `nbr_of_columns`: The total number of columns in the table >> `data_type_input`: The categorized data type of the column (e.g. 'text', 'date', 'numeric', 'boolean', 'time') >>  `nbr_of_<data_type>_columns`: The number of columns of each categorized data type\nOutput returned as CTE", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_eda_tools://macros\\schema.yml", "arguments": [{"name": "output_name", "type": "string", "description": "The name to use for the output CTE."}, {"name": "full_path", "type": "string", "description": "The full path to the information_schema table being queried."}, {"name": "db_name", "type": "string", "description": "The name of the database, used to handle differences in SQL syntax between Snowflake and other databases."}, {"name": "table_name", "type": "string", "description": "The name of the table being queried."}], "created_at": 1728205812.1021926, "supported_languages": null}, "macro.dbt_eda_tools.default__fetch_meta_data": {"name": "default__fetch_meta_data", "resource_type": "macro", "package_name": "dbt_eda_tools", "path": "macros\\fetch_meta_data.sql", "original_file_path": "macros\\fetch_meta_data.sql", "unique_id": "macro.dbt_eda_tools.default__fetch_meta_data", "macro_sql": "{% macro default__fetch_meta_data(output_name, full_path,db_name,table_name) %}\r\n    {# assembled by integrating the types from\r\n    https://cloud.google.com/bigquery/docs/reference/standard-sql/data-types and\r\n    https://docs.snowflake.com/en/sql-reference/data-types.html #}\r\n    {% set variable_types_dict = {\r\n        'text': ('VARCHAR','CHAR', 'CHARACTER', 'STRING', 'TEXT')\r\n        , 'date': ('DATE','DATETIME','TIMESTAMP','TIMESTAMP_LTZ','TIMESTAMP_NTZ','TIMESTAMP_TZ')\r\n        , 'numeric': ('NUMBER','DECIMAL','NUMERIC','INT','INTEGER','BIGINT','SMALLINT','FLOAT','FLOAT4','FLOAT8','DOUBLE','DOUBLE PRECISION','REAL','INT64', 'TINYINT','BYETEINT', 'BIGDECIMAL','FLOAT64')\r\n        , 'boolean': ('BOOLEAN','BOOL')\r\n        , 'time': ('TIME','NEEDSTOBEARRAY')\r\n        , 'to_implement_binary': ('BINARY', 'VARBINARY')\r\n        , 'to_implement_semistructured': ('ARRAY', 'OBJECT', 'VARIANT')\r\n        , 'to_implement_geospatial': ('GEOGRAPHY','GEOMETRY')\r\n        , 'to_implement_vector': ('VECTOR','NEEDSTOBEARRAY')\r\n    } %}\r\n    {{output_name}} AS (\r\n        -- Need to explicitly cast the type before transposing the data\r\n        SELECT\r\n        column_name\r\n        , data_type\r\n        , COUNT(*) OVER (){{':: STRING' if db_name in ('snowflake','duckdb') else ''}} AS nbr_of_columns\r\n        , CASE\r\n                {% for key, value in variable_types_dict.items() %}\r\n                    {% if not key.startswith('to_implement_') %}\r\n                        WHEN DATA_TYPE IN {{ value }} THEN '{{key}}'\r\n                    {% endif %}\r\n                {% endfor %}\r\n        END AS data_type_input\r\n\r\n        {% for key, value in variable_types_dict.items() %}\r\n            {% if not key.startswith('to_implement_') %}\r\n                {% if db_name in ('snowflake','bigquery') %}\r\n                    , {{'COUNT_IF' if db_name == 'snowflake' else 'COUNTIF'}}(DATA_TYPE IN {{ value }}) OVER () {{':: STRING' if db_name=='snowflake' else ''}}  AS nbr_of_{{key}}_columns\r\n                {% elif db_name == 'duckdb' %}\r\n                    , COUNT(CASE WHEN DATA_TYPE IN {{ value }} THEN 1 END) OVER ():: STRING AS nbr_of_{{key}}_columns\r\n                {% endif %}\r\n            {% endif %}\r\n        {% endfor %}\r\n\r\n        FROM {{full_path}}.TABLES t\r\n        INNER JOIN {{full_path}}.COLUMNS c ON\r\n                c.table_schema = t.table_schema AND c.table_name = t.table_name\r\n                WHERE t.table_name = '{{table_name}}'\r\n    )\r\n\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205801.9290724, "supported_languages": null}, "macro.dbt_eda_tools.filter_meta_data": {"name": "filter_meta_data", "resource_type": "macro", "package_name": "dbt_eda_tools", "path": "macros\\filter_meta_data.sql", "original_file_path": "macros\\filter_meta_data.sql", "unique_id": "macro.dbt_eda_tools.filter_meta_data", "macro_sql": "{% macro filter_meta_data(output_name,key,table_name,db_name) %}\r\n    {{ return(adapter.dispatch('filter_meta_data', 'dbt_eda_tools')(output_name,key,table_name,db_name)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_eda_tools.default__filter_meta_data"]}, "description": "The macro uses conditional logic to generate the appropriate metadata based on the `key` parameter. It supports three different types of metadata: >> `dataset`: This generates a set of metadata about the overall dataset, including the number of columns, text columns, date columns, numeric columns, boolean columns, and time columns. >> `column`: This generates a set of metadata about each column in the table, including the column name and data type. >> `rowcount`: This generates a single metadata item with the total number of rows in the table. Output returned as CTE", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_eda_tools://macros\\schema.yml", "arguments": [{"name": "output_name", "type": "string", "description": "The name to use for the output CTE."}, {"name": "key", "type": "string", "description": "The type of metadata to generate (one of 'dataset', 'column', or 'rowcount')."}, {"name": "table_name", "type": "string", "description": "The name of the table to generate metadata for."}, {"name": "db_name", "type": "string", "description": "The name of the database, used to handle differences in SQL syntax between Snowflake and other databases."}], "created_at": 1728205812.1047027, "supported_languages": null}, "macro.dbt_eda_tools.default__filter_meta_data": {"name": "default__filter_meta_data", "resource_type": "macro", "package_name": "dbt_eda_tools", "path": "macros\\filter_meta_data.sql", "original_file_path": "macros\\filter_meta_data.sql", "unique_id": "macro.dbt_eda_tools.default__filter_meta_data", "macro_sql": "{% macro default__filter_meta_data(output_name,key,table_name,db_name) %}\r\n\r\n    {% if key == 'dataset' %}\r\n\r\n        meta_data_unique AS (\r\n            SELECT\r\n                    DISTINCT\r\n                    '{{key}}' AS identifier\r\n                    , '' AS detail\r\n                    , nbr_of_columns\r\n                    , nbr_of_text_columns\r\n                    , nbr_of_date_columns\r\n                    , nbr_of_numeric_columns\r\n                    , nbr_of_boolean_columns\r\n                    , nbr_of_time_columns\r\n                FROM {{table_name}}\r\n        )\r\n        , {{output_name}} AS (\r\n            SELECT\r\n                    CASE LOWER(meta_data_key)\r\n                            WHEN 'nbr_of_columns' THEN 1\r\n                            WHEN 'nbr_of_text_columns' THEN 2\r\n                            WHEN 'nbr_of_date_columns' THEN 3\r\n                            WHEN 'nbr_of_numeric_columns' THEN 4\r\n                            WHEN 'nbr_of_boolean_columns' THEN 5\r\n                            WHEN 'nbr_of_time_columns' THEN 6\r\n                    END AS index_pos\r\n                    , meta_data_key\r\n                    , identifier\r\n                    , detail\r\n                    , CAST(meta_data_value AS STRING) AS meta_data_value\r\n                FROM meta_data_unique\r\n                UNPIVOT (meta_data_value FOR meta_data_key IN (nbr_of_columns, nbr_of_text_columns, nbr_of_date_columns, nbr_of_numeric_columns,nbr_of_boolean_columns,nbr_of_time_columns))\r\n        )\r\n\r\n    {% elif key =='column' %}\r\n        {{output_name}} AS (\r\n            SELECT\r\n                20 + ROW_NUMBER() OVER (ORDER BY data_type) AS index_pos\r\n                , column_name AS meta_data_key\r\n                , '{{key}}' AS identifier\r\n                , '' AS detail\r\n                , CAST(data_type AS STRING) AS meta_data_value\r\n            FROM {{table_name}}\r\n        )\r\n    {% elif key =='rowcount'%}\r\n        {{output_name}} AS (\r\n            SELECT\r\n                    0 AS index_pos\r\n                    , {{'UPPER' if db_name=='snowflake' else ''}}('nbr_of_rows') AS meta_data_key\r\n                    , 'dataset' AS identifier\r\n                    , '' AS detail\r\n                    , CAST(COUNT(*) AS STRING) AS meta_data_value\r\n            FROM {{ table_name }}\r\n            GROUP BY ALL\r\n        )\r\n    {% endif %}\r\n\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205801.9500427, "supported_languages": null}, "macro.dbt_eda_tools.get_missing_date": {"name": "get_missing_date", "resource_type": "macro", "package_name": "dbt_eda_tools", "path": "macros\\get_missing_date.sql", "original_file_path": "macros\\get_missing_date.sql", "unique_id": "macro.dbt_eda_tools.get_missing_date", "macro_sql": "{% macro get_missing_date(model_name, date_col, dimensions, filters, expected_frequency) %}\r\n    {{ return(adapter.dispatch('get_missing_date', 'dbt_eda_tools')(model_name, date_col, dimensions, filters, expected_frequency)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_eda_tools.default__get_missing_date"]}, "description": "The macro calculates all the missing dates in the model for the specificied dimensions and input filter conditions.", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_eda_tools://macros\\schema.yml", "arguments": [{"name": "model_name", "type": "string", "description": "The DBT model which needs to be inspected for missing dates."}, {"name": "date_col", "type": "string", "description": "The date column that needs to be inspected."}, {"name": "dimensions", "type": "string", "description": "An array of dimensions as strings."}, {"name": "filters", "type": "string", "description": "A dictionary with the columns that need to be filtered if needed."}, {"name": "expected_frequency", "type": "string", "description": "Expected time frequency of dates. Ex MONTH, YEAR, DAY etc."}], "created_at": 1728205812.0951965, "supported_languages": null}, "macro.dbt_eda_tools.default__get_missing_date": {"name": "default__get_missing_date", "resource_type": "macro", "package_name": "dbt_eda_tools", "path": "macros\\get_missing_date.sql", "original_file_path": "macros\\get_missing_date.sql", "unique_id": "macro.dbt_eda_tools.default__get_missing_date", "macro_sql": "{% macro default__get_missing_date(model_name, date_col, dimensions, filters, expected_frequency) %}\r\n  WITH\r\n  unique_dates AS (\r\n    SELECT\r\n      DISTINCT\r\n          {{date_col}}\r\n          {% for col in dimensions %}\r\n              , ({{ col }}) AS {{col}}\r\n          {% endfor %}\r\n    FROM {{ ref(model_name) }}\r\n    {% if filters %}\r\n      {% for key, value in filters.items() %}\r\n          {% if loop.index == 1 %}\r\n            WHERE 1=1\r\n          {% endif %}\r\n\r\n          {# if the argument is not a tuple for which we need to use an 'IN' operator #}\r\n          {% if value is string %}\r\n            {%- set numeric_check = (value.replace(\"<\", \"\").replace(\">\", \"\").replace(\"=\", \"\")) -%}\r\n\r\n            {# if numeric value and contains an arithmetric comparison operator #}\r\n            {% if numeric_check|int != 0 and modules.re.match('<|>|=',value) %}\r\n              AND  {{ key }} {{value}}\r\n            {% else %}\r\n              AND  {{ key }} = '{{ value }}'\r\n            {% endif %}\r\n\r\n          {% else %}\r\n            AND {{ key }} IN {{ value }}\r\n          {% endif %}\r\n      {% endfor %}\r\n    {% endif %}\r\n  )\r\n  , dates_lagged AS (\r\n    SELECT *\r\n    , LAG({{date_col}},1) OVER (\r\n          ORDER BY\r\n          {% for col in dimensions %}\r\n              ({{ col }}) DESC,\r\n          {% endfor %}\r\n          {{date_col}} DESC) AS next_{{date_col|lower}}\r\n    FROM unique_dates\r\n  )\r\n  SELECT\r\n      {{date_col}}\r\n      {% for col in dimensions %}\r\n          , ({{ col }}) AS {{col}}\r\n      {% endfor %}\r\n      , next_{{date_col}}\r\n      , ABS({{datediff('next_'+date_col,date_col,expected_frequency)}}) AS missing_{{expected_frequency|lower}}\r\n  FROM dates_lagged\r\n  WHERE {{datediff('next_'+date_col,date_col,expected_frequency)}} < -1\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205801.9888036, "supported_languages": null}, "macro.dbt_eda_tools.get_row_count": {"name": "get_row_count", "resource_type": "macro", "package_name": "dbt_eda_tools", "path": "macros\\get_row_count.sql", "original_file_path": "macros\\get_row_count.sql", "unique_id": "macro.dbt_eda_tools.get_row_count", "macro_sql": "{% macro get_row_count() %}\r\n    {{ return(adapter.dispatch('get_row_count', 'dbt_eda_tools')()) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_eda_tools.default__get_row_count"]}, "description": "Returns the number of rows in a table", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_eda_tools://macros\\schema.yml", "arguments": [], "created_at": 1728205812.1057184, "supported_languages": null}, "macro.dbt_eda_tools.default__get_row_count": {"name": "default__get_row_count", "resource_type": "macro", "package_name": "dbt_eda_tools", "path": "macros\\get_row_count.sql", "original_file_path": "macros\\get_row_count.sql", "unique_id": "macro.dbt_eda_tools.default__get_row_count", "macro_sql": "{% macro default__get_row_count() %}\r\n\r\n    {% set sql_statement %}\r\n        SELECT count(*)FROM {{ this }}\r\n    {% endset %}\r\n\r\n    {% if var('dbt_eda_tools_log_enable','N') == 'Y'  %}\r\n        {% set row_count = dbt_utils.get_single_value(sql_statement) %}\r\n\r\n        {% set headers = ['Row count::  '+this.name] %}\r\n        {% set rows = [\r\n            [row_count | string ]\r\n        ] %}\r\n\r\n        {% if headers | length and row_count != None %}\r\n            {{ dbt_eda_tools.print_pretty_table(headers, rows) }}\r\n        {% endif %}\r\n    {% endif%}\r\n\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_single_value", "macro.dbt_eda_tools.print_pretty_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.0312767, "supported_languages": null}, "macro.dbt_eda_tools.percent_of_total": {"name": "percent_of_total", "resource_type": "macro", "package_name": "dbt_eda_tools", "path": "macros\\percent_of_total.sql", "original_file_path": "macros\\percent_of_total.sql", "unique_id": "macro.dbt_eda_tools.percent_of_total", "macro_sql": "{% macro percent_of_total(column_to_aggregate, aggregation='COUNT',precision=2,level=none) %}\r\n    {{ return(adapter.dispatch('percent_of_total', 'dbt_eda_tools')(column_to_aggregate, aggregation,precision,level)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_eda_tools.default__percent_of_total"]}, "description": "The macro calculates the percentage of total for the provided aggregation and column", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_eda_tools://macros\\schema.yml", "arguments": [{"name": "column_to_aggregate", "type": "string", "description": "The column on which the percentages need to be computed"}, {"name": "aggregation", "type": "string", "description": "Can take a value of SUM, COUNT or COUNTDISTINCT. Defaults to count"}, {"name": "precision", "type": "integer", "description": "Number of decimal places to round the result. Defaults to 2."}, {"name": "level", "type": "string", "description": "An array of columns to aggregate at the specified level."}], "created_at": 1728205812.097188, "supported_languages": null}, "macro.dbt_eda_tools.default__percent_of_total": {"name": "default__percent_of_total", "resource_type": "macro", "package_name": "dbt_eda_tools", "path": "macros\\percent_of_total.sql", "original_file_path": "macros\\percent_of_total.sql", "unique_id": "macro.dbt_eda_tools.default__percent_of_total", "macro_sql": "{% macro default__percent_of_total(column_to_aggregate, aggregation,precision,level) %}\r\n\r\n  {% set db_name = dbt_eda_tools.fetch_db() | trim %}\r\n\r\n  {% if level %}\r\n    {% set level_agg = \"PARTITION BY \" ~ level|join(',') %}\r\n  {% endif %}\r\n\r\n      ROUND(\r\n        {% if aggregation|lower in ['sum','count'] %}\r\n          {% if db_name in ('snowflake','bigquery') %}\r\n            {{'DIV0NULL' if db_name=='snowflake' else 'SAFE_DIVIDE'}}(\r\n              {{aggregation}}({{column_to_aggregate}})\r\n              ,\r\n              SUM({{aggregation}}({{column_to_aggregate}})) OVER ({{level_agg}})\r\n            )\r\n          {% elif db_name =='duckdb' %}\r\n            IF(SUM({{aggregation}}({{column_to_aggregate}})) OVER ({{level_agg}}) !=0\r\n              , {{aggregation}}({{column_to_aggregate}})\r\n              /\r\n              SUM({{aggregation}}({{column_to_aggregate}})) OVER ({{level_agg}})\r\n              , NULL\r\n            )\r\n          {% endif %}\r\n        {% elif aggregation|lower == 'countdistinct' %}\r\n            {% if db_name in ('snowflake','bigquery') %}\r\n              {{'DIV0NULL' if db_name=='snowflake' else 'SAFE_DIVIDE'}}(\r\n                COUNT(DISTINCT {{column_to_aggregate}})\r\n                ,\r\n                SUM(COUNT(DISTINCT {{column_to_aggregate}})) OVER ({{level_agg}})\r\n              )\r\n            {% elif db_name =='duckdb' %}\r\n              IF(SUM(COUNT(DISTINCT {{column_to_aggregate}})) OVER ({{level_agg}}) !=0\r\n                , COUNT(DISTINCT {{column_to_aggregate}})\r\n                /\r\n                SUM(COUNT(DISTINCT {{column_to_aggregate}})) OVER ({{level_agg}})\r\n                , NULL\r\n              )\r\n            {% endif %}\r\n        {% else %}\r\n          NULL\r\n        {% endif %}\r\n      , {{precision}})\r\n\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_eda_tools.fetch_db"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.0791311, "supported_languages": null}, "macro.dbt_eda_tools.print_pretty_table": {"name": "print_pretty_table", "resource_type": "macro", "package_name": "dbt_eda_tools", "path": "macros\\print_pretty_table.sql", "original_file_path": "macros\\print_pretty_table.sql", "unique_id": "macro.dbt_eda_tools.print_pretty_table", "macro_sql": "{% macro print_pretty_table(headers,rows) %}\r\n    {{ return(adapter.dispatch('print_pretty_table', 'dbt_eda_tools')(headers,rows)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_eda_tools.default__print_pretty_table"]}, "description": "Logs the table in a pretty format", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_eda_tools://macros\\schema.yml", "arguments": [{"name": "headers", "type": "string", "description": "The headers of the table in list format. Ex ['Col1','Col2','Col3']"}, {"name": "rows", "type": "string", "description": "The rows of the table in list format. Ex [['R1C1','R1C2','R1C3'],['R2C1','R2C2','R2C3']]"}], "created_at": 1728205812.106722, "supported_languages": null}, "macro.dbt_eda_tools.ljust": {"name": "ljust", "resource_type": "macro", "package_name": "dbt_eda_tools", "path": "macros\\print_pretty_table.sql", "original_file_path": "macros\\print_pretty_table.sql", "unique_id": "macro.dbt_eda_tools.ljust", "macro_sql": "{% macro ljust(value, width, type) %}\r\n    {{ return(adapter.dispatch('ljust', 'dbt_eda_tools')(value, width, type)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_eda_tools.default__ljust"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.1012526, "supported_languages": null}, "macro.dbt_eda_tools.print_delimiter": {"name": "print_delimiter", "resource_type": "macro", "package_name": "dbt_eda_tools", "path": "macros\\print_pretty_table.sql", "original_file_path": "macros\\print_pretty_table.sql", "unique_id": "macro.dbt_eda_tools.print_delimiter", "macro_sql": "{% macro print_delimiter(delimiter_sign, col_widths_max) %}\r\n    {{ return(adapter.dispatch('print_delimiter', 'dbt_eda_tools')(delimiter_sign, col_widths_max)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_eda_tools.default__print_delimiter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.1027572, "supported_languages": null}, "macro.dbt_eda_tools.default__ljust": {"name": "default__ljust", "resource_type": "macro", "package_name": "dbt_eda_tools", "path": "macros\\print_pretty_table.sql", "original_file_path": "macros\\print_pretty_table.sql", "unique_id": "macro.dbt_eda_tools.default__ljust", "macro_sql": "{% macro default__ljust(value, width, type) %}\r\n    {{ (\"\\033[32m \" if type=='val' else \"\\033[1;32m \") + value + (' ' * (width - value | length))+\" \\033[0m\" }}\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.1047716, "supported_languages": null}, "macro.dbt_eda_tools.default__print_delimiter": {"name": "default__print_delimiter", "resource_type": "macro", "package_name": "dbt_eda_tools", "path": "macros\\print_pretty_table.sql", "original_file_path": "macros\\print_pretty_table.sql", "unique_id": "macro.dbt_eda_tools.default__print_delimiter", "macro_sql": "{% macro default__print_delimiter(delimiter_sign, col_widths_max) %}\r\n    {%- set delimiter = [] -%}\r\n\r\n    {%- for item in col_widths_max -%}\r\n        {%- for i in range(item) -%}\r\n            {%- do delimiter.append(delimiter_sign) -%}\r\n        {%- endfor -%}\r\n    {%- endfor -%}\r\n    {%- do return(delimiter) -%}\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.107773, "supported_languages": null}, "macro.dbt_eda_tools.default__print_pretty_table": {"name": "default__print_pretty_table", "resource_type": "macro", "package_name": "dbt_eda_tools", "path": "macros\\print_pretty_table.sql", "original_file_path": "macros\\print_pretty_table.sql", "unique_id": "macro.dbt_eda_tools.default__print_pretty_table", "macro_sql": "{% macro default__print_pretty_table(headers, rows) %}\r\n\r\n    {%- set col_widths_max = [] -%}\r\n    {%- set col_widths = [] -%}\r\n    {%- for i in range(headers | length) -%}\r\n        {%- set col_widths = [] -%}\r\n        {%- if col_widths.insert(i,headers[i] | length) %}{% endif -%}\r\n        {%- for row in rows -%}\r\n            {%- if col_widths.insert(i,row[i] | length) %}{% endif -%}\r\n        {%- endfor -%}\r\n        {%- if col_widths_max.insert(i,col_widths|max) %}{% endif -%}\r\n    {%- endfor -%}\r\n\r\n\r\n\r\n\r\n    {%- set table = [] -%}\r\n    {%- do table.append(' '.join([])) -%}\r\n\r\n    {%- set delimiter_line = dbt_eda_tools.print_delimiter(\"-\", col_widths_max) -%}\r\n    {%- do table.append('-'.join(delimiter_line)) -%}\r\n\r\n\r\n    {%- set header_row = [] -%}\r\n    {%- for i in range(headers | length) -%}\r\n        {%- set header = dbt_eda_tools.ljust(headers[i], col_widths_max[i],'header') -%}\r\n        {%- do header_row.append(header| replace('\\n', '')) -%}\r\n    {%- endfor -%}\r\n\r\n    {%- do table.append(' - '.join([])) -%}\r\n    {%- do table.append(' | '.join(header_row)) -%}\r\n\r\n    {%- set delimiter_line = dbt_eda_tools.print_delimiter(\"-\", col_widths_max) -%}\r\n    {%- do table.append('-'.join(delimiter_line)) -%}\r\n\r\n    {%- for row in rows -%}\r\n        {%- set row_data = [] -%}\r\n        {%- for i in range(row | length) -%}\r\n            {%- set cell = dbt_eda_tools.ljust(row[i], col_widths_max[i], 'val') -%}\r\n            {%- do row_data.append(cell | replace('\\n', '')) -%}\r\n        {%- endfor -%}\r\n        {%- do table.append(' | '.join(row_data)) -%}\r\n    {%- endfor -%}\r\n    {%- do table.append(' ') -%}\r\n\r\n    {{ log(table | join('\\n'), info=True) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_eda_tools.print_delimiter", "macro.dbt_eda_tools.ljust"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.1263127, "supported_languages": null}, "macro.dbt_eda_tools.summarize_dataset": {"name": "summarize_dataset", "resource_type": "macro", "package_name": "dbt_eda_tools", "path": "macros\\summarize_dataset.sql", "original_file_path": "macros\\summarize_dataset.sql", "unique_id": "macro.dbt_eda_tools.summarize_dataset", "macro_sql": "{% macro summarize_dataset(db_name, dtype_loop=none) %}\r\n        {{ return(adapter.dispatch('summarize_dataset', 'dbt_eda_tools')(db_name, dtype_loop)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_eda_tools.default__summarize_dataset"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.1493168, "supported_languages": null}, "macro.dbt_eda_tools.default__summarize_dataset": {"name": "default__summarize_dataset", "resource_type": "macro", "package_name": "dbt_eda_tools", "path": "macros\\summarize_dataset.sql", "original_file_path": "macros\\summarize_dataset.sql", "unique_id": "macro.dbt_eda_tools.default__summarize_dataset", "macro_sql": "{% macro default__summarize_dataset(db_name, dtype_loop) %}\r\n\r\n{% set json_keys = ('count','count_null','mean','percentile_25','percentile_50','percentile_75','unique_values','value_counts_top10', 'estimated_granularity','estimated_granularity_confidence','min','max') %}\r\n\r\n\r\n{% if dtype_loop %}\r\n    , unioned_data AS (\r\n            {% for dtype in dtype_loop %}\r\n                SELECT\r\n                   '{{dtype}}' AS dtype\r\n                    , * FROM\r\n                column_detail_info_{{dtype}}\r\n                WHERE column_name != ''\r\n                {% if not loop.last %}\r\n                    UNION ALL\r\n                {% endif %}\r\n            {% endfor %}\r\n        )\r\n        {% if db_name in ('bigquery','duckdb') %}\r\n            , flatten_data AS (\r\n                SELECT\r\n                    column_name\r\n                    , dtype\r\n                    {% for pivot_key in json_keys%}\r\n                        , json_extract(detail, '$.{{pivot_key}}') AS {{pivot_key}}\r\n                    {% endfor %}\r\n                    FROM unioned_data\r\n            )\r\n        {% endif %}\r\n        , unpivoted_data AS (\r\n                SELECT\r\n                    column_name\r\n                    , dtype\r\n                    , key AS pivot_key\r\n                    , {{ 'value' if db_name == 'snowflake' else 'TO_JSON_STRING(value)' if db_name == 'bigquery' else 'JSON(value)' }} AS pivot_value ,\r\n                FROM\r\n            {% if db_name =='snowflake' %}\r\n                unioned_data\r\n                , LATERAL FLATTEN(input => detail) f\r\n            {% elif db_name in ('bigquery','duckdb') %}\r\n                flatten_data AS f\r\n                UNPIVOT (\r\n                    value FOR key IN {{json_keys|replace(\"'\",'')}}\r\n                )\r\n            {% endif %}\r\n\r\n        )\r\n        SELECT\r\n            column_name\r\n            , dtype\r\n            , {{'\"\\'count\\'\"' if db_name=='snowflake' else 'count'}}\r\n            , {{'\"\\'count_null\\'\"' if db_name=='snowflake' else 'count_null'}}\r\n            , ROUND({{'DIV0NULL' if db_name=='snowflake' else 'SAFE_DIVIDE' if db_name =='bigquery' else ''}}(\r\n                {{'\"\\'count_null\\'\"::double' if db_name == 'snowflake' else 'CAST(count_null AS NUMERIC)'}}\r\n                {{',' if db_name in ('bigquery','snowflake') else '/' }} {{('\"\\'count\\'\"::double+\"\\'count_null\\'\"::double') if db_name == 'snowflake' else '(CAST(count AS NUMERIC)+CAST(count_null AS NUMERIC))'}}\r\n            ),3)\r\n\r\n            AS percent_null\r\n            , * {{'EXCLUDE' if db_name in ('snowflake','duckdb') else 'EXCEPT'}}(column_name, dtype\r\n                , {{'\"\\'count\\'\"' if db_name=='snowflake' else 'count'}}\r\n                , {{'\"\\'count_null\\'\"' if db_name=='snowflake' else 'count_null'}}\r\n            )\r\n        FROM\r\n        unpivoted_data\r\n        PIVOT(MIN(pivot_value) FOR pivot_key IN {{'(ANY)' if db_name == 'snowflake' else json_keys|replace(\"'\",'\"')}})\r\n        ORDER BY dtype\r\n{% else %}\r\n    SELECT\r\n        assembed_result.meta_data_key\r\n        , assembed_result.meta_data_value\r\n        , assembed_result.identifier\r\n        , COALESCE(text_detail.detail, numeric_detail.detail,date_detail.detail, boolean_detail.detail) AS detail\r\n    FROM assembled_result AS assembed_result\r\n    LEFT JOIN column_detail_info_text AS text_detail\r\n    ON assembed_result.meta_data_key = text_detail.column_name\r\n    LEFT JOIN column_detail_info_numeric AS numeric_detail\r\n    ON assembed_result.meta_data_key = numeric_detail.column_name\r\n    LEFT JOIN column_detail_info_date AS date_detail\r\n    ON assembed_result.meta_data_key = date_detail.column_name\r\n    LEFT JOIN column_detail_info_boolean AS boolean_detail\r\n    ON assembed_result.meta_data_key = boolean_detail.column_name\r\n\r\n    ORDER BY index_pos ASC\r\n{% endif %}\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.1668239, "supported_languages": null}, "macro.dbt_duckdb.duckdb__create_schema": {"name": "duckdb__create_schema", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__create_schema", "macro_sql": "{% macro duckdb__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    {% set sql %}\n        select type from duckdb_databases()\n        where database_name='{{ relation.database }}'\n        and type='sqlite'\n    {% endset %}\n    {% set results = run_query(sql) %}\n    {% if results|length == 0 %}\n        create schema if not exists {{ relation.without_identifier() }}\n    {% else %}\n        {% if relation.schema!='main' %}\n            {{ exceptions.raise_compiler_error(\n                \"Schema must be 'main' when writing to sqlite \"\n                ~ \"instead got \" ~ relation.schema\n            )}}\n        {% endif %}\n    {% endif %}\n  {%- endcall -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.2339866, "supported_languages": null}, "macro.dbt_duckdb.duckdb__drop_schema": {"name": "duckdb__drop_schema", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__drop_schema", "macro_sql": "{% macro duckdb__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {%- endcall -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.236284, "supported_languages": null}, "macro.dbt_duckdb.duckdb__list_schemas": {"name": "duckdb__list_schemas", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__list_schemas", "macro_sql": "{% macro duckdb__list_schemas(database) -%}\n  {% set sql %}\n    select schema_name\n    from system.information_schema.schemata\n    {% if database is not none %}\n    where catalog_name = '{{ database }}'\n    {% endif %}\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.2389874, "supported_languages": null}, "macro.dbt_duckdb.duckdb__check_schema_exists": {"name": "duckdb__check_schema_exists", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__check_schema_exists", "macro_sql": "{% macro duckdb__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from system.information_schema.schemata\n        where schema_name = '{{ schema }}'\n        and catalog_name = '{{ information_schema.database }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.2410858, "supported_languages": null}, "macro.dbt_duckdb.get_column_names": {"name": "get_column_names", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_duckdb.get_column_names", "macro_sql": "{% macro get_column_names() %}\n  {# loop through user_provided_columns to get column names #}\n    {%- set user_provided_columns = model['columns'] -%}\n    (\n    {% for i in user_provided_columns %}\n      {% set col = user_provided_columns[i] %}\n      {{ col['name'] }} {{ \",\" if not loop.last }}\n    {% endfor %}\n  )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.2438016, "supported_languages": null}, "macro.dbt_duckdb.duckdb__create_table_as": {"name": "duckdb__create_table_as", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__create_table_as", "macro_sql": "{% macro duckdb__create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {%- if language == 'sql' -%}\n    {% set contract_config = config.get('contract') %}\n    {% if contract_config.enforced %}\n      {{ get_assert_columns_equivalent(compiled_code) }}\n    {% endif %}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none }}\n\n    create {% if temporary: -%}temporary{%- endif %} table\n      {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  {% if contract_config.enforced and not temporary %}\n    {#-- DuckDB doesnt support constraints on temp tables --#}\n    {{ get_table_columns_and_constraints() }} ;\n    insert into {{ relation }} {{ get_column_names() }} (\n      {{ get_select_subquery(compiled_code) }}\n    );\n  {% else %}\n    as (\n      {{ compiled_code }}\n    );\n  {% endif %}\n  {%- elif language == 'python' -%}\n    {{ py_write_table(temporary=temporary, relation=relation, compiled_code=compiled_code) }}\n  {%- else -%}\n      {% do exceptions.raise_compiler_error(\"duckdb__create_table_as macro didn't get supported language, it got %s\" % language) %}\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt_duckdb.get_column_names", "macro.dbt.get_select_subquery", "macro.dbt_duckdb.py_write_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.2685747, "supported_languages": null}, "macro.dbt_duckdb.py_write_table": {"name": "py_write_table", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_duckdb.py_write_table", "macro_sql": "{% macro py_write_table(temporary, relation, compiled_code) -%}\n{{ compiled_code }}\n\ndef materialize(df, con):\n    try:\n        import pyarrow\n        pyarrow_available = True\n    except ImportError:\n        pyarrow_available = False\n    finally:\n        if pyarrow_available and isinstance(df, pyarrow.Table):\n            # https://github.com/duckdb/duckdb/issues/6584\n            import pyarrow.dataset\n    tmp_name = '__dbt_python_model_df_' + '{{ relation.identifier }}'\n    con.register(tmp_name, df)\n    con.execute('create table {{ relation }} as select * from ' + tmp_name)\n    con.unregister(tmp_name)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.2703044, "supported_languages": null}, "macro.dbt_duckdb.duckdb__create_view_as": {"name": "duckdb__create_view_as", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__create_view_as", "macro_sql": "{% macro duckdb__create_view_as(relation, sql) -%}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced %}\n    {{ get_assert_columns_equivalent(sql) }}\n  {%- endif %}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.2743053, "supported_languages": null}, "macro.dbt_duckdb.duckdb__get_columns_in_relation": {"name": "duckdb__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__get_columns_in_relation", "macro_sql": "{% macro duckdb__get_columns_in_relation(relation) -%}\n  {% call statement('get_columns_in_relation', fetch_result=True) %}\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from system.information_schema.columns\n      where table_name = '{{ relation.identifier }}'\n      {% if relation.schema %}\n      and table_schema = '{{ relation.schema }}'\n      {% endif %}\n      {% if relation.database %}\n      and table_catalog = '{{ relation.database }}'\n      {% endif %}\n      order by ordinal_position\n\n  {% endcall %}\n  {% set table = load_result('get_columns_in_relation').table %}\n  {{ return(sql_convert_columns_in_relation(table)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.sql_convert_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.2798164, "supported_languages": null}, "macro.dbt_duckdb.duckdb__list_relations_without_caching": {"name": "duckdb__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__list_relations_without_caching", "macro_sql": "{% macro duckdb__list_relations_without_caching(schema_relation) %}\n  {% call statement('list_relations_without_caching', fetch_result=True) -%}\n    select\n      '{{ schema_relation.database }}' as database,\n      table_name as name,\n      table_schema as schema,\n      CASE table_type\n        WHEN 'BASE TABLE' THEN 'table'\n        WHEN 'VIEW' THEN 'view'\n        WHEN 'LOCAL TEMPORARY' THEN 'table'\n        END as type\n    from system.information_schema.tables\n    where table_schema = '{{ schema_relation.schema }}'\n    and table_catalog = '{{ schema_relation.database }}'\n  {% endcall %}\n  {{ return(load_result('list_relations_without_caching').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.283829, "supported_languages": null}, "macro.dbt_duckdb.duckdb__drop_relation": {"name": "duckdb__drop_relation", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__drop_relation", "macro_sql": "{% macro duckdb__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.2858315, "supported_languages": null}, "macro.dbt_duckdb.duckdb__rename_relation": {"name": "duckdb__rename_relation", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__rename_relation", "macro_sql": "{% macro duckdb__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter {{ to_relation.type }} {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.2888408, "supported_languages": null}, "macro.dbt_duckdb.duckdb__make_temp_relation": {"name": "duckdb__make_temp_relation", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__make_temp_relation", "macro_sql": "{% macro duckdb__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix ~ py_current_timestring() %}\n    {% do return(base_relation.incorporate(\n                                  path={\n                                    \"identifier\": tmp_identifier,\n                                    \"schema\": none,\n                                    \"database\": none\n                                  })) -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.py_current_timestring"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.2928388, "supported_languages": null}, "macro.dbt_duckdb.duckdb__current_timestamp": {"name": "duckdb__current_timestamp", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__current_timestamp", "macro_sql": "{% macro duckdb__current_timestamp() -%}\n  now()\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.2938411, "supported_languages": null}, "macro.dbt_duckdb.duckdb__snapshot_string_as_time": {"name": "duckdb__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__snapshot_string_as_time", "macro_sql": "{% macro duckdb__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"'\" ~ timestamp ~ \"'::timestamp\" -%}\n    {{ return(result) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.29584, "supported_languages": null}, "macro.dbt_duckdb.duckdb__snapshot_get_time": {"name": "duckdb__snapshot_get_time", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__snapshot_get_time", "macro_sql": "{% macro duckdb__snapshot_get_time() -%}\n  {{ current_timestamp() }}::timestamp\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.2968416, "supported_languages": null}, "macro.dbt_duckdb.duckdb__get_incremental_default_sql": {"name": "duckdb__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__get_incremental_default_sql", "macro_sql": "{% macro duckdb__get_incremental_default_sql(arg_dict) %}\n  {% do return(get_incremental_delete_insert_sql(arg_dict)) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.2988405, "supported_languages": null}, "macro.dbt_duckdb.location_exists": {"name": "location_exists", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_duckdb.location_exists", "macro_sql": "{% macro location_exists(location) -%}\n  {% do return(adapter.location_exists(location)) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.3008401, "supported_languages": null}, "macro.dbt_duckdb.write_to_file": {"name": "write_to_file", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_duckdb.write_to_file", "macro_sql": "{% macro write_to_file(relation, location, options) -%}\n  {% call statement('write_to_file') -%}\n    copy {{ relation }} to '{{ location }}' ({{ options }})\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.3033764, "supported_languages": null}, "macro.dbt_duckdb.store_relation": {"name": "store_relation", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_duckdb.store_relation", "macro_sql": "{% macro store_relation(plugin, relation, location, format, config) -%}\n  {%- set column_list = adapter.get_columns_in_relation(relation) -%}\n  {% do adapter.store_relation(plugin, relation, column_list, location, format, config) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.3062994, "supported_languages": null}, "macro.dbt_duckdb.render_write_options": {"name": "render_write_options", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "unique_id": "macro.dbt_duckdb.render_write_options", "macro_sql": "{% macro render_write_options(config) -%}\n  {% set options = config.get('options', {}) %}\n  {% if options is not mapping %}\n    {% do exceptions.raise_compiler_error(\"The options argument must be a dictionary\") %}\n  {% endif %}\n\n  {% for k in options %}\n    {% set _ = options.update({k: render(options[k])}) %}\n  {% endfor %}\n\n  {# legacy top-level write options #}\n  {% if config.get('format') %}\n    {% set _ = options.update({'format': render(config.get('format'))}) %}\n  {% endif %}\n  {% if config.get('delimiter') %}\n    {% set _ = options.update({'delimiter': render(config.get('delimiter'))}) %}\n  {% endif %}\n\n  {% do return(options) %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.3143146, "supported_languages": null}, "macro.dbt_duckdb.duckdb__get_catalog": {"name": "duckdb__get_catalog", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros\\catalog.sql", "original_file_path": "macros\\catalog.sql", "unique_id": "macro.dbt_duckdb.duckdb__get_catalog", "macro_sql": "{% macro duckdb__get_catalog(information_schema, schemas) -%}\n  {%- call statement('catalog', fetch_result=True) -%}\n    with relations AS (\n      select\n        t.table_name\n        , t.database_name\n        , t.schema_name\n        , 'BASE TABLE' as table_type\n        , {{ adapter.catalog_comment('t') }} as table_comment\n      from duckdb_tables() t\n      WHERE t.database_name = '{{ database }}'\n      UNION ALL\n      SELECT v.view_name as table_name\n      , v.database_name\n      , v.schema_name\n      , 'VIEW' as table_type\n      , {{ adapter.catalog_comment('v') }} as table_comment\n      from duckdb_views() v\n      WHERE v.database_name = '{{ database }}'\n    )\n    select\n        '{{ database }}' as table_database,\n        r.schema_name as table_schema,\n        r.table_name,\n        r.table_type,\n        r.table_comment,\n        c.column_name,\n        c.column_index as column_index,\n        c.data_type as column_type,\n        {{ adapter.catalog_comment('c') }} as column_comment,\n        '' as table_owner\n    FROM relations r JOIN duckdb_columns() c ON r.schema_name = c.schema_name AND r.table_name = c.table_name\n    WHERE (\n        {%- for schema in schemas -%}\n          upper(r.schema_name) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n    )\n    ORDER BY\n        r.schema_name,\n        r.table_name,\n        c.column_index\n  {%- endcall -%}\n  {{ return(load_result('catalog').table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.3218296, "supported_languages": null}, "macro.dbt_duckdb.duckdb__alter_relation_add_remove_columns": {"name": "duckdb__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros\\columns.sql", "original_file_path": "macros\\columns.sql", "unique_id": "macro.dbt_duckdb.duckdb__alter_relation_add_remove_columns", "macro_sql": "{% macro duckdb__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns %}\n    {% for column in add_columns %}\n      {% set sql -%}\n         alter {{ relation.type }} {{ relation }} add column\n           {{ column.name }} {{ column.data_type }}\n      {%- endset -%}\n      {% do run_query(sql) %}\n    {% endfor %}\n  {% endif %}\n\n  {% if remove_columns %}\n    {% for column in remove_columns %}\n      {% set sql -%}\n        alter {{ relation.type }} {{ relation }} drop column\n          {{ column.name }}\n      {%- endset -%}\n      {% do run_query(sql) %}\n    {% endfor %}\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.3298342, "supported_languages": null}, "macro.dbt_duckdb.duckdb__get_delete_insert_merge_sql": {"name": "duckdb__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros\\incremental_helper.sql", "original_file_path": "macros\\incremental_helper.sql", "unique_id": "macro.dbt_duckdb.duckdb__get_delete_insert_merge_sql", "macro_sql": "{% macro duckdb__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }} as DBT_INCREMENTAL_TARGET\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = DBT_INCREMENTAL_TARGET.{{ key }}\n                    {{ \"and \" if not loop.last}}\n                {% endfor %}\n                {% if incremental_predicates %}\n                    {% for predicate in incremental_predicates %}\n                        and {{ predicate }}\n                    {% endfor %}\n                {% endif %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            )\n            {%- if incremental_predicates %}\n                {% for predicate in incremental_predicates %}\n                    and {{ predicate }}\n                {% endfor %}\n            {%- endif -%};\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.3498373, "supported_languages": null}, "macro.dbt_duckdb.duckdb_escape_comment": {"name": "duckdb_escape_comment", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros\\persist_docs.sql", "original_file_path": "macros\\persist_docs.sql", "unique_id": "macro.dbt_duckdb.duckdb_escape_comment", "macro_sql": "{% macro duckdb_escape_comment(comment) -%}\n  {% if comment is not string %}\n    {% do exceptions.raise_compiler_error('cannot escape a non-string: ' ~ comment) %}\n  {% endif %}\n  {%- set magic = '$dbt_comment_literal_block$' -%}\n  {%- if magic in comment -%}\n    {%- do exceptions.raise_compiler_error('The string ' ~ magic ~ ' is not allowed in comments.') -%}\n  {%- endif -%}\n  {{ magic }}{{ comment }}{{ magic }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.36562, "supported_languages": null}, "macro.dbt_duckdb.duckdb__alter_relation_comment": {"name": "duckdb__alter_relation_comment", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros\\persist_docs.sql", "original_file_path": "macros\\persist_docs.sql", "unique_id": "macro.dbt_duckdb.duckdb__alter_relation_comment", "macro_sql": "{% macro duckdb__alter_relation_comment(relation, comment) %}\n  {% set escaped_comment = duckdb_escape_comment(comment) %}\n  comment on {{ relation.type }} {{ relation }} is {{ escaped_comment }};\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb_escape_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.3696036, "supported_languages": null}, "macro.dbt_duckdb.duckdb__alter_column_comment": {"name": "duckdb__alter_column_comment", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros\\persist_docs.sql", "original_file_path": "macros\\persist_docs.sql", "unique_id": "macro.dbt_duckdb.duckdb__alter_column_comment", "macro_sql": "{% macro duckdb__alter_column_comment(relation, column_dict) %}\n  {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n  {% for column_name in column_dict if (column_name in existing_columns) %}\n    {% set comment = column_dict[column_name]['description'] %}\n    {% set escaped_comment = duckdb_escape_comment(comment) %}\n    comment on column {{ relation }}.{{ adapter.quote(column_name) if column_dict[column_name]['quote'] else column_name }} is {{ escaped_comment }};\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb_escape_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.3751402, "supported_languages": null}, "macro.dbt_duckdb.duckdb__get_binding_char": {"name": "duckdb__get_binding_char", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros\\seed.sql", "original_file_path": "macros\\seed.sql", "unique_id": "macro.dbt_duckdb.duckdb__get_binding_char", "macro_sql": "{% macro duckdb__get_binding_char() %}\n  {{ return(adapter.get_binding_char()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.3861392, "supported_languages": null}, "macro.dbt_duckdb.duckdb__get_batch_size": {"name": "duckdb__get_batch_size", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros\\seed.sql", "original_file_path": "macros\\seed.sql", "unique_id": "macro.dbt_duckdb.duckdb__get_batch_size", "macro_sql": "{% macro duckdb__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.3871396, "supported_languages": null}, "macro.dbt_duckdb.duckdb__load_csv_rows": {"name": "duckdb__load_csv_rows", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros\\seed.sql", "original_file_path": "macros\\seed.sql", "unique_id": "macro.dbt_duckdb.duckdb__load_csv_rows", "macro_sql": "{% macro duckdb__load_csv_rows(model, agate_table) %}\n    {% if config.get('fast', true) %}\n        {% set seed_file_path = adapter.get_seed_file_path(model) %}\n        {% set delimiter = config.get('delimiter', ',') %}\n        {% set sql %}\n          COPY {{ this.render() }} FROM '{{ seed_file_path }}' (FORMAT CSV, HEADER TRUE, DELIMITER '{{ delimiter }}')\n        {% endset %}\n        {% do adapter.add_query(sql, abridge_sql_log=True) %}\n        {{ return(sql) }}\n    {% endif %}\n\n    {% set batch_size = get_batch_size() %}\n    {% set agate_table = adapter.convert_datetimes_to_strs(agate_table) %}\n    {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n    {% set bindings = [] %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n            {% do bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            insert into {{ this.render() }} ({{ cols_sql }}) values\n            {% for row in chunk -%}\n                ({%- for column in agate_table.column_names -%}\n                    {{ get_binding_char() }}\n                    {%- if not loop.last%},{%- endif %}\n                {%- endfor -%})\n                {%- if not loop.last%},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n\n        {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n        {% if loop.index0 == 0 %}\n            {% do statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.4063292, "supported_languages": null}, "macro.dbt_duckdb.duckdb__snapshot_merge_sql": {"name": "duckdb__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros\\snapshot_helper.sql", "original_file_path": "macros\\snapshot_helper.sql", "unique_id": "macro.dbt_duckdb.duckdb__snapshot_merge_sql", "macro_sql": "{% macro duckdb__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    update {{ target }} as DBT_INTERNAL_TARGET\n    set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_scd_id::text = DBT_INTERNAL_TARGET.dbt_scd_id::text\n      and DBT_INTERNAL_SOURCE.dbt_change_type::text in ('update'::text, 'delete'::text)\n      and DBT_INTERNAL_TARGET.dbt_valid_to is null;\n\n    insert into {{ target }} ({{ insert_cols_csv }})\n    select {% for column in insert_cols -%}\n        DBT_INTERNAL_SOURCE.{{ column }} {%- if not loop.last %}, {%- endif %}\n    {%- endfor %}\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_change_type::text = 'insert'::text;\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.4207323, "supported_languages": null}, "macro.dbt_duckdb.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros\\snapshot_helper.sql", "original_file_path": "macros\\snapshot_helper.sql", "unique_id": "macro.dbt_duckdb.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(False, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.4247355, "supported_languages": null}, "macro.dbt_duckdb.duckdb__post_snapshot": {"name": "duckdb__post_snapshot", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros\\snapshot_helper.sql", "original_file_path": "macros\\snapshot_helper.sql", "unique_id": "macro.dbt_duckdb.duckdb__post_snapshot", "macro_sql": "{% macro duckdb__post_snapshot(staging_relation) %}\n    {% do return(drop_relation(staging_relation)) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.4267445, "supported_languages": null}, "macro.dbt_duckdb.materialization_external_duckdb": {"name": "materialization_external_duckdb", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros\\materializations\\external.sql", "original_file_path": "macros\\materializations\\external.sql", "unique_id": "macro.dbt_duckdb.materialization_external_duckdb", "macro_sql": "{% materialization external, adapter=\"duckdb\", supported_languages=['sql', 'python'] %}\n\n  {%- set location = render(config.get('location', default=external_location(this, config))) -%})\n  {%- set rendered_options = render_write_options(config) -%}\n  {%- set format = config.get('format', 'parquet') -%}\n  {%- set write_options = adapter.external_write_options(location, rendered_options) -%}\n  {%- set read_location = adapter.external_read_location(location, rendered_options) -%}\n\n  -- set language - python or sql\n  {%- set language = model['language'] -%}\n\n  {%- set target_relation = this.incorporate(type='view') %}\n\n  -- Continue as normal materialization\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set temp_relation =  make_intermediate_relation(this.incorporate(type='table'), suffix='__dbt_tmp') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation, suffix='__dbt_int') -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_temp_relation = load_cached_relation(temp_relation) -%}\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_temp_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('create_table', language=language) -%}\n    {{- create_table_as(False, temp_relation, compiled_code, language) }}\n  {%- endcall %}\n\n  -- write an temp relation into file\n  {{ write_to_file(temp_relation, location, write_options) }}\n  -- create a view on top of the location\n  {% call statement('main', language='sql') -%}\n    create or replace view {{ intermediate_relation }} as (\n        select * from '{{ read_location }}'\n    );\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n      {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n  {{ drop_relation_if_exists(temp_relation) }}\n\n  -- register table into glue\n  {%- set plugin_name = config.get('plugin') -%}\n  {%- set glue_register = config.get('glue_register', default=false) -%}\n  {%- set partition_columns = config.get('partition_columns', []) -%}\n  {% if plugin_name is not none or glue_register is true %}\n    {% if glue_register %}\n      {# legacy hack to set the glue database name, deprecate this #}\n      {%- set plugin_name = 'glue|' ~ config.get('glue_database', 'default') -%}\n    {% endif %}\n    {% do store_relation(plugin_name, target_relation, location, format, config) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt_duckdb.external_location", "macro.dbt_duckdb.render_write_options", "macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt_duckdb.write_to_file", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_duckdb.store_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.4703195, "supported_languages": ["sql", "python"]}, "macro.dbt_duckdb.materialization_incremental_duckdb": {"name": "materialization_incremental_duckdb", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros\\materializations\\incremental.sql", "original_file_path": "macros\\materializations\\incremental.sql", "unique_id": "macro.dbt_duckdb.materialization_incremental_duckdb", "macro_sql": "{% materialization incremental, adapter=\"duckdb\", supported_languages=['sql', 'python'] -%}\n\n  {%- set language = model['language'] -%}\n  -- only create temp tables if using local duckdb, as it is not currently supported for remote databases\n  {%- set temporary = not adapter.is_motherduck() -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n    {% set build_sql = create_table_as(False, target_relation, compiled_code, language) %}\n  {% elif full_refresh_mode %}\n    {% set build_sql = create_table_as(False, intermediate_relation, compiled_code, language) %}\n    {% set need_swap = true %}\n  {% else %}\n    {% if not temporary %}\n      -- if not using a temporary table we will update the temp relation to use a different temp schema (\"dbt_temp\" by default)\n      {% set temp_relation = temp_relation.incorporate(path=adapter.get_temp_relation_path(this)) %}\n      {% do run_query(create_schema(temp_relation)) %}\n      -- then drop the temp relation after we insert the incremental data into the target relation\n      {% do to_drop.append(temp_relation) %}\n    {% endif %}\n    {% if language == 'python' %}\n      {% set build_python = create_table_as(False, temp_relation, compiled_code, language) %}\n      {% call statement(\"pre\", language=language) %}\n        {{- build_python }}\n      {% endcall %}\n    {% else %} {# SQL #}\n      {% do run_query(create_table_as(temporary, temp_relation, compiled_code, language)) %}\n    {% endif %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n    {% set language = \"sql\" %}\n\n  {% endif %}\n\n  {% call statement(\"main\", language=language) %}\n      {{- build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt.create_schema", "macro.dbt.statement", "macro.dbt.process_schema_changes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.5496483, "supported_languages": ["sql", "python"]}, "macro.dbt_duckdb.materialization_table_duckdb": {"name": "materialization_table_duckdb", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros\\materializations\\table.sql", "original_file_path": "macros\\materializations\\table.sql", "unique_id": "macro.dbt_duckdb.materialization_table_duckdb", "macro_sql": "{% materialization table, adapter=\"duckdb\", supported_languages=['sql', 'python'] %}\n\n  {%- set language = model['language'] -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main', language=language) -%}\n    {{- create_table_as(False, intermediate_relation, compiled_code, language) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n      {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.580818, "supported_languages": ["sql", "python"]}, "macro.dbt_duckdb.duckdb__any_value": {"name": "duckdb__any_value", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros\\utils\\any_value.sql", "original_file_path": "macros\\utils\\any_value.sql", "unique_id": "macro.dbt_duckdb.duckdb__any_value", "macro_sql": "{% macro duckdb__any_value(expression) -%}\n\n    arbitrary({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.581831, "supported_languages": null}, "macro.dbt_duckdb.duckdb__dateadd": {"name": "duckdb__dateadd", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros\\utils\\dateadd.sql", "original_file_path": "macros\\utils\\dateadd.sql", "unique_id": "macro.dbt_duckdb.duckdb__dateadd", "macro_sql": "{% macro duckdb__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    date_add({{ from_date_or_timestamp }}, interval ({{ interval }}) {{ datepart }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.5838146, "supported_languages": null}, "macro.dbt_duckdb.duckdb__datediff": {"name": "duckdb__datediff", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros\\utils\\datediff.sql", "original_file_path": "macros\\utils\\datediff.sql", "unique_id": "macro.dbt_duckdb.duckdb__datediff", "macro_sql": "{% macro duckdb__datediff(first_date, second_date, datepart) -%}\n    {% if datepart == 'week' %}\n            ({{ datediff(first_date, second_date, 'day') }} // 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% else %}\n        (date_diff('{{ datepart }}', {{ first_date }}::timestamp, {{ second_date}}::timestamp ))\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.5881224, "supported_languages": null}, "macro.dbt_duckdb.external_location": {"name": "external_location", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros\\utils\\external_location.sql", "original_file_path": "macros\\utils\\external_location.sql", "unique_id": "macro.dbt_duckdb.external_location", "macro_sql": "{%- macro external_location(relation, config) -%}\n  {%- if config.get('options', {}).get('partition_by') is none -%}\n    {%- set format = config.get('format', 'parquet') -%}\n    {{- adapter.external_root() }}/{{ relation.identifier }}.{{ format }}\n  {%- else -%}\n    {{- adapter.external_root() }}/{{ relation.identifier }}\n  {%- endif -%}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.5941064, "supported_languages": null}, "macro.dbt_duckdb.duckdb__last_day": {"name": "duckdb__last_day", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros\\utils\\lastday.sql", "original_file_path": "macros\\utils\\lastday.sql", "unique_id": "macro.dbt_duckdb.duckdb__last_day", "macro_sql": "{% macro duckdb__last_day(date, datepart) -%}\n\n    {%- if datepart == 'quarter' -%}\n    -- duckdb dateadd does not support quarter interval.\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd('month', '3', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n    {%- else -%}\n    {{dbt.default_last_day(date, datepart)}}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc", "macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.5989952, "supported_languages": null}, "macro.dbt_duckdb.duckdb__listagg": {"name": "duckdb__listagg", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros\\utils\\listagg.sql", "original_file_path": "macros\\utils\\listagg.sql", "unique_id": "macro.dbt_duckdb.duckdb__listagg", "macro_sql": "{% macro duckdb__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n    {% if limit_num -%}\n    list_aggr(\n        (array_agg(\n            {{ measure }}\n            {% if order_by_clause -%}\n            {{ order_by_clause }}\n            {%- endif %}\n        ))[1:{{ limit_num }}],\n        'string_agg',\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        )\n    {%- endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.604036, "supported_languages": null}, "macro.dbt_duckdb.duckdb__split_part": {"name": "duckdb__split_part", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros\\utils\\splitpart.sql", "original_file_path": "macros\\utils\\splitpart.sql", "unique_id": "macro.dbt_duckdb.duckdb__split_part", "macro_sql": "{% macro duckdb__split_part(string_text, delimiter_text, part_number) %}\n    string_split({{ string_text }}, {{ delimiter_text }})[ {{ part_number }} ]\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.606037, "supported_languages": null}, "macro.dbt_duckdb.register_upstream_external_models": {"name": "register_upstream_external_models", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros\\utils\\upstream.sql", "original_file_path": "macros\\utils\\upstream.sql", "unique_id": "macro.dbt_duckdb.register_upstream_external_models", "macro_sql": "{%- macro register_upstream_external_models() -%}\n{% if execute %}\n{% set upstream_nodes = {} %}\n{% set upstream_schemas = {} %}\n{% for node in selected_resources %}\n  {% for upstream_node in graph['nodes'][node]['depends_on']['nodes'] %}\n    {% if upstream_node not in upstream_nodes and upstream_node not in selected_resources %}\n      {% do upstream_nodes.update({upstream_node: None}) %}\n      {% set upstream = graph['nodes'].get(upstream_node) %}\n      {% if upstream\n         and upstream.resource_type in ('model', 'seed')\n         and upstream.config.materialized=='external'\n      %}\n        {%- set upstream_rel = api.Relation.create(\n          database=upstream['database'],\n          schema=upstream['schema'],\n          identifier=upstream['alias']\n        ) -%}\n        {%- set location = upstream.config.get('location', external_location(upstream_rel, upstream.config)) -%}\n        {%- set rendered_options = render_write_options(upstream.config) -%}\n        {%- set upstream_location = adapter.external_read_location(location, rendered_options) -%}\n        {% if upstream_rel.schema not in upstream_schemas %}\n          {% call statement('main', language='sql') -%}\n            create schema if not exists {{ upstream_rel.schema }}\n          {%- endcall %}\n          {% do upstream_schemas.update({upstream_rel.schema: None}) %}\n        {% endif %}\n        {% call statement('main', language='sql') -%}\n          create or replace view {{ upstream_rel }} as (\n            select * from '{{ upstream_location }}'\n          );\n        {%- endcall %}\n      {%- endif %}\n    {% endif %}\n  {% endfor %}\n{% endfor %}\n{% do adapter.commit() %}\n{% endif %}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_duckdb.external_location", "macro.dbt_duckdb.render_write_options", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.6270783, "supported_languages": null}, "macro.dbt.copy_grants": {"name": "copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.6416068, "supported_languages": null}, "macro.dbt.default__copy_grants": {"name": "default__copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.6436062, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"name": "support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.6446044, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"name": "default__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.6446044, "supported_languages": null}, "macro.dbt.should_revoke": {"name": "should_revoke", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.649128, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"name": "get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.6516106, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"name": "default__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation.render() }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.653133, "supported_languages": null}, "macro.dbt.get_grant_sql": {"name": "get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.6551309, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"name": "default__get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation.render() }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.6571283, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"name": "get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.6591318, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"name": "default__get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation.render() }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.661641, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"name": "get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.6636524, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"name": "default__get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.6696565, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"name": "call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.6706555, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"name": "default__call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.6741674, "supported_languages": null}, "macro.dbt.apply_grants": {"name": "apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.677135, "supported_languages": null}, "macro.dbt.default__apply_grants": {"name": "default__apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation.render() ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.6871917, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"name": "get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.7037253, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"name": "default__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.705736, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"name": "sql_convert_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.7082453, "supported_languages": null}, "macro.dbt.get_empty_subquery_sql": {"name": "get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.get_empty_subquery_sql", "macro_sql": "{% macro get_empty_subquery_sql(select_sql, select_sql_header=none) -%}\n  {{ return(adapter.dispatch('get_empty_subquery_sql', 'dbt')(select_sql, select_sql_header)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.7102573, "supported_languages": null}, "macro.dbt.default__get_empty_subquery_sql": {"name": "default__get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.default__get_empty_subquery_sql", "macro_sql": "{% macro default__get_empty_subquery_sql(select_sql, select_sql_header=none) %}\n    {%- if select_sql_header is not none -%}\n    {{ select_sql_header }}\n    {%- endif -%}\n    select * from (\n        {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.7112567, "supported_languages": null}, "macro.dbt.get_empty_schema_sql": {"name": "get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.get_empty_schema_sql", "macro_sql": "{% macro get_empty_schema_sql(columns) -%}\n  {{ return(adapter.dispatch('get_empty_schema_sql', 'dbt')(columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_schema_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.714257, "supported_languages": null}, "macro.dbt.default__get_empty_schema_sql": {"name": "default__get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.default__get_empty_schema_sql", "macro_sql": "{% macro default__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    {%- set col_naked_numeric = [] -%}\n    select\n    {% for i in columns %}\n      {%- set col = columns[i] -%}\n      {%- if col['data_type'] is not defined -%}\n        {%- do col_err.append(col['name']) -%}\n      {#-- If this column's type is just 'numeric' then it is missing precision/scale, raise a warning --#}\n      {%- elif col['data_type'].strip().lower() in ('numeric', 'decimal', 'number') -%}\n        {%- do col_naked_numeric.append(col['name']) -%}\n      {%- endif -%}\n      {% set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] %}\n      {{ cast('null', col['data_type']) }} as {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- elif (col_naked_numeric | length) > 0 -%}\n      {{ exceptions.warn(\"Detected columns with numeric type and unspecified precision/scale, this can lead to unintended rounding: \" ~ col_naked_numeric ~ \"`\") }}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.7248552, "supported_languages": null}, "macro.dbt.get_column_schema_from_query": {"name": "get_column_schema_from_query", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.get_column_schema_from_query", "macro_sql": "{% macro get_column_schema_from_query(select_sql, select_sql_header=none) -%}\n    {% set columns = [] %}\n    {# -- Using an 'empty subquery' here to get the same schema as the given select_sql statement, without necessitating a data scan.#}\n    {% set sql = get_empty_subquery_sql(select_sql, select_sql_header) %}\n    {% set column_schema = adapter.get_column_schema_from_query(sql) %}\n    {{ return(column_schema) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.7283707, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"name": "get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.7293742, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"name": "default__get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        {{ get_empty_subquery_sql(select_sql) }}\n    {% endcall %}\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.7333846, "supported_languages": null}, "macro.dbt.alter_column_type": {"name": "alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.7369208, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"name": "default__alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation.render() }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation.render() }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation.render() }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation.render() }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.7426693, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"name": "alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.7446508, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"name": "default__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation.render() }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.7541873, "supported_languages": null}, "macro.dbt.collect_freshness": {"name": "collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\freshness.sql", "original_file_path": "macros\\adapters\\freshness.sql", "unique_id": "macro.dbt.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.7571683, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"name": "default__collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\freshness.sql", "original_file_path": "macros\\adapters\\freshness.sql", "unique_id": "macro.dbt.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.7596817, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"name": "get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.7656941, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"name": "default__get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.766695, "supported_languages": null}, "macro.dbt.create_indexes": {"name": "create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.7686975, "supported_languages": null}, "macro.dbt.default__create_indexes": {"name": "default__create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.7722213, "supported_languages": null}, "macro.dbt.get_drop_index_sql": {"name": "get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.get_drop_index_sql", "macro_sql": "{% macro get_drop_index_sql(relation, index_name) -%}\n    {{ adapter.dispatch('get_drop_index_sql', 'dbt')(relation, index_name) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_drop_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.774219, "supported_languages": null}, "macro.dbt.default__get_drop_index_sql": {"name": "default__get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.default__get_drop_index_sql", "macro_sql": "{% macro default__get_drop_index_sql(relation, index_name) -%}\n    {{ exceptions.raise_compiler_error(\"`get_drop_index_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.7752194, "supported_languages": null}, "macro.dbt.get_show_indexes_sql": {"name": "get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.get_show_indexes_sql", "macro_sql": "{% macro get_show_indexes_sql(relation) -%}\n    {{ adapter.dispatch('get_show_indexes_sql', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_show_indexes_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.7762191, "supported_languages": null}, "macro.dbt.default__get_show_indexes_sql": {"name": "default__get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.default__get_show_indexes_sql", "macro_sql": "{% macro default__get_show_indexes_sql(relation) -%}\n    {{ exceptions.raise_compiler_error(\"`get_show_indexes_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.7772174, "supported_languages": null}, "macro.dbt.get_catalog_relations": {"name": "get_catalog_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.get_catalog_relations", "macro_sql": "{% macro get_catalog_relations(information_schema, relations) -%}\n  {{ return(adapter.dispatch('get_catalog_relations', 'dbt')(information_schema, relations)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_catalog_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.8081667, "supported_languages": null}, "macro.dbt.default__get_catalog_relations": {"name": "default__get_catalog_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__get_catalog_relations", "macro_sql": "{% macro default__get_catalog_relations(information_schema, relations) -%}\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog_relations not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.8111668, "supported_languages": null}, "macro.dbt.get_catalog": {"name": "get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.814166, "supported_languages": null}, "macro.dbt.default__get_catalog": {"name": "default__get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.8161674, "supported_languages": null}, "macro.dbt.information_schema_name": {"name": "information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.8176801, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"name": "default__information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.8196917, "supported_languages": null}, "macro.dbt.list_schemas": {"name": "list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.8216896, "supported_languages": null}, "macro.dbt.default__list_schemas": {"name": "default__list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.8226922, "supported_languages": null}, "macro.dbt.check_schema_exists": {"name": "check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.8244631, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"name": "default__check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.8274736, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"name": "list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.8294735, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"name": "default__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.8400097, "supported_languages": null}, "macro.dbt.get_catalog_for_single_relation": {"name": "get_catalog_for_single_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.get_catalog_for_single_relation", "macro_sql": "{% macro get_catalog_for_single_relation(relation) %}\n  {{ return(adapter.dispatch('get_catalog_for_single_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_catalog_for_single_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.841629, "supported_languages": null}, "macro.dbt.default__get_catalog_for_single_relation": {"name": "default__get_catalog_for_single_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__get_catalog_for_single_relation", "macro_sql": "{% macro default__get_catalog_for_single_relation(relation) %}\n  {{ exceptions.raise_not_implemented(\n    'get_catalog_for_single_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.8436322, "supported_languages": null}, "macro.dbt.get_relations": {"name": "get_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.get_relations", "macro_sql": "{% macro get_relations() %}\n  {{ return(adapter.dispatch('get_relations', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.8456316, "supported_languages": null}, "macro.dbt.default__get_relations": {"name": "default__get_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__get_relations", "macro_sql": "{% macro default__get_relations() %}\n  {{ exceptions.raise_not_implemented(\n    'get_relations macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.8476298, "supported_languages": null}, "macro.dbt.get_relation_last_modified": {"name": "get_relation_last_modified", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.get_relation_last_modified", "macro_sql": "{% macro get_relation_last_modified(information_schema, relations) %}\n  {{ return(adapter.dispatch('get_relation_last_modified', 'dbt')(information_schema, relations)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_relation_last_modified"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.8486338, "supported_languages": null}, "macro.dbt.default__get_relation_last_modified": {"name": "default__get_relation_last_modified", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__get_relation_last_modified", "macro_sql": "{% macro default__get_relation_last_modified(information_schema, relations) %}\n  {{ exceptions.raise_not_implemented(\n    'get_relation_last_modified macro not implemented for adapter ' + adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.849632, "supported_languages": null}, "macro.dbt.alter_column_comment": {"name": "alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.8581553, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"name": "default__alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.85916, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"name": "alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.861156, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"name": "default__alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.8626812, "supported_languages": null}, "macro.dbt.persist_docs": {"name": "persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.8656907, "supported_languages": null}, "macro.dbt.default__persist_docs": {"name": "default__persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.870679, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"name": "make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.8842149, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"name": "default__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.885214, "supported_languages": null}, "macro.dbt.make_temp_relation": {"name": "make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.8872178, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"name": "default__make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.8892145, "supported_languages": null}, "macro.dbt.make_backup_relation": {"name": "make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.8927417, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"name": "default__make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.8947518, "supported_languages": null}, "macro.dbt.truncate_relation": {"name": "truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.8957422, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"name": "default__truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation.render() }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.8977566, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"name": "get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.8997433, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"name": "default__get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.9032512, "supported_languages": null}, "macro.dbt.load_cached_relation": {"name": "load_cached_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.9052658, "supported_languages": null}, "macro.dbt.load_relation": {"name": "load_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.906271, "supported_languages": null}, "macro.dbt.create_schema": {"name": "create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "unique_id": "macro.dbt.create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.9092667, "supported_languages": null}, "macro.dbt.default__create_schema": {"name": "default__create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "unique_id": "macro.dbt.default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.911781, "supported_languages": null}, "macro.dbt.drop_schema": {"name": "drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "unique_id": "macro.dbt.drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.9137993, "supported_languages": null}, "macro.dbt.default__drop_schema": {"name": "default__drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "unique_id": "macro.dbt.default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.9157941, "supported_languages": null}, "macro.dbt.get_show_sql": {"name": "get_show_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\show.sql", "original_file_path": "macros\\adapters\\show.sql", "unique_id": "macro.dbt.get_show_sql", "macro_sql": "{% macro get_show_sql(compiled_code, sql_header, limit) -%}\n  {%- if sql_header is not none -%}\n  {{ sql_header }}\n  {%- endif %}\n  {{ get_limit_subquery_sql(compiled_code, limit) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_limit_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.9185178, "supported_languages": null}, "macro.dbt.get_limit_subquery_sql": {"name": "get_limit_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\show.sql", "original_file_path": "macros\\adapters\\show.sql", "unique_id": "macro.dbt.get_limit_subquery_sql", "macro_sql": "\n{%- macro get_limit_subquery_sql(sql, limit) -%}\n  {{ adapter.dispatch('get_limit_sql', 'dbt')(sql, limit) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_limit_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.9205165, "supported_languages": null}, "macro.dbt.default__get_limit_sql": {"name": "default__get_limit_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\show.sql", "original_file_path": "macros\\adapters\\show.sql", "unique_id": "macro.dbt.default__get_limit_sql", "macro_sql": "{% macro default__get_limit_sql(sql, limit) %}\n  {{ compiled_code }}\n  {% if limit is not none %}\n  limit {{ limit }}\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.9225166, "supported_languages": null}, "macro.dbt.current_timestamp": {"name": "current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.9275157, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"name": "default__current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.928027, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"name": "snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.9290378, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"name": "default__snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.9300382, "supported_languages": null}, "macro.dbt.get_snapshot_get_time_data_type": {"name": "get_snapshot_get_time_data_type", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.get_snapshot_get_time_data_type", "macro_sql": "{% macro get_snapshot_get_time_data_type() %}\n    {% set snapshot_time = adapter.dispatch('snapshot_get_time', 'dbt')() %}\n    {% set time_data_type_sql = 'select ' ~ snapshot_time ~ ' as dbt_snapshot_time' %}\n    {% set snapshot_time_column_schema = get_column_schema_from_query(time_data_type_sql) %}\n    {% set time_data_type = snapshot_time_column_schema[0].dtype %}\n    {{ return(time_data_type or none) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt_duckdb.duckdb__snapshot_get_time", "macro.dbt.get_column_schema_from_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.9365795, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"name": "current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.9395795, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"name": "default__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.9395795, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"name": "current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.9425802, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"name": "default__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt.default__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.9435787, "supported_languages": null}, "macro.dbt.validate_sql": {"name": "validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\validate_sql.sql", "original_file_path": "macros\\adapters\\validate_sql.sql", "unique_id": "macro.dbt.validate_sql", "macro_sql": "{% macro validate_sql(sql) -%}\n  {{ return(adapter.dispatch('validate_sql', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__validate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.9471223, "supported_languages": null}, "macro.dbt.default__validate_sql": {"name": "default__validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\validate_sql.sql", "original_file_path": "macros\\adapters\\validate_sql.sql", "unique_id": "macro.dbt.default__validate_sql", "macro_sql": "{% macro default__validate_sql(sql) -%}\n  {% call statement('validate_sql') -%}\n    explain {{ sql }}\n  {% endcall %}\n  {{ return(load_result('validate_sql')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.94877, "supported_languages": null}, "macro.dbt.convert_datetime": {"name": "convert_datetime", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "unique_id": "macro.dbt.convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.9652452, "supported_languages": null}, "macro.dbt.dates_in_range": {"name": "dates_in_range", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "unique_id": "macro.dbt.dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partition start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.977781, "supported_languages": null}, "macro.dbt.partition_range": {"name": "partition_range", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "unique_id": "macro.dbt.partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.983291, "supported_languages": null}, "macro.dbt.py_current_timestring": {"name": "py_current_timestring", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "unique_id": "macro.dbt.py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.9861252, "supported_languages": null}, "macro.dbt.statement": {"name": "statement", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\statement.sql", "original_file_path": "macros\\etc\\statement.sql", "unique_id": "macro.dbt.statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205802.9986799, "supported_languages": null}, "macro.dbt.noop_statement": {"name": "noop_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\statement.sql", "original_file_path": "macros\\etc\\statement.sql", "unique_id": "macro.dbt.noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205803.0042048, "supported_languages": null}, "macro.dbt.run_query": {"name": "run_query", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\statement.sql", "original_file_path": "macros\\etc\\statement.sql", "unique_id": "macro.dbt.run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205803.0082066, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"name": "default__test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "macros\\generic_test_sql\\accepted_values.sql", "original_file_path": "macros\\generic_test_sql\\accepted_values.sql", "unique_id": "macro.dbt.default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205803.01573, "supported_languages": null}, "macro.dbt.default__test_not_null": {"name": "default__test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros\\generic_test_sql\\not_null.sql", "original_file_path": "macros\\generic_test_sql\\not_null.sql", "unique_id": "macro.dbt.default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205803.0187292, "supported_languages": null}, "macro.dbt.default__test_relationships": {"name": "default__test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "macros\\generic_test_sql\\relationships.sql", "original_file_path": "macros\\generic_test_sql\\relationships.sql", "unique_id": "macro.dbt.default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205803.0212545, "supported_languages": null}, "macro.dbt.default__test_unique": {"name": "default__test_unique", "resource_type": "macro", "package_name": "dbt", "path": "macros\\generic_test_sql\\unique.sql", "original_file_path": "macros\\generic_test_sql\\unique.sql", "unique_id": "macro.dbt.default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205803.0232546, "supported_languages": null}, "macro.dbt.generate_alias_name": {"name": "generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_alias.sql", "original_file_path": "macros\\get_custom_name\\get_custom_alias.sql", "unique_id": "macro.dbt.generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205803.0262532, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"name": "default__generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_alias.sql", "original_file_path": "macros\\get_custom_name\\get_custom_alias.sql", "unique_id": "macro.dbt.default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- elif node.version -%}\n\n        {{ return(node.name ~ \"_v\" ~ (node.version | replace(\".\", \"_\"))) }}\n\n    {%- else -%}\n\n        {{ node.name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205803.0291128, "supported_languages": null}, "macro.dbt.generate_database_name": {"name": "generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_database.sql", "original_file_path": "macros\\get_custom_name\\get_custom_database.sql", "unique_id": "macro.dbt.generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205803.0331278, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"name": "default__generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_database.sql", "original_file_path": "macros\\get_custom_name\\get_custom_database.sql", "unique_id": "macro.dbt.default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205803.036132, "supported_languages": null}, "macro.dbt.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_schema.sql", "original_file_path": "macros\\get_custom_name\\get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205803.0496294, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"name": "default__generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_schema.sql", "original_file_path": "macros\\get_custom_name\\get_custom_schema.sql", "unique_id": "macro.dbt.default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205803.057246, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"name": "generate_schema_name_for_env", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_schema.sql", "original_file_path": "macros\\get_custom_name\\get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205803.0612597, "supported_languages": null}, "macro.dbt.set_sql_header": {"name": "set_sql_header", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\configs.sql", "original_file_path": "macros\\materializations\\configs.sql", "unique_id": "macro.dbt.set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205803.0652583, "supported_languages": null}, "macro.dbt.should_full_refresh": {"name": "should_full_refresh", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\configs.sql", "original_file_path": "macros\\materializations\\configs.sql", "unique_id": "macro.dbt.should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205803.067768, "supported_languages": null}, "macro.dbt.should_store_failures": {"name": "should_store_failures", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\configs.sql", "original_file_path": "macros\\materializations\\configs.sql", "unique_id": "macro.dbt.should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205803.0707834, "supported_languages": null}, "macro.dbt.run_hooks": {"name": "run_hooks", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "unique_id": "macro.dbt.run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205803.086318, "supported_languages": null}, "macro.dbt.make_hook_config": {"name": "make_hook_config", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "unique_id": "macro.dbt.make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205803.0883214, "supported_languages": null}, "macro.dbt.before_begin": {"name": "before_begin", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "unique_id": "macro.dbt.before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205803.0903199, "supported_languages": null}, "macro.dbt.in_transaction": {"name": "in_transaction", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "unique_id": "macro.dbt.in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205803.0923228, "supported_languages": null}, "macro.dbt.after_commit": {"name": "after_commit", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "unique_id": "macro.dbt.after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205803.0943232, "supported_languages": null}, "macro.dbt.materialization_materialized_view_default": {"name": "materialization_materialized_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\materialized_view.sql", "original_file_path": "macros\\materializations\\models\\materialized_view.sql", "unique_id": "macro.dbt.materialization_materialized_view_default", "macro_sql": "{% materialization materialized_view, default %}\n    {% set existing_relation = load_cached_relation(this) %}\n    {% set target_relation = this.incorporate(type=this.MaterializedView) %}\n    {% set intermediate_relation = make_intermediate_relation(target_relation) %}\n    {% set backup_relation_type = target_relation.MaterializedView if existing_relation is none else existing_relation.type %}\n    {% set backup_relation = make_backup_relation(target_relation, backup_relation_type) %}\n\n    {{ materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) }}\n\n        {% set build_sql = materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n        {% if build_sql == '' %}\n            {{ materialized_view_execute_no_op(target_relation) }}\n        {% else %}\n            {{ materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) }}\n        {% endif %}\n\n    {{ materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) }}\n\n    {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.materialized_view_setup", "macro.dbt.materialized_view_get_build_sql", "macro.dbt.materialized_view_execute_no_op", "macro.dbt.materialized_view_execute_build_sql", "macro.dbt.materialized_view_teardown"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205803.1617289, "supported_languages": ["sql"]}, "macro.dbt.materialized_view_setup": {"name": "materialized_view_setup", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\materialized_view.sql", "original_file_path": "macros\\materializations\\models\\materialized_view.sql", "unique_id": "macro.dbt.materialized_view_setup", "macro_sql": "{% macro materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) %}\n\n    -- backup_relation and intermediate_relation should not already exist in the database\n    -- it's possible these exist because of a previous run that exited unexpectedly\n    {% set preexisting_backup_relation = load_cached_relation(backup_relation) %}\n    {% set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) %}\n\n    -- drop the temp relations if they exist already in the database\n    {{ drop_relation_if_exists(preexisting_backup_relation) }}\n    {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n\n    {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205803.1657255, "supported_languages": null}, "macro.dbt.materialized_view_teardown": {"name": "materialized_view_teardown", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\materialized_view.sql", "original_file_path": "macros\\materializations\\models\\materialized_view.sql", "unique_id": "macro.dbt.materialized_view_teardown", "macro_sql": "{% macro materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) %}\n\n    -- drop the temp relations if they exist to leave the database clean for the next run\n    {{ drop_relation_if_exists(backup_relation) }}\n    {{ drop_relation_if_exists(intermediate_relation) }}\n\n    {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205803.167728, "supported_languages": null}, "macro.dbt.materialized_view_get_build_sql": {"name": "materialized_view_get_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\materialized_view.sql", "original_file_path": "macros\\materializations\\models\\materialized_view.sql", "unique_id": "macro.dbt.materialized_view_get_build_sql", "macro_sql": "{% macro materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n    {% set full_refresh_mode = should_full_refresh() %}\n\n    -- determine the scenario we're in: create, full_refresh, alter, refresh data\n    {% if existing_relation is none %}\n        {% set build_sql = get_create_materialized_view_as_sql(target_relation, sql) %}\n    {% elif full_refresh_mode or not existing_relation.is_materialized_view %}\n        {% set build_sql = get_replace_sql(existing_relation, target_relation, sql) %}\n    {% else %}\n\n        -- get config options\n        {% set on_configuration_change = config.get('on_configuration_change') %}\n        {% set configuration_changes = get_materialized_view_configuration_changes(existing_relation, config) %}\n\n        {% if configuration_changes is none %}\n            {% set build_sql = refresh_materialized_view(target_relation) %}\n\n        {% elif on_configuration_change == 'apply' %}\n            {% set build_sql = get_alter_materialized_view_as_sql(target_relation, configuration_changes, sql, existing_relation, backup_relation, intermediate_relation) %}\n        {% elif on_configuration_change == 'continue' %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"Configuration changes were identified and `on_configuration_change` was set to `continue` for `\" ~ target_relation.render() ~ \"`\") }}\n        {% elif on_configuration_change == 'fail' %}\n            {{ exceptions.raise_fail_fast_error(\"Configuration changes were identified and `on_configuration_change` was set to `fail` for `\" ~ target_relation.render() ~ \"`\") }}\n\n        {% else %}\n            -- this only happens if the user provides a value other than `apply`, 'skip', 'fail'\n            {{ exceptions.raise_compiler_error(\"Unexpected configuration scenario\") }}\n\n        {% endif %}\n\n    {% endif %}\n\n    {% do return(build_sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.get_create_materialized_view_as_sql", "macro.dbt.get_replace_sql", "macro.dbt.get_materialized_view_configuration_changes", "macro.dbt.refresh_materialized_view", "macro.dbt.get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205803.1881058, "supported_languages": null}, "macro.dbt.materialized_view_execute_no_op": {"name": "materialized_view_execute_no_op", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\materialized_view.sql", "original_file_path": "macros\\materializations\\models\\materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_no_op", "macro_sql": "{% macro materialized_view_execute_no_op(target_relation) %}\n    {% do store_raw_result(\n        name=\"main\",\n        message=\"skip \" ~ target_relation,\n        code=\"skip\",\n        rows_affected=\"-1\"\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205803.1911197, "supported_languages": null}, "macro.dbt.materialized_view_execute_build_sql": {"name": "materialized_view_execute_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\materialized_view.sql", "original_file_path": "macros\\materializations\\models\\materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_build_sql", "macro_sql": "{% macro materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) %}\n\n    -- `BEGIN` happens here:\n    {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n    {% set grant_config = config.get('grants') %}\n\n    {% call statement(name=\"main\") %}\n        {{ build_sql }}\n    {% endcall %}\n\n    {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n    {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n    {{ adapter.commit() }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205803.1981237, "supported_languages": null}, "macro.dbt.materialization_table_default": {"name": "materialization_table_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\table.sql", "original_file_path": "macros\\materializations\\models\\table.sql", "unique_id": "macro.dbt.materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205803.223941, "supported_languages": ["sql"]}, "macro.dbt.materialization_view_default": {"name": "materialization_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\view.sql", "original_file_path": "macros\\materializations\\models\\view.sql", "unique_id": "macro.dbt.materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205803.2549534, "supported_languages": ["sql"]}, "macro.dbt.can_clone_table": {"name": "can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\clone\\can_clone_table.sql", "original_file_path": "macros\\materializations\\models\\clone\\can_clone_table.sql", "unique_id": "macro.dbt.can_clone_table", "macro_sql": "{% macro can_clone_table() %}\n    {{ return(adapter.dispatch('can_clone_table', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__can_clone_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205803.2579508, "supported_languages": null}, "macro.dbt.default__can_clone_table": {"name": "default__can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\clone\\can_clone_table.sql", "original_file_path": "macros\\materializations\\models\\clone\\can_clone_table.sql", "unique_id": "macro.dbt.default__can_clone_table", "macro_sql": "{% macro default__can_clone_table() %}\n    {{ return(False) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205803.258459, "supported_languages": null}, "macro.dbt.materialization_clone_default": {"name": "materialization_clone_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\clone\\clone.sql", "original_file_path": "macros\\materializations\\models\\clone\\clone.sql", "unique_id": "macro.dbt.materialization_clone_default", "macro_sql": "{%- materialization clone, default -%}\n\n  {%- set relations = {'relations': []} -%}\n\n  {%- if not defer_relation -%}\n      -- nothing to do\n      {{ log(\"No relation found in state manifest for \" ~ model.unique_id, info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n\n  {%- if existing_relation and not flags.FULL_REFRESH -%}\n      -- noop!\n      {{ log(\"Relation \" ~ existing_relation ~ \" already exists\", info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set other_existing_relation = load_cached_relation(defer_relation) -%}\n\n  -- If this is a database that can do zero-copy cloning of tables, and the other relation is a table, then this will be a table\n  -- Otherwise, this will be a view\n\n  {% set can_clone_table = can_clone_table() %}\n\n  {%- if other_existing_relation and other_existing_relation.type == 'table' and can_clone_table -%}\n\n      {%- set target_relation = this.incorporate(type='table') -%}\n      {% if existing_relation is not none and not existing_relation.is_table %}\n        {{ log(\"Dropping relation \" ~ existing_relation.render() ~ \" because it is of type \" ~ existing_relation.type) }}\n        {{ drop_relation_if_exists(existing_relation) }}\n      {% endif %}\n\n      -- as a general rule, data platforms that can clone tables can also do atomic 'create or replace'\n      {% call statement('main') %}\n          {% if target_relation and defer_relation and target_relation == defer_relation %}\n              {{ log(\"Target relation and defer relation are the same, skipping clone for relation: \" ~ target_relation.render()) }}\n          {% else %}\n              {{ create_or_replace_clone(target_relation, defer_relation) }}\n          {% endif %}\n\n      {% endcall %}\n\n      {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n      {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n      {% do persist_docs(target_relation, model) %}\n\n      {{ return({'relations': [target_relation]}) }}\n\n  {%- else -%}\n\n      {%- set target_relation = this.incorporate(type='view') -%}\n\n      -- reuse the view materialization\n      -- TODO: support actual dispatch for materialization macros\n      -- Tracking ticket: https://github.com/dbt-labs/dbt-core/issues/7799\n      {% set search_name = \"materialization_view_\" ~ adapter.type() %}\n      {% if not search_name in context %}\n          {% set search_name = \"materialization_view_default\" %}\n      {% endif %}\n      {% set materialization_macro = context[search_name] %}\n      {% set relations = materialization_macro() %}\n      {{ return(relations) }}\n\n  {%- endif -%}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.can_clone_table", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_or_replace_clone", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205803.290162, "supported_languages": ["sql"]}, "macro.dbt.create_or_replace_clone": {"name": "create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\clone\\create_or_replace_clone.sql", "original_file_path": "macros\\materializations\\models\\clone\\create_or_replace_clone.sql", "unique_id": "macro.dbt.create_or_replace_clone", "macro_sql": "{% macro create_or_replace_clone(this_relation, defer_relation) %}\n    {{ return(adapter.dispatch('create_or_replace_clone', 'dbt')(this_relation, defer_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_or_replace_clone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205803.294162, "supported_languages": null}, "macro.dbt.default__create_or_replace_clone": {"name": "default__create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\clone\\create_or_replace_clone.sql", "original_file_path": "macros\\materializations\\models\\clone\\create_or_replace_clone.sql", "unique_id": "macro.dbt.default__create_or_replace_clone", "macro_sql": "{% macro default__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace table {{ this_relation.render() }} clone {{ defer_relation.render() }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205803.2961612, "supported_languages": null}, "macro.dbt.get_quoted_csv": {"name": "get_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "unique_id": "macro.dbt.get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205803.3066852, "supported_languages": null}, "macro.dbt.diff_columns": {"name": "diff_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "unique_id": "macro.dbt.diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205803.3122122, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"name": "diff_column_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "unique_id": "macro.dbt.diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205803.31921, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"name": "get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "unique_id": "macro.dbt.get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205803.3212097, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"name": "default__get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "unique_id": "macro.dbt.default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205803.327212, "supported_languages": null}, "macro.dbt.materialization_incremental_default": {"name": "materialization_incremental_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\incremental.sql", "original_file_path": "macros\\materializations\\models\\incremental\\incremental.sql", "unique_id": "macro.dbt.materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% set contract_config = config.get('contract') %}\n    {% if not contract_config or not contract_config.enforced %}\n      {% do adapter.expand_target_column_types(\n               from_relation=temp_relation,\n               to_relation=target_relation) %}\n    {% endif %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205803.3791602, "supported_languages": ["sql"]}, "macro.dbt.is_incremental": {"name": "is_incremental", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\is_incremental.sql", "original_file_path": "macros\\materializations\\models\\incremental\\is_incremental.sql", "unique_id": "macro.dbt.is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205803.3841205, "supported_languages": null}, "macro.dbt.get_merge_sql": {"name": "get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n   -- back compat for old kwarg name\n  {% set incremental_predicates = kwargs.get('predicates', incremental_predicates) %}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205803.4262025, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"name": "default__get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{\"(\" ~ predicates | join(\") and (\") ~ \")\"}}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205803.442726, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"name": "get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205803.4447248, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"name": "default__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last}}\n                {% endfor %}\n                {% if incremental_predicates %}\n                    {% for predicate in incremental_predicates %}\n                        and {{ predicate }}\n                    {% endfor %}\n                {% endif %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            )\n            {%- if incremental_predicates %}\n                {% for predicate in incremental_predicates %}\n                    and {{ predicate }}\n                {% endfor %}\n            {%- endif -%};\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205803.455728, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"name": "get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205803.4572523, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"name": "default__get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205803.4612665, "supported_languages": null}, "macro.dbt.incremental_validate_on_schema_change": {"name": "incremental_validate_on_schema_change", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "unique_id": "macro.dbt.incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205803.5008879, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"name": "check_for_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "unique_id": "macro.dbt.check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205803.5104108, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"name": "sync_column_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "unique_id": "macro.dbt.sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205803.5209572, "supported_languages": null}, "macro.dbt.process_schema_changes": {"name": "process_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "unique_id": "macro.dbt.process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205803.528956, "supported_languages": null}, "macro.dbt.get_incremental_append_sql": {"name": "get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205803.536956, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"name": "default__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205803.5379555, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"name": "get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205803.5399544, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"name": "default__get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205803.542953, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"name": "get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205803.5439565, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"name": "default__get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205803.5459533, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"name": "get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205803.5469532, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"name": "default__get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205803.5489535, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"name": "get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205803.5499535, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"name": "default__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205803.5514646, "supported_languages": null}, "macro.dbt.get_incremental_microbatch_sql": {"name": "get_incremental_microbatch_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_incremental_microbatch_sql", "macro_sql": "{% macro get_incremental_microbatch_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_microbatch_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_microbatch_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205803.5544803, "supported_languages": null}, "macro.dbt.default__get_incremental_microbatch_sql": {"name": "default__get_incremental_microbatch_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.default__get_incremental_microbatch_sql", "macro_sql": "{% macro default__get_incremental_microbatch_sql(arg_dict) %}\n\n  {{ exceptions.raise_not_implemented('microbatch materialization strategy not implemented for adapter ' + adapter.type()) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205803.5554903, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"name": "get_insert_into_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205803.5574784, "supported_languages": null}, "macro.dbt.create_csv_table": {"name": "create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205803.5879982, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"name": "default__create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205803.598519, "supported_languages": null}, "macro.dbt.reset_csv_table": {"name": "reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205803.6005275, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"name": "default__reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation.render() %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205803.6040332, "supported_languages": null}, "macro.dbt.get_csv_sql": {"name": "get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205803.6060457, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"name": "default__get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205803.6070464, "supported_languages": null}, "macro.dbt.get_binding_char": {"name": "get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205803.608045, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"name": "default__get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205803.6090481, "supported_languages": null}, "macro.dbt.get_batch_size": {"name": "get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205803.6130471, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"name": "default__get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205803.6140497, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"name": "get_seed_column_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205803.6180573, "supported_languages": null}, "macro.dbt.load_csv_rows": {"name": "load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205803.6206045, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"name": "default__load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205803.6334672, "supported_languages": null}, "macro.dbt.materialization_seed_default": {"name": "materialization_seed_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\seed.sql", "original_file_path": "macros\\materializations\\seeds\\seed.sql", "unique_id": "macro.dbt.materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparison later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation.render())) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205803.662743, "supported_languages": ["sql"]}, "macro.dbt.create_columns": {"name": "create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205803.710153, "supported_languages": null}, "macro.dbt.default__create_columns": {"name": "default__create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation.render() }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205803.7151515, "supported_languages": null}, "macro.dbt.post_snapshot": {"name": "post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205803.7161515, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"name": "default__post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205803.7161515, "supported_languages": null}, "macro.dbt.get_true_sql": {"name": "get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205803.7171526, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"name": "default__get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205803.718153, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"name": "snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205803.7196631, "supported_languages": null}, "macro.dbt.get_snapshot_table_column_names": {"name": "get_snapshot_table_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.get_snapshot_table_column_names", "macro_sql": "{% macro get_snapshot_table_column_names() %}\n    {{ return({'dbt_valid_to': 'dbt_valid_to', 'dbt_valid_from': 'dbt_valid_from', 'dbt_scd_id': 'dbt_scd_id', 'dbt_updated_at': 'dbt_updated_at'}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205803.7206762, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"name": "default__snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n    {% set columns = config.get('snapshot_table_column_names') or get_snapshot_table_column_names() %}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where {{ columns.dbt_valid_to }} is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n            {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as {{ columns.dbt_valid_to }},\n            {{ strategy.scd_id }} as {{ columns.dbt_scd_id }}\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n            {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n            {{ strategy.updated_at }} as {{ columns.dbt_valid_to }}\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.{{ columns.dbt_scd_id }}\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as {{ columns.dbt_valid_from }},\n            {{ snapshot_get_time() }} as {{ columns.dbt_updated_at }},\n            {{ snapshot_get_time() }} as {{ columns.dbt_valid_to }},\n            snapshotted_data.{{ columns.dbt_scd_id }}\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205803.7381883, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"name": "build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205803.7391908, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"name": "default__build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n    {% set columns = config.get('snapshot_table_column_names') or get_snapshot_table_column_names() %}\n\n    select *,\n        {{ strategy.scd_id }} as {{ columns.dbt_scd_id }},\n        {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n        {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as {{ columns.dbt_valid_to }}\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205803.7422001, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205803.7459867, "supported_languages": null}, "macro.dbt.get_updated_at_column_data_type": {"name": "get_updated_at_column_data_type", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.get_updated_at_column_data_type", "macro_sql": "{% macro get_updated_at_column_data_type(snapshot_sql) %}\n    {% set snapshot_sql_column_schema = get_column_schema_from_query(snapshot_sql) %}\n    {% set dbt_updated_at_data_type = null %}\n    {% set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {% set ns.dbt_updated_at_data_type = null -%}\n    {% for column in snapshot_sql_column_schema %}\n    {%   if ((column.column == 'dbt_updated_at') or (column.column == 'DBT_UPDATED_AT')) %}\n    {%     set ns.dbt_updated_at_data_type = column.dtype %}\n    {%   endif %}\n    {% endfor %}\n    {{ return(ns.dbt_updated_at_data_type or none)  }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_column_schema_from_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205803.753507, "supported_languages": null}, "macro.dbt.check_time_data_types": {"name": "check_time_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.check_time_data_types", "macro_sql": "{% macro check_time_data_types(sql) %}\n  {% set dbt_updated_at_data_type = get_updated_at_column_data_type(sql) %}\n  {% set snapshot_get_time_data_type = get_snapshot_get_time_data_type() %}\n  {% if snapshot_get_time_data_type is not none and dbt_updated_at_data_type is not none and snapshot_get_time_data_type != dbt_updated_at_data_type %}\n  {%   if exceptions.warn_snapshot_timestamp_data_types %}\n  {{     exceptions.warn_snapshot_timestamp_data_types(snapshot_get_time_data_type, dbt_updated_at_data_type) }}\n  {%   endif %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_updated_at_column_data_type", "macro.dbt.get_snapshot_get_time_data_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205803.757518, "supported_languages": null}, "macro.dbt.materialization_snapshot_default": {"name": "materialization_snapshot_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot.sql", "unique_id": "macro.dbt.materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {# The model['config'] parameter below is no longer used, but passing anyway for compatibility #}\n  {# It was a dictionary of config, instead of the config object from the context #}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", model['config'], target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set build_or_select_sql = build_sql %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {% set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() %}\n\n      {{ adapter.valid_snapshot_target(target_relation, columns) }}\n\n      {% set build_or_select_sql = snapshot_staging_table(strategy, sql, target_relation) %}\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n\n  {{ check_time_data_types(build_or_select_sql) }}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.get_snapshot_table_column_names", "macro.dbt.snapshot_staging_table", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.check_time_data_types", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205803.8053029, "supported_languages": ["sql"]}, "macro.dbt.snapshot_merge_sql": {"name": "snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "unique_id": "macro.dbt.snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205803.810823, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"name": "default__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "unique_id": "macro.dbt.default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    {%- set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() -%}\n\n    merge into {{ target.render() }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.{{ columns.dbt_scd_id }} = DBT_INTERNAL_DEST.{{ columns.dbt_scd_id }}\n\n    when matched\n     and DBT_INTERNAL_DEST.{{ columns.dbt_valid_to }} is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set {{ columns.dbt_valid_to }} = DBT_INTERNAL_SOURCE.{{ columns.dbt_valid_to }}\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205803.8183362, "supported_languages": null}, "macro.dbt.strategy_dispatch": {"name": "strategy_dispatch", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205803.8413827, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"name": "snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205803.8433926, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"name": "default__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205803.844396, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"name": "snapshot_timestamp_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, model_config, target_exists) %}\n    {# The model_config parameter is no longer used, but is passed in anyway for compatibility. #}\n    {% set primary_key = config.get('unique_key') %}\n    {% set updated_at = config.get('updated_at') %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes') or false %}\n    {% set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.{{ columns.dbt_valid_from }} < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205803.8493962, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"name": "snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205803.850407, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"name": "default__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205803.8533986, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"name": "snapshot_check_all_get_existing_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n            {#-- N.B. The whitespace below is necessary to avoid edge case issue with comments --#}\n            {#-- See: https://github.com/dbt-labs/dbt-core/issues/6781 --#}\n            select {{ check_cols_config | join(', ') }} from (\n                {{ node['compiled_code'] }}\n            ) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205803.8655772, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"name": "snapshot_check_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, model_config, target_exists) %}\n    {# The model_config parameter is no longer used, but is passed in anyway for compatibility. #}\n    {% set check_cols_config = config.get('check_cols') %}\n    {% set primary_key = config.get('unique_key') %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes') or false %}\n    {% set updated_at = config.get('updated_at') or snapshot_get_time() %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205803.883706, "supported_languages": null}, "macro.dbt.get_test_sql": {"name": "get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\helpers.sql", "original_file_path": "macros\\materializations\\tests\\helpers.sql", "unique_id": "macro.dbt.get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205803.8966575, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"name": "default__get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\helpers.sql", "original_file_path": "macros\\materializations\\tests\\helpers.sql", "unique_id": "macro.dbt.default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205803.8991609, "supported_languages": null}, "macro.dbt.get_unit_test_sql": {"name": "get_unit_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\helpers.sql", "original_file_path": "macros\\materializations\\tests\\helpers.sql", "unique_id": "macro.dbt.get_unit_test_sql", "macro_sql": "{% macro get_unit_test_sql(main_sql, expected_fixture_sql, expected_column_names) -%}\n  {{ adapter.dispatch('get_unit_test_sql', 'dbt')(main_sql, expected_fixture_sql, expected_column_names) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_unit_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205803.901171, "supported_languages": null}, "macro.dbt.default__get_unit_test_sql": {"name": "default__get_unit_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\helpers.sql", "original_file_path": "macros\\materializations\\tests\\helpers.sql", "unique_id": "macro.dbt.default__get_unit_test_sql", "macro_sql": "{% macro default__get_unit_test_sql(main_sql, expected_fixture_sql, expected_column_names) -%}\n-- Build actual result given inputs\nwith dbt_internal_unit_test_actual as (\n  select\n    {% for expected_column_name in expected_column_names %}{{expected_column_name}}{% if not loop.last -%},{% endif %}{%- endfor -%}, {{ dbt.string_literal(\"actual\") }} as {{ adapter.quote(\"actual_or_expected\") }}\n  from (\n    {{ main_sql }}\n  ) _dbt_internal_unit_test_actual\n),\n-- Build expected result\ndbt_internal_unit_test_expected as (\n  select\n    {% for expected_column_name in expected_column_names %}{{expected_column_name}}{% if not loop.last -%}, {% endif %}{%- endfor -%}, {{ dbt.string_literal(\"expected\") }} as {{ adapter.quote(\"actual_or_expected\") }}\n  from (\n    {{ expected_fixture_sql }}\n  ) _dbt_internal_unit_test_expected\n)\n-- Union actual and expected results\nselect * from dbt_internal_unit_test_actual\nunion all\nselect * from dbt_internal_unit_test_expected\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205803.9061797, "supported_languages": null}, "macro.dbt.materialization_test_default": {"name": "materialization_test_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\test.sql", "original_file_path": "macros\\materializations\\tests\\test.sql", "unique_id": "macro.dbt.materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n    {% set store_failures_as = config.get('store_failures_as') %}\n    -- if `--store-failures` is invoked via command line and `store_failures_as` is not set,\n    -- config.get('store_failures_as', 'table') returns None, not 'table'\n    {% if store_failures_as == none %}{% set store_failures_as = 'table' %}{% endif %}\n    {% if store_failures_as not in ['table', 'view'] %}\n        {{ exceptions.raise_compiler_error(\n            \"'\" ~ store_failures_as ~ \"' is not a valid value for `store_failures_as`. \"\n            \"Accepted values are: ['ephemeral', 'table', 'view']\"\n        ) }}\n    {% endif %}\n\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type=store_failures_as) -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ get_create_sql(target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.get_create_sql", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205803.930225, "supported_languages": ["sql"]}, "macro.dbt.materialization_unit_default": {"name": "materialization_unit_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\unit.sql", "original_file_path": "macros\\materializations\\tests\\unit.sql", "unique_id": "macro.dbt.materialization_unit_default", "macro_sql": "{%- materialization unit, default -%}\n\n  {% set relations = [] %}\n\n  {% set expected_rows = config.get('expected_rows') %}\n  {% set expected_sql = config.get('expected_sql') %}\n  {% set tested_expected_column_names = expected_rows[0].keys() if (expected_rows | length ) > 0 else get_columns_in_query(sql) %} %}\n\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {% do run_query(get_create_table_as_sql(True, temp_relation, get_empty_subquery_sql(sql))) %}\n  {%- set columns_in_relation = adapter.get_columns_in_relation(temp_relation) -%}\n  {%- set column_name_to_data_types = {} -%}\n  {%- for column in columns_in_relation -%}\n  {%-   do column_name_to_data_types.update({column.name|lower: column.data_type}) -%}\n  {%- endfor -%}\n\n  {% if not expected_sql %}\n  {%   set expected_sql = get_expected_sql(expected_rows, column_name_to_data_types) %}\n  {% endif %}\n  {% set unit_test_sql = get_unit_test_sql(sql, expected_sql, tested_expected_column_names) %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ unit_test_sql }}\n\n  {%- endcall %}\n\n  {% do adapter.drop_relation(temp_relation) %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query", "macro.dbt.make_temp_relation", "macro.dbt.run_query", "macro.dbt.get_create_table_as_sql", "macro.dbt.get_empty_subquery_sql", "macro.dbt.get_expected_sql", "macro.dbt.get_unit_test_sql", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205803.9468641, "supported_languages": ["sql"]}, "macro.dbt.get_where_subquery": {"name": "get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\where_subquery.sql", "original_file_path": "macros\\materializations\\tests\\where_subquery.sql", "unique_id": "macro.dbt.get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205803.9503748, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"name": "default__get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\where_subquery.sql", "original_file_path": "macros\\materializations\\tests\\where_subquery.sql", "unique_id": "macro.dbt.default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205803.9563854, "supported_languages": null}, "macro.dbt.resolve_model_name": {"name": "resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.resolve_model_name", "macro_sql": "{% macro resolve_model_name(input_model_name) %}\n    {{ return(adapter.dispatch('resolve_model_name', 'dbt')(input_model_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205803.965912, "supported_languages": null}, "macro.dbt.default__resolve_model_name": {"name": "default__resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.default__resolve_model_name", "macro_sql": "\n\n{%- macro default__resolve_model_name(input_model_name) -%}\n    {{  input_model_name | string | replace('\"', '\\\"') }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205803.9679124, "supported_languages": null}, "macro.dbt.build_ref_function": {"name": "build_ref_function", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {% set _ref_args = [_ref.get('package'), _ref['name']] if _ref.get('package') else [_ref['name'],] %}\n        {%- set resolved = ref(*_ref_args, v=_ref.get('version')) -%}\n        {%- if _ref.get('version') -%}\n            {% do _ref_args.extend([\"v\" ~ _ref['version']]) %}\n        {%- endif -%}\n       {%- do ref_dict.update({_ref_args | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef ref(*args, **kwargs):\n    refs = {{ ref_dict | tojson }}\n    key = '.'.join(args)\n    version = kwargs.get(\"v\") or kwargs.get(\"version\")\n    if version:\n        key += f\".v{version}\"\n    dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205803.9744358, "supported_languages": null}, "macro.dbt.build_source_function": {"name": "build_source_function", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205803.9804375, "supported_languages": null}, "macro.dbt.build_config_dict": {"name": "build_config_dict", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {% set config_dbt_used = zip(model.config.config_keys_used, model.config.config_keys_defaults) | list %}\n    {%- for key, default in config_dbt_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == \"language\" -%}\n          {%- set value = \"python\" -%}\n        {%- endif -%}\n        {%- set value = model.config.get(key, default) -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205803.9844396, "supported_languages": null}, "macro.dbt.py_script_postfix": {"name": "py_script_postfix", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"{{ this.database }}\"\n    schema = \"{{ this.schema }}\"\n    identifier = \"{{ this.identifier }}\"\n    {% set this_relation_name = resolve_model_name(this) %}\n    def __repr__(self):\n        return '{{ this_relation_name  }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args, **kwargs: ref(*args, **kwargs, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.resolve_model_name", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205803.9884367, "supported_languages": null}, "macro.dbt.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205803.9884367, "supported_languages": null}, "macro.dbt.get_create_sql": {"name": "get_create_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\create.sql", "original_file_path": "macros\\relations\\create.sql", "unique_id": "macro.dbt.get_create_sql", "macro_sql": "{%- macro get_create_sql(relation, sql) -%}\n    {{- log('Applying CREATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205803.9939673, "supported_languages": null}, "macro.dbt.default__get_create_sql": {"name": "default__get_create_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\create.sql", "original_file_path": "macros\\relations\\create.sql", "unique_id": "macro.dbt.default__get_create_sql", "macro_sql": "{%- macro default__get_create_sql(relation, sql) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_create_view_as_sql(relation, sql) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_create_table_as_sql(False, relation, sql) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_create_materialized_view_as_sql(relation, sql) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_create_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.get_create_view_as_sql", "macro.dbt.get_create_table_as_sql", "macro.dbt.get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205803.9979646, "supported_languages": null}, "macro.dbt.get_create_backup_sql": {"name": "get_create_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\create_backup.sql", "original_file_path": "macros\\relations\\create_backup.sql", "unique_id": "macro.dbt.get_create_backup_sql", "macro_sql": "{%- macro get_create_backup_sql(relation) -%}\n    {{- log('Applying CREATE BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_backup_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205804.000965, "supported_languages": null}, "macro.dbt.default__get_create_backup_sql": {"name": "default__get_create_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\create_backup.sql", "original_file_path": "macros\\relations\\create_backup.sql", "unique_id": "macro.dbt.default__get_create_backup_sql", "macro_sql": "{%- macro default__get_create_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    -- drop any pre-existing backup\n    {{ get_drop_sql(backup_relation) }};\n\n    {{ get_rename_sql(relation, backup_relation.identifier) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205804.002964, "supported_languages": null}, "macro.dbt.get_create_intermediate_sql": {"name": "get_create_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\create_intermediate.sql", "original_file_path": "macros\\relations\\create_intermediate.sql", "unique_id": "macro.dbt.get_create_intermediate_sql", "macro_sql": "{%- macro get_create_intermediate_sql(relation, sql) -%}\n    {{- log('Applying CREATE INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_intermediate_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_intermediate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205804.005503, "supported_languages": null}, "macro.dbt.default__get_create_intermediate_sql": {"name": "default__get_create_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\create_intermediate.sql", "original_file_path": "macros\\relations\\create_intermediate.sql", "unique_id": "macro.dbt.default__get_create_intermediate_sql", "macro_sql": "{%- macro default__get_create_intermediate_sql(relation, sql) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    -- drop any pre-existing intermediate\n    {{ get_drop_sql(intermediate_relation) }};\n\n    {{ get_create_sql(intermediate_relation, sql) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205804.0074906, "supported_languages": null}, "macro.dbt.get_drop_sql": {"name": "get_drop_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\drop.sql", "original_file_path": "macros\\relations\\drop.sql", "unique_id": "macro.dbt.get_drop_sql", "macro_sql": "{%- macro get_drop_sql(relation) -%}\n    {{- log('Applying DROP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205804.015691, "supported_languages": null}, "macro.dbt.default__get_drop_sql": {"name": "default__get_drop_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\drop.sql", "original_file_path": "macros\\relations\\drop.sql", "unique_id": "macro.dbt.default__get_drop_sql", "macro_sql": "{%- macro default__get_drop_sql(relation) -%}\n\n    {%- if relation.is_view -%}\n        {{ drop_view(relation) }}\n\n    {%- elif relation.is_table -%}\n        {{ drop_table(relation) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ drop_materialized_view(relation) }}\n\n    {%- else -%}\n        drop {{ relation.type }} if exists {{ relation.render() }} cascade\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.drop_view", "macro.dbt.drop_table", "macro.dbt.drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205804.0187044, "supported_languages": null}, "macro.dbt.drop_relation": {"name": "drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\drop.sql", "original_file_path": "macros\\relations\\drop.sql", "unique_id": "macro.dbt.drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n    {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205804.020704, "supported_languages": null}, "macro.dbt.default__drop_relation": {"name": "default__drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\drop.sql", "original_file_path": "macros\\relations\\drop.sql", "unique_id": "macro.dbt.default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n    {% call statement('drop_relation', auto_begin=False) -%}\n        {{ get_drop_sql(relation) }}\n    {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205804.0217066, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"name": "drop_relation_if_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\drop.sql", "original_file_path": "macros\\relations\\drop.sql", "unique_id": "macro.dbt.drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205804.023255, "supported_languages": null}, "macro.dbt.get_drop_backup_sql": {"name": "get_drop_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\drop_backup.sql", "original_file_path": "macros\\relations\\drop_backup.sql", "unique_id": "macro.dbt.get_drop_backup_sql", "macro_sql": "{%- macro get_drop_backup_sql(relation) -%}\n    {{- log('Applying DROP BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_drop_backup_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205804.0252666, "supported_languages": null}, "macro.dbt.default__get_drop_backup_sql": {"name": "default__get_drop_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\drop_backup.sql", "original_file_path": "macros\\relations\\drop_backup.sql", "unique_id": "macro.dbt.default__get_drop_backup_sql", "macro_sql": "{%- macro default__get_drop_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    {{ get_drop_sql(backup_relation) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205804.0272658, "supported_languages": null}, "macro.dbt.get_rename_sql": {"name": "get_rename_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\rename.sql", "original_file_path": "macros\\relations\\rename.sql", "unique_id": "macro.dbt.get_rename_sql", "macro_sql": "{%- macro get_rename_sql(relation, new_name) -%}\n    {{- log('Applying RENAME to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_sql', 'dbt')(relation, new_name) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205804.0332675, "supported_languages": null}, "macro.dbt.default__get_rename_sql": {"name": "default__get_rename_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\rename.sql", "original_file_path": "macros\\relations\\rename.sql", "unique_id": "macro.dbt.default__get_rename_sql", "macro_sql": "{%- macro default__get_rename_sql(relation, new_name) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_rename_view_sql(relation, new_name) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_rename_table_sql(relation, new_name) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_rename_materialized_view_sql(relation, new_name) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_rename_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.get_rename_view_sql", "macro.dbt.get_rename_table_sql", "macro.dbt.get_rename_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205804.036788, "supported_languages": null}, "macro.dbt.rename_relation": {"name": "rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\rename.sql", "original_file_path": "macros\\relations\\rename.sql", "unique_id": "macro.dbt.rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205804.0377908, "supported_languages": null}, "macro.dbt.default__rename_relation": {"name": "default__rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\rename.sql", "original_file_path": "macros\\relations\\rename.sql", "unique_id": "macro.dbt.default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation.render() }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205804.0407908, "supported_languages": null}, "macro.dbt.get_rename_intermediate_sql": {"name": "get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\rename_intermediate.sql", "original_file_path": "macros\\relations\\rename_intermediate.sql", "unique_id": "macro.dbt.get_rename_intermediate_sql", "macro_sql": "{%- macro get_rename_intermediate_sql(relation) -%}\n    {{- log('Applying RENAME INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_intermediate_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_rename_intermediate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205804.04279, "supported_languages": null}, "macro.dbt.default__get_rename_intermediate_sql": {"name": "default__get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\rename_intermediate.sql", "original_file_path": "macros\\relations\\rename_intermediate.sql", "unique_id": "macro.dbt.default__get_rename_intermediate_sql", "macro_sql": "{%- macro default__get_rename_intermediate_sql(relation) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    {{ get_rename_sql(intermediate_relation, relation.identifier) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205804.04479, "supported_languages": null}, "macro.dbt.get_replace_sql": {"name": "get_replace_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\replace.sql", "original_file_path": "macros\\relations\\replace.sql", "unique_id": "macro.dbt.get_replace_sql", "macro_sql": "{% macro get_replace_sql(existing_relation, target_relation, sql) %}\n    {{- log('Applying REPLACE to: ' ~ existing_relation) -}}\n    {{- adapter.dispatch('get_replace_sql', 'dbt')(existing_relation, target_relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205804.049336, "supported_languages": null}, "macro.dbt.default__get_replace_sql": {"name": "default__get_replace_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\replace.sql", "original_file_path": "macros\\relations\\replace.sql", "unique_id": "macro.dbt.default__get_replace_sql", "macro_sql": "{% macro default__get_replace_sql(existing_relation, target_relation, sql) %}\n\n    {# /* use a create or replace statement if possible */ #}\n\n    {% set is_replaceable = existing_relation.type == target_relation_type and existing_relation.can_be_replaced %}\n\n    {% if is_replaceable and existing_relation.is_view %}\n        {{ get_replace_view_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_table %}\n        {{ get_replace_table_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_materialized_view %}\n        {{ get_replace_materialized_view_sql(target_relation, sql) }}\n\n    {# /* a create or replace statement is not possible, so try to stage and/or backup to be safe */ #}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one using a backup */ #}\n    {%- elif target_relation.can_be_renamed and existing_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one without using a backup */ #}\n    {%- elif target_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }}\n\n    {# /* create target_relation in place by first backing up the existing relation */ #}\n    {%- elif existing_relation.can_be_renamed -%}\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* no renaming is allowed, so just drop and create */ #}\n    {%- else -%}\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }}\n\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_replace_view_sql", "macro.dbt.get_replace_table_sql", "macro.dbt.get_replace_materialized_view_sql", "macro.dbt.get_create_intermediate_sql", "macro.dbt.get_create_backup_sql", "macro.dbt.get_rename_intermediate_sql", "macro.dbt.get_drop_backup_sql", "macro.dbt.get_drop_sql", "macro.dbt.get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205804.0600462, "supported_languages": null}, "macro.dbt.drop_schema_named": {"name": "drop_schema_named", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\schema.sql", "original_file_path": "macros\\relations\\schema.sql", "unique_id": "macro.dbt.drop_schema_named", "macro_sql": "{% macro drop_schema_named(schema_name) %}\n    {{ return(adapter.dispatch('drop_schema_named', 'dbt') (schema_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_schema_named"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205804.0620434, "supported_languages": null}, "macro.dbt.default__drop_schema_named": {"name": "default__drop_schema_named", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\schema.sql", "original_file_path": "macros\\relations\\schema.sql", "unique_id": "macro.dbt.default__drop_schema_named", "macro_sql": "{% macro default__drop_schema_named(schema_name) %}\n  {% set schema_relation = api.Relation.create(schema=schema_name) %}\n  {{ adapter.drop_schema(schema_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205804.0635748, "supported_languages": null}, "macro.dbt.get_table_columns_and_constraints": {"name": "get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\column\\columns_spec_ddl.sql", "original_file_path": "macros\\relations\\column\\columns_spec_ddl.sql", "unique_id": "macro.dbt.get_table_columns_and_constraints", "macro_sql": "{%- macro get_table_columns_and_constraints() -%}\n  {{ adapter.dispatch('get_table_columns_and_constraints', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205804.0695674, "supported_languages": null}, "macro.dbt.default__get_table_columns_and_constraints": {"name": "default__get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\column\\columns_spec_ddl.sql", "original_file_path": "macros\\relations\\column\\columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_table_columns_and_constraints", "macro_sql": "{% macro default__get_table_columns_and_constraints() -%}\n  {{ return(table_columns_and_constraints()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205804.0705647, "supported_languages": null}, "macro.dbt.table_columns_and_constraints": {"name": "table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\column\\columns_spec_ddl.sql", "original_file_path": "macros\\relations\\column\\columns_spec_ddl.sql", "unique_id": "macro.dbt.table_columns_and_constraints", "macro_sql": "{% macro table_columns_and_constraints() %}\n  {# loop through user_provided_columns to create DDL with data types and constraints #}\n    {%- set raw_column_constraints = adapter.render_raw_columns_constraints(raw_columns=model['columns']) -%}\n    {%- set raw_model_constraints = adapter.render_raw_model_constraints(raw_constraints=model['constraints']) -%}\n    (\n    {% for c in raw_column_constraints -%}\n      {{ c }}{{ \",\" if not loop.last or raw_model_constraints }}\n    {% endfor %}\n    {% for c in raw_model_constraints -%}\n        {{ c }}{{ \",\" if not loop.last }}\n    {% endfor -%}\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205804.0770936, "supported_languages": null}, "macro.dbt.get_assert_columns_equivalent": {"name": "get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\column\\columns_spec_ddl.sql", "original_file_path": "macros\\relations\\column\\columns_spec_ddl.sql", "unique_id": "macro.dbt.get_assert_columns_equivalent", "macro_sql": "\n\n{%- macro get_assert_columns_equivalent(sql) -%}\n  {{ adapter.dispatch('get_assert_columns_equivalent', 'dbt')(sql) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205804.0790951, "supported_languages": null}, "macro.dbt.default__get_assert_columns_equivalent": {"name": "default__get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\column\\columns_spec_ddl.sql", "original_file_path": "macros\\relations\\column\\columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_assert_columns_equivalent", "macro_sql": "{% macro default__get_assert_columns_equivalent(sql) -%}\n  {{ return(assert_columns_equivalent(sql)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205804.0800958, "supported_languages": null}, "macro.dbt.assert_columns_equivalent": {"name": "assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\column\\columns_spec_ddl.sql", "original_file_path": "macros\\relations\\column\\columns_spec_ddl.sql", "unique_id": "macro.dbt.assert_columns_equivalent", "macro_sql": "{% macro assert_columns_equivalent(sql) %}\n\n  {#-- First ensure the user has defined 'columns' in yaml specification --#}\n  {%- set user_defined_columns = model['columns'] -%}\n  {%- if not user_defined_columns -%}\n      {{ exceptions.raise_contract_error([], []) }}\n  {%- endif -%}\n\n  {#-- Obtain the column schema provided by sql file. #}\n  {%- set sql_file_provided_columns = get_column_schema_from_query(sql, config.get('sql_header', none)) -%}\n  {#--Obtain the column schema provided by the schema file by generating an 'empty schema' query from the model's columns. #}\n  {%- set schema_file_provided_columns = get_column_schema_from_query(get_empty_schema_sql(user_defined_columns)) -%}\n\n  {#-- create dictionaries with name and formatted data type and strings for exception #}\n  {%- set sql_columns = format_columns(sql_file_provided_columns) -%}\n  {%- set yaml_columns = format_columns(schema_file_provided_columns)  -%}\n\n  {%- if sql_columns|length != yaml_columns|length -%}\n    {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n  {%- endif -%}\n\n  {%- for sql_col in sql_columns -%}\n    {%- set yaml_col = [] -%}\n    {%- for this_col in yaml_columns -%}\n      {%- if this_col['name'] == sql_col['name'] -%}\n        {%- do yaml_col.append(this_col) -%}\n        {%- break -%}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- if not yaml_col -%}\n      {#-- Column with name not found in yaml #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n    {%- if sql_col['formatted'] != yaml_col[0]['formatted'] -%}\n      {#-- Column data types don't match #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n  {%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_column_schema_from_query", "macro.dbt.get_empty_schema_sql", "macro.dbt.format_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205804.0900953, "supported_languages": null}, "macro.dbt.format_columns": {"name": "format_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\column\\columns_spec_ddl.sql", "original_file_path": "macros\\relations\\column\\columns_spec_ddl.sql", "unique_id": "macro.dbt.format_columns", "macro_sql": "{% macro format_columns(columns) %}\n  {% set formatted_columns = [] %}\n  {% for column in columns %}\n    {%- set formatted_column = adapter.dispatch('format_column', 'dbt')(column) -%}\n    {%- do formatted_columns.append(formatted_column) -%}\n  {% endfor %}\n  {{ return(formatted_columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__format_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205804.0930996, "supported_languages": null}, "macro.dbt.default__format_column": {"name": "default__format_column", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\column\\columns_spec_ddl.sql", "original_file_path": "macros\\relations\\column\\columns_spec_ddl.sql", "unique_id": "macro.dbt.default__format_column", "macro_sql": "{% macro default__format_column(column) -%}\n  {% set data_type = column.dtype %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205804.0966372, "supported_languages": null}, "macro.dbt.get_alter_materialized_view_as_sql": {"name": "get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\alter.sql", "original_file_path": "macros\\relations\\materialized_view\\alter.sql", "unique_id": "macro.dbt.get_alter_materialized_view_as_sql", "macro_sql": "{% macro get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{- log('Applying ALTER to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_alter_materialized_view_as_sql', 'dbt')(\n        relation,\n        configuration_changes,\n        sql,\n        existing_relation,\n        backup_relation,\n        intermediate_relation\n    ) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205804.1016428, "supported_languages": null}, "macro.dbt.default__get_alter_materialized_view_as_sql": {"name": "default__get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\alter.sql", "original_file_path": "macros\\relations\\materialized_view\\alter.sql", "unique_id": "macro.dbt.default__get_alter_materialized_view_as_sql", "macro_sql": "{% macro default__get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205804.102629, "supported_languages": null}, "macro.dbt.get_materialized_view_configuration_changes": {"name": "get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\alter.sql", "original_file_path": "macros\\relations\\materialized_view\\alter.sql", "unique_id": "macro.dbt.get_materialized_view_configuration_changes", "macro_sql": "{% macro get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    /* {#\n    It's recommended that configuration changes be formatted as follows:\n    {\"<change_category>\": [{\"action\": \"<name>\", \"context\": ...}]}\n\n    For example:\n    {\n        \"indexes\": [\n            {\"action\": \"drop\", \"context\": \"index_abc\"},\n            {\"action\": \"create\", \"context\": {\"columns\": [\"column_1\", \"column_2\"], \"type\": \"hash\", \"unique\": True}},\n        ],\n    }\n\n    Either way, `get_materialized_view_configuration_changes` needs to align with `get_alter_materialized_view_as_sql`.\n    #} */\n    {{- log('Determining configuration changes on: ' ~ existing_relation) -}}\n    {%- do return(adapter.dispatch('get_materialized_view_configuration_changes', 'dbt')(existing_relation, new_config)) -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_materialized_view_configuration_changes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205804.106156, "supported_languages": null}, "macro.dbt.default__get_materialized_view_configuration_changes": {"name": "default__get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\alter.sql", "original_file_path": "macros\\relations\\materialized_view\\alter.sql", "unique_id": "macro.dbt.default__get_materialized_view_configuration_changes", "macro_sql": "{% macro default__get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205804.1071556, "supported_languages": null}, "macro.dbt.get_create_materialized_view_as_sql": {"name": "get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\create.sql", "original_file_path": "macros\\relations\\materialized_view\\create.sql", "unique_id": "macro.dbt.get_create_materialized_view_as_sql", "macro_sql": "{% macro get_create_materialized_view_as_sql(relation, sql) -%}\n    {{- adapter.dispatch('get_create_materialized_view_as_sql', 'dbt')(relation, sql) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205804.1091566, "supported_languages": null}, "macro.dbt.default__get_create_materialized_view_as_sql": {"name": "default__get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\create.sql", "original_file_path": "macros\\relations\\materialized_view\\create.sql", "unique_id": "macro.dbt.default__get_create_materialized_view_as_sql", "macro_sql": "{% macro default__get_create_materialized_view_as_sql(relation, sql) -%}\n    {{ exceptions.raise_compiler_error(\n        \"`get_create_materialized_view_as_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205804.1111565, "supported_languages": null}, "macro.dbt.drop_materialized_view": {"name": "drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\drop.sql", "original_file_path": "macros\\relations\\materialized_view\\drop.sql", "unique_id": "macro.dbt.drop_materialized_view", "macro_sql": "{% macro drop_materialized_view(relation) -%}\n    {{- adapter.dispatch('drop_materialized_view', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205804.1131604, "supported_languages": null}, "macro.dbt.default__drop_materialized_view": {"name": "default__drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\drop.sql", "original_file_path": "macros\\relations\\materialized_view\\drop.sql", "unique_id": "macro.dbt.default__drop_materialized_view", "macro_sql": "{% macro default__drop_materialized_view(relation) -%}\n    drop materialized view if exists {{ relation.render() }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205804.1146717, "supported_languages": null}, "macro.dbt.refresh_materialized_view": {"name": "refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\refresh.sql", "original_file_path": "macros\\relations\\materialized_view\\refresh.sql", "unique_id": "macro.dbt.refresh_materialized_view", "macro_sql": "{% macro refresh_materialized_view(relation) %}\n    {{- log('Applying REFRESH to: ' ~ relation) -}}\n    {{- adapter.dispatch('refresh_materialized_view', 'dbt')(relation) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__refresh_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205804.1176841, "supported_languages": null}, "macro.dbt.default__refresh_materialized_view": {"name": "default__refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\refresh.sql", "original_file_path": "macros\\relations\\materialized_view\\refresh.sql", "unique_id": "macro.dbt.default__refresh_materialized_view", "macro_sql": "{% macro default__refresh_materialized_view(relation) %}\n    {{ exceptions.raise_compiler_error(\"`refresh_materialized_view` has not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205804.1186848, "supported_languages": null}, "macro.dbt.get_rename_materialized_view_sql": {"name": "get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\rename.sql", "original_file_path": "macros\\relations\\materialized_view\\rename.sql", "unique_id": "macro.dbt.get_rename_materialized_view_sql", "macro_sql": "{% macro get_rename_materialized_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_materialized_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_rename_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205804.1206853, "supported_languages": null}, "macro.dbt.default__get_rename_materialized_view_sql": {"name": "default__get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\rename.sql", "original_file_path": "macros\\relations\\materialized_view\\rename.sql", "unique_id": "macro.dbt.default__get_rename_materialized_view_sql", "macro_sql": "{% macro default__get_rename_materialized_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205804.1224306, "supported_languages": null}, "macro.dbt.get_replace_materialized_view_sql": {"name": "get_replace_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\replace.sql", "original_file_path": "macros\\relations\\materialized_view\\replace.sql", "unique_id": "macro.dbt.get_replace_materialized_view_sql", "macro_sql": "{% macro get_replace_materialized_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_materialized_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205804.1244266, "supported_languages": null}, "macro.dbt.default__get_replace_materialized_view_sql": {"name": "default__get_replace_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\materialized_view\\replace.sql", "original_file_path": "macros\\relations\\materialized_view\\replace.sql", "unique_id": "macro.dbt.default__get_replace_materialized_view_sql", "macro_sql": "{% macro default__get_replace_materialized_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205804.1254265, "supported_languages": null}, "macro.dbt.get_create_table_as_sql": {"name": "get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\create.sql", "original_file_path": "macros\\relations\\table\\create.sql", "unique_id": "macro.dbt.get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205804.1339574, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"name": "default__get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\create.sql", "original_file_path": "macros\\relations\\table\\create.sql", "unique_id": "macro.dbt.default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205804.1366296, "supported_languages": null}, "macro.dbt.create_table_as": {"name": "create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\create.sql", "original_file_path": "macros\\relations\\table\\create.sql", "unique_id": "macro.dbt.create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205804.1399174, "supported_languages": null}, "macro.dbt.default__create_table_as": {"name": "default__create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\create.sql", "original_file_path": "macros\\relations\\table\\create.sql", "unique_id": "macro.dbt.default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced and (not temporary) %}\n    {{ get_assert_columns_equivalent(sql) }}\n    {{ get_table_columns_and_constraints() }}\n    {%- set sql = get_select_subquery(sql) %}\n  {% endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205804.1451647, "supported_languages": null}, "macro.dbt.default__get_column_names": {"name": "default__get_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\create.sql", "original_file_path": "macros\\relations\\table\\create.sql", "unique_id": "macro.dbt.default__get_column_names", "macro_sql": "{% macro default__get_column_names() %}\n  {#- loop through user_provided_columns to get column names -#}\n    {%- set user_provided_columns = model['columns'] -%}\n    {%- for i in user_provided_columns %}\n      {%- set col = user_provided_columns[i] -%}\n      {%- set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] -%}\n      {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205804.149165, "supported_languages": null}, "macro.dbt.get_select_subquery": {"name": "get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\create.sql", "original_file_path": "macros\\relations\\table\\create.sql", "unique_id": "macro.dbt.get_select_subquery", "macro_sql": "{% macro get_select_subquery(sql) %}\n  {{ return(adapter.dispatch('get_select_subquery', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205804.1501677, "supported_languages": null}, "macro.dbt.default__get_select_subquery": {"name": "default__get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\create.sql", "original_file_path": "macros\\relations\\table\\create.sql", "unique_id": "macro.dbt.default__get_select_subquery", "macro_sql": "{% macro default__get_select_subquery(sql) %}\n    select {{ adapter.dispatch('get_column_names', 'dbt')() }}\n    from (\n        {{ sql }}\n    ) as model_subq\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.get_column_names", "macro.dbt.default__get_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205804.1548474, "supported_languages": null}, "macro.dbt.drop_table": {"name": "drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\drop.sql", "original_file_path": "macros\\relations\\table\\drop.sql", "unique_id": "macro.dbt.drop_table", "macro_sql": "{% macro drop_table(relation) -%}\n    {{- adapter.dispatch('drop_table', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205804.1576939, "supported_languages": null}, "macro.dbt.default__drop_table": {"name": "default__drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\drop.sql", "original_file_path": "macros\\relations\\table\\drop.sql", "unique_id": "macro.dbt.default__drop_table", "macro_sql": "{% macro default__drop_table(relation) -%}\n    drop table if exists {{ relation.render() }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205804.1586945, "supported_languages": null}, "macro.dbt.get_rename_table_sql": {"name": "get_rename_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\rename.sql", "original_file_path": "macros\\relations\\table\\rename.sql", "unique_id": "macro.dbt.get_rename_table_sql", "macro_sql": "{% macro get_rename_table_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_table_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_rename_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205804.1606936, "supported_languages": null}, "macro.dbt.default__get_rename_table_sql": {"name": "default__get_rename_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\rename.sql", "original_file_path": "macros\\relations\\table\\rename.sql", "unique_id": "macro.dbt.default__get_rename_table_sql", "macro_sql": "{% macro default__get_rename_table_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205804.1616929, "supported_languages": null}, "macro.dbt.get_replace_table_sql": {"name": "get_replace_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\replace.sql", "original_file_path": "macros\\relations\\table\\replace.sql", "unique_id": "macro.dbt.get_replace_table_sql", "macro_sql": "{% macro get_replace_table_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_table_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205804.1636937, "supported_languages": null}, "macro.dbt.default__get_replace_table_sql": {"name": "default__get_replace_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\table\\replace.sql", "original_file_path": "macros\\relations\\table\\replace.sql", "unique_id": "macro.dbt.default__get_replace_table_sql", "macro_sql": "{% macro default__get_replace_table_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205804.1652052, "supported_languages": null}, "macro.dbt.get_create_view_as_sql": {"name": "get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\create.sql", "original_file_path": "macros\\relations\\view\\create.sql", "unique_id": "macro.dbt.get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205804.1672213, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"name": "default__get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\create.sql", "original_file_path": "macros\\relations\\view\\create.sql", "unique_id": "macro.dbt.default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205804.1692212, "supported_languages": null}, "macro.dbt.create_view_as": {"name": "create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\create.sql", "original_file_path": "macros\\relations\\view\\create.sql", "unique_id": "macro.dbt.create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205804.1702197, "supported_languages": null}, "macro.dbt.default__create_view_as": {"name": "default__create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\create.sql", "original_file_path": "macros\\relations\\view\\create.sql", "unique_id": "macro.dbt.default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation.render() }}\n    {% set contract_config = config.get('contract') %}\n    {% if contract_config.enforced %}\n      {{ get_assert_columns_equivalent(sql) }}\n    {%- endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205804.1742232, "supported_languages": null}, "macro.dbt.drop_view": {"name": "drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\drop.sql", "original_file_path": "macros\\relations\\view\\drop.sql", "unique_id": "macro.dbt.drop_view", "macro_sql": "{% macro drop_view(relation) -%}\n    {{- adapter.dispatch('drop_view', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205804.17676, "supported_languages": null}, "macro.dbt.default__drop_view": {"name": "default__drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\drop.sql", "original_file_path": "macros\\relations\\view\\drop.sql", "unique_id": "macro.dbt.default__drop_view", "macro_sql": "{% macro default__drop_view(relation) -%}\n    drop view if exists {{ relation.render() }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205804.1785314, "supported_languages": null}, "macro.dbt.get_rename_view_sql": {"name": "get_rename_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\rename.sql", "original_file_path": "macros\\relations\\view\\rename.sql", "unique_id": "macro.dbt.get_rename_view_sql", "macro_sql": "{% macro get_rename_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_rename_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205804.1795435, "supported_languages": null}, "macro.dbt.default__get_rename_view_sql": {"name": "default__get_rename_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\rename.sql", "original_file_path": "macros\\relations\\view\\rename.sql", "unique_id": "macro.dbt.default__get_rename_view_sql", "macro_sql": "{% macro default__get_rename_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205804.1815438, "supported_languages": null}, "macro.dbt.get_replace_view_sql": {"name": "get_replace_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\replace.sql", "original_file_path": "macros\\relations\\view\\replace.sql", "unique_id": "macro.dbt.get_replace_view_sql", "macro_sql": "{% macro get_replace_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205804.187544, "supported_languages": null}, "macro.dbt.default__get_replace_view_sql": {"name": "default__get_replace_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\replace.sql", "original_file_path": "macros\\relations\\view\\replace.sql", "unique_id": "macro.dbt.default__get_replace_view_sql", "macro_sql": "{% macro default__get_replace_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205804.1885457, "supported_languages": null}, "macro.dbt.create_or_replace_view": {"name": "create_or_replace_view", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\replace.sql", "original_file_path": "macros\\relations\\view\\replace.sql", "unique_id": "macro.dbt.create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205804.199595, "supported_languages": null}, "macro.dbt.handle_existing_table": {"name": "handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\replace.sql", "original_file_path": "macros\\relations\\view\\replace.sql", "unique_id": "macro.dbt.handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205804.2016075, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"name": "default__handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\relations\\view\\replace.sql", "original_file_path": "macros\\relations\\view\\replace.sql", "unique_id": "macro.dbt.default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation.render() ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205804.2026076, "supported_languages": null}, "macro.dbt.get_fixture_sql": {"name": "get_fixture_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\unit_test_sql\\get_fixture_sql.sql", "original_file_path": "macros\\unit_test_sql\\get_fixture_sql.sql", "unique_id": "macro.dbt.get_fixture_sql", "macro_sql": "{% macro get_fixture_sql(rows, column_name_to_data_types) %}\n-- Fixture for {{ model.name }}\n{% set default_row = {} %}\n\n{%- if not column_name_to_data_types -%}\n{#-- Use defer_relation IFF it is available in the manifest and 'this' is missing from the database --#}\n{%-   set this_or_defer_relation = defer_relation if (defer_relation and not load_relation(this)) else this -%}\n{%-   set columns_in_relation = adapter.get_columns_in_relation(this_or_defer_relation) -%}\n\n{%-   set column_name_to_data_types = {} -%}\n{%-   for column in columns_in_relation -%}\n{#-- This needs to be a case-insensitive comparison --#}\n{%-     do column_name_to_data_types.update({column.name|lower: column.data_type}) -%}\n{%-   endfor -%}\n{%- endif -%}\n\n{%- if not column_name_to_data_types -%}\n    {{ exceptions.raise_compiler_error(\"Not able to get columns for unit test '\" ~ model.name ~ \"' from relation \" ~ this ~ \" because the relation doesn't exist\") }}\n{%- endif -%}\n\n{%- for column_name, column_type in column_name_to_data_types.items() -%}\n    {%- do default_row.update({column_name: (safe_cast(\"null\", column_type) | trim )}) -%}\n{%- endfor -%}\n\n{{ validate_fixture_rows(rows, row_number) }}\n\n{%- for row in rows -%}\n{%-   set formatted_row = format_row(row, column_name_to_data_types) -%}\n{%-   set default_row_copy = default_row.copy() -%}\n{%-   do default_row_copy.update(formatted_row) -%}\nselect\n{%-   for column_name, column_value in default_row_copy.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%}, {%- endif %}\n{%-   endfor %}\n{%-   if not loop.last %}\nunion all\n{%    endif %}\n{%- endfor -%}\n\n{%- if (rows | length) == 0 -%}\n    select\n    {%- for column_name, column_value in default_row.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%},{%- endif %}\n    {%- endfor %}\n    limit 0\n{%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.safe_cast", "macro.dbt.validate_fixture_rows", "macro.dbt.format_row"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205804.2302024, "supported_languages": null}, "macro.dbt.get_expected_sql": {"name": "get_expected_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\unit_test_sql\\get_fixture_sql.sql", "original_file_path": "macros\\unit_test_sql\\get_fixture_sql.sql", "unique_id": "macro.dbt.get_expected_sql", "macro_sql": "{% macro get_expected_sql(rows, column_name_to_data_types) %}\n\n{%- if (rows | length) == 0 -%}\n    select * from dbt_internal_unit_test_actual\n    limit 0\n{%- else -%}\n{%- for row in rows -%}\n{%- set formatted_row = format_row(row, column_name_to_data_types) -%}\nselect\n{%- for column_name, column_value in formatted_row.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%}, {%- endif %}\n{%- endfor %}\n{%- if not loop.last %}\nunion all\n{% endif %}\n{%- endfor -%}\n{%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.format_row"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205804.2391582, "supported_languages": null}, "macro.dbt.format_row": {"name": "format_row", "resource_type": "macro", "package_name": "dbt", "path": "macros\\unit_test_sql\\get_fixture_sql.sql", "original_file_path": "macros\\unit_test_sql\\get_fixture_sql.sql", "unique_id": "macro.dbt.format_row", "macro_sql": "\n\n{%- macro format_row(row, column_name_to_data_types) -%}\n    {#-- generate case-insensitive formatted row --#}\n    {% set formatted_row = {} %}\n    {%- for column_name, column_value in row.items() -%}\n        {% set column_name = column_name|lower %}\n\n        {%- if column_name not in column_name_to_data_types %}\n            {#-- if user-provided row contains column name that relation does not contain, raise an error --#}\n            {% set fixture_name = \"expected output\" if model.resource_type == 'unit_test' else (\"'\" ~ model.name ~ \"'\") %}\n            {{ exceptions.raise_compiler_error(\n                \"Invalid column name: '\" ~ column_name ~ \"' in unit test fixture for \" ~ fixture_name ~ \".\"\n                \"\\nAccepted columns for \" ~ fixture_name ~ \" are: \" ~ (column_name_to_data_types.keys()|list)\n            ) }}\n        {%- endif -%}\n\n        {%- set column_type = column_name_to_data_types[column_name] %}\n\n        {#-- sanitize column_value: wrap yaml strings in quotes, apply cast --#}\n        {%- set column_value_clean = column_value -%}\n        {%- if column_value is string -%}\n            {%- set column_value_clean = dbt.string_literal(dbt.escape_single_quotes(column_value)) -%}\n        {%- elif column_value is none -%}\n            {%- set column_value_clean = 'null' -%}\n        {%- endif -%}\n\n        {%- set row_update = {column_name: safe_cast(column_value_clean, column_type) } -%}\n        {%- do formatted_row.update(row_update) -%}\n    {%- endfor -%}\n    {{ return(formatted_row) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.string_literal", "macro.dbt.escape_single_quotes", "macro.dbt.safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205804.2562327, "supported_languages": null}, "macro.dbt.validate_fixture_rows": {"name": "validate_fixture_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros\\unit_test_sql\\get_fixture_sql.sql", "original_file_path": "macros\\unit_test_sql\\get_fixture_sql.sql", "unique_id": "macro.dbt.validate_fixture_rows", "macro_sql": "{%- macro validate_fixture_rows(rows, row_number) -%}\n  {{ return(adapter.dispatch('validate_fixture_rows', 'dbt')(rows, row_number)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__validate_fixture_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205804.2612596, "supported_languages": null}, "macro.dbt.default__validate_fixture_rows": {"name": "default__validate_fixture_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros\\unit_test_sql\\get_fixture_sql.sql", "original_file_path": "macros\\unit_test_sql\\get_fixture_sql.sql", "unique_id": "macro.dbt.default__validate_fixture_rows", "macro_sql": "{%- macro default__validate_fixture_rows(rows, row_number) -%}\n  {# This is an abstract method for adapter overrides as needed #}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205804.2617137, "supported_languages": null}, "macro.dbt.any_value": {"name": "any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\any_value.sql", "original_file_path": "macros\\utils\\any_value.sql", "unique_id": "macro.dbt.any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205804.2644558, "supported_languages": null}, "macro.dbt.default__any_value": {"name": "default__any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\any_value.sql", "original_file_path": "macros\\utils\\any_value.sql", "unique_id": "macro.dbt.default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205804.265009, "supported_languages": null}, "macro.dbt.array_append": {"name": "array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_append.sql", "original_file_path": "macros\\utils\\array_append.sql", "unique_id": "macro.dbt.array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205804.2692895, "supported_languages": null}, "macro.dbt.default__array_append": {"name": "default__array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_append.sql", "original_file_path": "macros\\utils\\array_append.sql", "unique_id": "macro.dbt.default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205804.2743905, "supported_languages": null}, "macro.dbt.array_concat": {"name": "array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_concat.sql", "original_file_path": "macros\\utils\\array_concat.sql", "unique_id": "macro.dbt.array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205804.2773888, "supported_languages": null}, "macro.dbt.default__array_concat": {"name": "default__array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_concat.sql", "original_file_path": "macros\\utils\\array_concat.sql", "unique_id": "macro.dbt.default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205804.2793925, "supported_languages": null}, "macro.dbt.array_construct": {"name": "array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_construct.sql", "original_file_path": "macros\\utils\\array_construct.sql", "unique_id": "macro.dbt.array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205804.2823882, "supported_languages": null}, "macro.dbt.default__array_construct": {"name": "default__array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_construct.sql", "original_file_path": "macros\\utils\\array_construct.sql", "unique_id": "macro.dbt.default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205804.284388, "supported_languages": null}, "macro.dbt.bool_or": {"name": "bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\bool_or.sql", "original_file_path": "macros\\utils\\bool_or.sql", "unique_id": "macro.dbt.bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205804.2873898, "supported_languages": null}, "macro.dbt.default__bool_or": {"name": "default__bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\bool_or.sql", "original_file_path": "macros\\utils\\bool_or.sql", "unique_id": "macro.dbt.default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205804.2883885, "supported_languages": null}, "macro.dbt.cast": {"name": "cast", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\cast.sql", "original_file_path": "macros\\utils\\cast.sql", "unique_id": "macro.dbt.cast", "macro_sql": "{% macro cast(field, type) %}\n  {{ return(adapter.dispatch('cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205804.3025796, "supported_languages": null}, "macro.dbt.default__cast": {"name": "default__cast", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\cast.sql", "original_file_path": "macros\\utils\\cast.sql", "unique_id": "macro.dbt.default__cast", "macro_sql": "{% macro default__cast(field, type) %}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205804.3042314, "supported_languages": null}, "macro.dbt.cast_bool_to_text": {"name": "cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\cast_bool_to_text.sql", "original_file_path": "macros\\utils\\cast_bool_to_text.sql", "unique_id": "macro.dbt.cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205804.30768, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"name": "default__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\cast_bool_to_text.sql", "original_file_path": "macros\\utils\\cast_bool_to_text.sql", "unique_id": "macro.dbt.default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205804.3095417, "supported_languages": null}, "macro.dbt.concat": {"name": "concat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\concat.sql", "original_file_path": "macros\\utils\\concat.sql", "unique_id": "macro.dbt.concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205804.3130143, "supported_languages": null}, "macro.dbt.default__concat": {"name": "default__concat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\concat.sql", "original_file_path": "macros\\utils\\concat.sql", "unique_id": "macro.dbt.default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205804.314869, "supported_languages": null}, "macro.dbt.type_string": {"name": "type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205804.869699, "supported_languages": null}, "macro.dbt.default__type_string": {"name": "default__type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205804.8722222, "supported_languages": null}, "macro.dbt.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205804.8737662, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205804.8757808, "supported_languages": null}, "macro.dbt.type_float": {"name": "type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205804.87778, "supported_languages": null}, "macro.dbt.default__type_float": {"name": "default__type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205804.878779, "supported_languages": null}, "macro.dbt.type_numeric": {"name": "type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205804.87978, "supported_languages": null}, "macro.dbt.default__type_numeric": {"name": "default__type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205804.8823068, "supported_languages": null}, "macro.dbt.type_bigint": {"name": "type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205804.8843083, "supported_languages": null}, "macro.dbt.default__type_bigint": {"name": "default__type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205804.88531, "supported_languages": null}, "macro.dbt.type_int": {"name": "type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205804.8873096, "supported_languages": null}, "macro.dbt.default__type_int": {"name": "default__type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205804.8888495, "supported_languages": null}, "macro.dbt.type_boolean": {"name": "type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205804.8898356, "supported_languages": null}, "macro.dbt.default__type_boolean": {"name": "default__type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205804.8933868, "supported_languages": null}, "macro.dbt.date": {"name": "date", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\date.sql", "original_file_path": "macros\\utils\\date.sql", "unique_id": "macro.dbt.date", "macro_sql": "{% macro date(year, month, day) %}\n  {{ return(adapter.dispatch('date', 'dbt') (year, month, day)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205804.897369, "supported_languages": null}, "macro.dbt.default__date": {"name": "default__date", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\date.sql", "original_file_path": "macros\\utils\\date.sql", "unique_id": "macro.dbt.default__date", "macro_sql": "{% macro default__date(year, month, day) -%}\n    {%- set dt = modules.datetime.date(year, month, day) -%}\n    {%- set iso_8601_formatted_date = dt.strftime('%Y-%m-%d') -%}\n    to_date('{{ iso_8601_formatted_date }}', 'YYYY-MM-DD')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205804.8999104, "supported_languages": null}, "macro.dbt.dateadd": {"name": "dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\dateadd.sql", "original_file_path": "macros\\utils\\dateadd.sql", "unique_id": "macro.dbt.dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205804.9029105, "supported_languages": null}, "macro.dbt.default__dateadd": {"name": "default__dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\dateadd.sql", "original_file_path": "macros\\utils\\dateadd.sql", "unique_id": "macro.dbt.default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205804.9044418, "supported_languages": null}, "macro.dbt.datediff": {"name": "datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\datediff.sql", "original_file_path": "macros\\utils\\datediff.sql", "unique_id": "macro.dbt.datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205804.9100003, "supported_languages": null}, "macro.dbt.default__datediff": {"name": "default__datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\datediff.sql", "original_file_path": "macros\\utils\\datediff.sql", "unique_id": "macro.dbt.default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205804.918535, "supported_languages": null}, "macro.dbt.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\date_spine.sql", "original_file_path": "macros\\utils\\date_spine.sql", "unique_id": "macro.dbt.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205804.9294083, "supported_languages": null}, "macro.dbt.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\date_spine.sql", "original_file_path": "macros\\utils\\date_spine.sql", "unique_id": "macro.dbt.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205804.9689388, "supported_languages": null}, "macro.dbt.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\date_spine.sql", "original_file_path": "macros\\utils\\date_spine.sql", "unique_id": "macro.dbt.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205804.977947, "supported_languages": null}, "macro.dbt.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\date_spine.sql", "original_file_path": "macros\\utils\\date_spine.sql", "unique_id": "macro.dbt.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n    {# call as follows:\n\n    date_spine(\n        \"day\",\n        \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n        \"dbt.dateadd(week, 1, current_date)\"\n    ) #}\n\n\n    with rawdata as (\n\n        {{dbt.generate_series(\n            dbt.get_intervals_between(start_date, end_date, datepart)\n        )}}\n\n    ),\n\n    all_periods as (\n\n        select (\n            {{\n                dbt.dateadd(\n                    datepart,\n                    \"row_number() over (order by 1) - 1\",\n                    start_date\n                )\n            }}\n        ) as date_{{datepart}}\n        from rawdata\n\n    ),\n\n    filtered as (\n\n        select *\n        from all_periods\n        where date_{{datepart}} <= {{ end_date }}\n\n    )\n\n    select * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.generate_series", "macro.dbt.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205804.9819348, "supported_languages": null}, "macro.dbt.date_trunc": {"name": "date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\date_trunc.sql", "original_file_path": "macros\\utils\\date_trunc.sql", "unique_id": "macro.dbt.date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205804.9849353, "supported_languages": null}, "macro.dbt.default__date_trunc": {"name": "default__date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\date_trunc.sql", "original_file_path": "macros\\utils\\date_trunc.sql", "unique_id": "macro.dbt.default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205804.9879358, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"name": "escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\escape_single_quotes.sql", "original_file_path": "macros\\utils\\escape_single_quotes.sql", "unique_id": "macro.dbt.escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205804.9929698, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"name": "default__escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\escape_single_quotes.sql", "original_file_path": "macros\\utils\\escape_single_quotes.sql", "unique_id": "macro.dbt.default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205804.9959664, "supported_languages": null}, "macro.dbt.except": {"name": "except", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\except.sql", "original_file_path": "macros\\utils\\except.sql", "unique_id": "macro.dbt.except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205804.9979658, "supported_languages": null}, "macro.dbt.default__except": {"name": "default__except", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\except.sql", "original_file_path": "macros\\utils\\except.sql", "unique_id": "macro.dbt.default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205804.998967, "supported_languages": null}, "macro.dbt.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\generate_series.sql", "original_file_path": "macros\\utils\\generate_series.sql", "unique_id": "macro.dbt.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205805.0064938, "supported_languages": null}, "macro.dbt.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\generate_series.sql", "original_file_path": "macros\\utils\\generate_series.sql", "unique_id": "macro.dbt.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205805.0140235, "supported_languages": null}, "macro.dbt.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\generate_series.sql", "original_file_path": "macros\\utils\\generate_series.sql", "unique_id": "macro.dbt.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205805.0170255, "supported_languages": null}, "macro.dbt.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\generate_series.sql", "original_file_path": "macros\\utils\\generate_series.sql", "unique_id": "macro.dbt.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205805.0230277, "supported_languages": null}, "macro.dbt.hash": {"name": "hash", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\hash.sql", "original_file_path": "macros\\utils\\hash.sql", "unique_id": "macro.dbt.hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205805.0260234, "supported_languages": null}, "macro.dbt.default__hash": {"name": "default__hash", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\hash.sql", "original_file_path": "macros\\utils\\hash.sql", "unique_id": "macro.dbt.default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205805.028042, "supported_languages": null}, "macro.dbt.intersect": {"name": "intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\intersect.sql", "original_file_path": "macros\\utils\\intersect.sql", "unique_id": "macro.dbt.intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205805.0400224, "supported_languages": null}, "macro.dbt.default__intersect": {"name": "default__intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\intersect.sql", "original_file_path": "macros\\utils\\intersect.sql", "unique_id": "macro.dbt.default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205805.0410275, "supported_languages": null}, "macro.dbt.last_day": {"name": "last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\last_day.sql", "original_file_path": "macros\\utils\\last_day.sql", "unique_id": "macro.dbt.last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205805.0484426, "supported_languages": null}, "macro.dbt.default_last_day": {"name": "default_last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\last_day.sql", "original_file_path": "macros\\utils\\last_day.sql", "unique_id": "macro.dbt.default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205805.0502603, "supported_languages": null}, "macro.dbt.default__last_day": {"name": "default__last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\last_day.sql", "original_file_path": "macros\\utils\\last_day.sql", "unique_id": "macro.dbt.default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205805.0547094, "supported_languages": null}, "macro.dbt.length": {"name": "length", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\length.sql", "original_file_path": "macros\\utils\\length.sql", "unique_id": "macro.dbt.length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205805.05671, "supported_languages": null}, "macro.dbt.default__length": {"name": "default__length", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\length.sql", "original_file_path": "macros\\utils\\length.sql", "unique_id": "macro.dbt.default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205805.0578341, "supported_languages": null}, "macro.dbt.listagg": {"name": "listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\listagg.sql", "original_file_path": "macros\\utils\\listagg.sql", "unique_id": "macro.dbt.listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205805.0648465, "supported_languages": null}, "macro.dbt.default__listagg": {"name": "default__listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\listagg.sql", "original_file_path": "macros\\utils\\listagg.sql", "unique_id": "macro.dbt.default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205805.0688627, "supported_languages": null}, "macro.dbt.string_literal": {"name": "string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\literal.sql", "original_file_path": "macros\\utils\\literal.sql", "unique_id": "macro.dbt.string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205805.0738494, "supported_languages": null}, "macro.dbt.default__string_literal": {"name": "default__string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\literal.sql", "original_file_path": "macros\\utils\\literal.sql", "unique_id": "macro.dbt.default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205805.075846, "supported_languages": null}, "macro.dbt.position": {"name": "position", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\position.sql", "original_file_path": "macros\\utils\\position.sql", "unique_id": "macro.dbt.position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205805.0799878, "supported_languages": null}, "macro.dbt.default__position": {"name": "default__position", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\position.sql", "original_file_path": "macros\\utils\\position.sql", "unique_id": "macro.dbt.default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205805.0809994, "supported_languages": null}, "macro.dbt.replace": {"name": "replace", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\replace.sql", "original_file_path": "macros\\utils\\replace.sql", "unique_id": "macro.dbt.replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205805.086002, "supported_languages": null}, "macro.dbt.default__replace": {"name": "default__replace", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\replace.sql", "original_file_path": "macros\\utils\\replace.sql", "unique_id": "macro.dbt.default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205805.0870006, "supported_languages": null}, "macro.dbt.right": {"name": "right", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\right.sql", "original_file_path": "macros\\utils\\right.sql", "unique_id": "macro.dbt.right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205805.089512, "supported_languages": null}, "macro.dbt.default__right": {"name": "default__right", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\right.sql", "original_file_path": "macros\\utils\\right.sql", "unique_id": "macro.dbt.default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205805.0905268, "supported_languages": null}, "macro.dbt.safe_cast": {"name": "safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\safe_cast.sql", "original_file_path": "macros\\utils\\safe_cast.sql", "unique_id": "macro.dbt.safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205805.0995438, "supported_languages": null}, "macro.dbt.default__safe_cast": {"name": "default__safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\safe_cast.sql", "original_file_path": "macros\\utils\\safe_cast.sql", "unique_id": "macro.dbt.default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205805.1048656, "supported_languages": null}, "macro.dbt.split_part": {"name": "split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\split_part.sql", "original_file_path": "macros\\utils\\split_part.sql", "unique_id": "macro.dbt.split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205805.108916, "supported_languages": null}, "macro.dbt.default__split_part": {"name": "default__split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\split_part.sql", "original_file_path": "macros\\utils\\split_part.sql", "unique_id": "macro.dbt.default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205805.1099143, "supported_languages": null}, "macro.dbt._split_part_negative": {"name": "_split_part_negative", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\split_part.sql", "original_file_path": "macros\\utils\\split_part.sql", "unique_id": "macro.dbt._split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 + {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205805.1139133, "supported_languages": null}, "macro.dbt.test_unique": {"name": "test_unique", "resource_type": "macro", "package_name": "dbt", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "unique_id": "macro.dbt.test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205805.1194847, "supported_languages": null}, "macro.dbt.test_not_null": {"name": "test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "unique_id": "macro.dbt.test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205805.122484, "supported_languages": null}, "macro.dbt.test_accepted_values": {"name": "test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "unique_id": "macro.dbt.test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205805.12556, "supported_languages": null}, "macro.dbt.test_relationships": {"name": "test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "unique_id": "macro.dbt.test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205805.127557, "supported_languages": null}, "macro.dbt_utils.test_accepted_range": {"name": "test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\accepted_range.sql", "original_file_path": "macros\\generic_tests\\accepted_range.sql", "unique_id": "macro.dbt_utils.test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205805.1425753, "supported_languages": null}, "macro.dbt_utils.default__test_accepted_range": {"name": "default__test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\accepted_range.sql", "original_file_path": "macros\\generic_tests\\accepted_range.sql", "unique_id": "macro.dbt_utils.default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205805.147687, "supported_languages": null}, "macro.dbt_utils.test_at_least_one": {"name": "test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\at_least_one.sql", "original_file_path": "macros\\generic_tests\\at_least_one.sql", "unique_id": "macro.dbt_utils.test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205805.1572638, "supported_languages": null}, "macro.dbt_utils.default__test_at_least_one": {"name": "default__test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\at_least_one.sql", "original_file_path": "macros\\generic_tests\\at_least_one.sql", "unique_id": "macro.dbt_utils.default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name, group_by_columns) %}\n\n{% set pruned_cols = [column_name] %}\n\n{% if group_by_columns|length() > 0 %}\n\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n  {% set pruned_cols = group_by_columns %}\n\n  {% if column_name not in pruned_cols %}\n    {% do pruned_cols.append(column_name) %}\n  {% endif %}\n\n{% endif %}\n\n{% set select_pruned_cols = pruned_cols|join(' ,') %}\n\nselect *\nfrom (\n    with pruned_rows as (\n      select\n        {{ select_pruned_cols }}\n      from {{ model }}\n      where {{ column_name }} is not null\n      limit 1\n    )\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      {{select_gb_cols}}\n      count({{ column_name }}) as filler_column\n\n    from pruned_rows\n\n    {{groupby_gb_cols}}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205805.166912, "supported_languages": null}, "macro.dbt_utils.test_cardinality_equality": {"name": "test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\cardinality_equality.sql", "original_file_path": "macros\\generic_tests\\cardinality_equality.sql", "unique_id": "macro.dbt_utils.test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205805.17296, "supported_languages": null}, "macro.dbt_utils.default__test_cardinality_equality": {"name": "default__test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\cardinality_equality.sql", "original_file_path": "macros\\generic_tests\\cardinality_equality.sql", "unique_id": "macro.dbt_utils.default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205805.1779585, "supported_languages": null}, "macro.dbt_utils.test_equality": {"name": "test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\equality.sql", "original_file_path": "macros\\generic_tests\\equality.sql", "unique_id": "macro.dbt_utils.test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None, exclude_columns=None, precision = None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns, exclude_columns, precision)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205805.1994898, "supported_languages": null}, "macro.dbt_utils.default__test_equality": {"name": "default__test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\equality.sql", "original_file_path": "macros\\generic_tests\\equality.sql", "unique_id": "macro.dbt_utils.default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None, exclude_columns=None, precision = None) %}\n\n{%- if compare_columns and exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\"Both a compare and an ignore list were provided to the `equality` macro. Only one is allowed\") }}\n{%- endif -%}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{# Ensure there are no extra columns in the compare_model vs model #}\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- do dbt_utils._is_ephemeral(compare_model, 'test_equality') -%}\n\n    {%- set model_columns = adapter.get_columns_in_relation(model) -%}\n    {%- set compare_model_columns = adapter.get_columns_in_relation(compare_model) -%}\n\n\n    {%- if exclude_columns -%}\n        {#-- Lower case ignore columns for easier comparison --#}\n        {%- set exclude_columns = exclude_columns | map(\"lower\") | list %}\n\n        {# Filter out the excluded columns #}\n        {%- set include_columns = [] %}\n        {%- set include_model_columns = [] %}\n        {%- for column in model_columns -%}\n            {%- if column.name | lower not in exclude_columns -%}\n                {% do include_columns.append(column) %}\n            {%- endif %}\n        {%- endfor %}\n        {%- for column in compare_model_columns -%}\n            {%- if column.name | lower not in exclude_columns -%}\n                {% do include_model_columns.append(column) %}\n            {%- endif %}\n        {%- endfor %}\n\n        {%- set compare_columns_set = set(include_columns | map(attribute='quoted') | map(\"lower\")) %}\n        {%- set compare_model_columns_set = set(include_model_columns | map(attribute='quoted') | map(\"lower\")) %}\n    {%- else -%}\n        {%- set compare_columns_set = set(model_columns | map(attribute='quoted') | map(\"lower\")) %}\n        {%- set compare_model_columns_set = set(compare_model_columns | map(attribute='quoted') | map(\"lower\")) %}\n    {%- endif -%}\n\n    {% if compare_columns_set != compare_model_columns_set %}\n        {{ exceptions.raise_compiler_error(compare_model ~\" has less columns than \" ~ model ~ \", please ensure they have the same columns or use the `compare_columns` or `exclude_columns` arguments to subset them.\") }}\n    {% endif %}\n\n\n{% endif %}\n\n{%- if not precision -%}\n    {%- if not compare_columns -%}\n        {# \n            You cannot get the columns in an ephemeral model (due to not existing in the information schema),\n            so if the user does not provide an explicit list of columns we must error in the case it is ephemeral\n        #}\n        {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n        {%- set compare_columns = adapter.get_columns_in_relation(model)-%}\n\n        {%- if exclude_columns -%}\n            {#-- Lower case ignore columns for easier comparison --#}\n            {%- set exclude_columns = exclude_columns | map(\"lower\") | list %}\n\n            {# Filter out the excluded columns #}\n            {%- set include_columns = [] %}\n            {%- for column in compare_columns -%}\n                {%- if column.name | lower not in exclude_columns -%}\n                    {% do include_columns.append(column) %}\n                {%- endif %}\n            {%- endfor %}\n\n            {%- set compare_columns = include_columns | map(attribute='quoted') %}\n        {%- else -%} {# Compare columns provided #}\n            {%- set compare_columns = compare_columns | map(attribute='quoted') %}\n        {%- endif -%}\n    {%- endif -%}\n\n    {% set compare_cols_csv = compare_columns | join(', ') %}\n\n{% else %} {# Precision required #}\n    {#-\n        If rounding is required, we need to get the types, so it cannot be ephemeral even if they provide column names\n    -#}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set columns = adapter.get_columns_in_relation(model) -%}\n\n    {% set columns_list = [] %}\n    {%- for col in columns -%}\n        {%- if (\n                (col.name|lower in compare_columns|map('lower') or not compare_columns) and\n                (col.name|lower not in exclude_columns|map('lower') or not exclude_columns)\n                ) -%}\n            {# Databricks double type is not picked up by any number type checks in dbt #}\n            {%- if col.is_float() or col.is_numeric() or col.data_type == 'double' -%}\n                {# Cast is required due to postgres not having round for a double precision number #}\n                {%- do columns_list.append('round(cast(' ~ col.quoted ~ ' as ' ~ dbt.type_numeric() ~ '),' ~ precision ~ ') as ' ~ col.quoted) -%}\n            {%- else -%} {# Non-numeric type #}\n                {%- do columns_list.append(col.quoted) -%}\n            {%- endif -%}\n        {% endif %}\n    {%- endfor -%}\n\n    {% set compare_cols_csv = columns_list | join(', ') %}\n\n{% endif %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.type_numeric", "macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205805.2576528, "supported_languages": null}, "macro.dbt_utils.test_equal_rowcount": {"name": "test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\equal_rowcount.sql", "original_file_path": "macros\\generic_tests\\equal_rowcount.sql", "unique_id": "macro.dbt_utils.test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205805.2660463, "supported_languages": null}, "macro.dbt_utils.default__test_equal_rowcount": {"name": "default__test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\equal_rowcount.sql", "original_file_path": "macros\\generic_tests\\equal_rowcount.sql", "unique_id": "macro.dbt_utils.default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model, group_by_columns) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'sum(coalesce(diff_count, 0))') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(', ') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in fewer_rows_than. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_equal_rowcount'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_a \n    from {{ model }}\n    {{groupby_gb_cols}}\n\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_b \n    from {{ compare_model }}\n    {{groupby_gb_cols}}\n\n),\nfinal as (\n\n    select\n    \n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n\n    from a\n    full join b\n    on\n    a.id_dbtutils_test_equal_rowcount = b.id_dbtutils_test_equal_rowcount\n    {{join_gb_cols}}\n\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205805.2780855, "supported_languages": null}, "macro.dbt_utils.test_expression_is_true": {"name": "test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\expression_is_true.sql", "original_file_path": "macros\\generic_tests\\expression_is_true.sql", "unique_id": "macro.dbt_utils.test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None) %}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205805.2814207, "supported_languages": null}, "macro.dbt_utils.default__test_expression_is_true": {"name": "default__test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\expression_is_true.sql", "original_file_path": "macros\\generic_tests\\expression_is_true.sql", "unique_id": "macro.dbt_utils.default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else \"1\" %}\n\nselect\n    {{ column_list }}\nfrom {{ model }}\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205805.284921, "supported_languages": null}, "macro.dbt_utils.test_fewer_rows_than": {"name": "test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\fewer_rows_than.sql", "original_file_path": "macros\\generic_tests\\fewer_rows_than.sql", "unique_id": "macro.dbt_utils.test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205805.2990549, "supported_languages": null}, "macro.dbt_utils.default__test_fewer_rows_than": {"name": "default__test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\fewer_rows_than.sql", "original_file_path": "macros\\generic_tests\\fewer_rows_than.sql", "unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model, group_by_columns) %}\n\n{{ config(fail_calc = 'sum(coalesce(row_count_delta, 0))') }}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in equal_rowcount. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_fewer_rows_than'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_our_model \n    from {{ model }}\n    {{ groupby_gb_cols }}\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_comparison_model \n    from {{ compare_model }}\n    {{ groupby_gb_cols }}\n\n),\ncounts as (\n\n    select\n\n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_our_model,\n        count_comparison_model\n    from a\n    full join b on \n    a.id_dbtutils_test_fewer_rows_than = b.id_dbtutils_test_fewer_rows_than\n    {{ join_gb_cols }}\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205805.3109446, "supported_languages": null}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"name": "test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\mutually_exclusive_ranges.sql", "original_file_path": "macros\\generic_tests\\mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205805.3610287, "supported_languages": null}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"name": "default__test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\mutually_exclusive_ranges.sql", "original_file_path": "macros\\generic_tests\\mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}, {{ upper_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc, {{ upper_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions more cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205805.3834321, "supported_languages": null}, "macro.dbt_utils.test_not_accepted_values": {"name": "test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\not_accepted_values.sql", "original_file_path": "macros\\generic_tests\\not_accepted_values.sql", "unique_id": "macro.dbt_utils.test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205805.3884294, "supported_languages": null}, "macro.dbt_utils.default__test_not_accepted_values": {"name": "default__test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\not_accepted_values.sql", "original_file_path": "macros\\generic_tests\\not_accepted_values.sql", "unique_id": "macro.dbt_utils.default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205805.4014482, "supported_languages": null}, "macro.dbt_utils.test_not_constant": {"name": "test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\not_constant.sql", "original_file_path": "macros\\generic_tests\\not_constant.sql", "unique_id": "macro.dbt_utils.test_not_constant", "macro_sql": "{% test not_constant(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205805.4044454, "supported_languages": null}, "macro.dbt_utils.default__test_not_constant": {"name": "default__test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\not_constant.sql", "original_file_path": "macros\\generic_tests\\not_constant.sql", "unique_id": "macro.dbt_utils.default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name, group_by_columns) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    {{select_gb_cols}}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\n  {{groupby_gb_cols}}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205805.4176824, "supported_languages": null}, "macro.dbt_utils.test_not_empty_string": {"name": "test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\not_empty_string.sql", "original_file_path": "macros\\generic_tests\\not_empty_string.sql", "unique_id": "macro.dbt_utils.test_not_empty_string", "macro_sql": "{% test not_empty_string(model, column_name, trim_whitespace=true) %}\n\n  {{ return(adapter.dispatch('test_not_empty_string', 'dbt_utils')(model, column_name, trim_whitespace)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_empty_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205805.4471946, "supported_languages": null}, "macro.dbt_utils.default__test_not_empty_string": {"name": "default__test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\not_empty_string.sql", "original_file_path": "macros\\generic_tests\\not_empty_string.sql", "unique_id": "macro.dbt_utils.default__test_not_empty_string", "macro_sql": "{% macro default__test_not_empty_string(model, column_name, trim_whitespace=true) %}\n\n    with\n    \n    all_values as (\n\n        select \n\n\n            {% if trim_whitespace == true -%}\n\n                trim({{ column_name }}) as {{ column_name }}\n\n            {%- else -%}\n\n                {{ column_name }}\n\n            {%- endif %}\n            \n        from {{ model }}\n\n    ),\n\n    errors as (\n\n        select * from all_values\n        where {{ column_name }} = ''\n\n    )\n\n    select * from errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205805.4511986, "supported_languages": null}, "macro.dbt_utils.test_not_null_proportion": {"name": "test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\not_null_proportion.sql", "original_file_path": "macros\\generic_tests\\not_null_proportion.sql", "unique_id": "macro.dbt_utils.test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, group_by_columns, **kwargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205805.460734, "supported_languages": null}, "macro.dbt_utils.default__test_not_null_proportion": {"name": "default__test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\not_null_proportion.sql", "original_file_path": "macros\\generic_tests\\not_null_proportion.sql", "unique_id": "macro.dbt_utils.default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model, group_by_columns) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith validation as (\n  select\n    {{select_gb_cols}}\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n  {{groupby_gb_cols}}\n),\nvalidation_errors as (\n  select\n    {{select_gb_cols}}\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205805.4707336, "supported_languages": null}, "macro.dbt_utils.test_recency": {"name": "test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\recency.sql", "original_file_path": "macros\\generic_tests\\recency.sql", "unique_id": "macro.dbt_utils.test_recency", "macro_sql": "{% test recency(model, field, datepart, interval, ignore_time_component=False, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval, ignore_time_component, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205805.479734, "supported_languages": null}, "macro.dbt_utils.default__test_recency": {"name": "default__test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\recency.sql", "original_file_path": "macros\\generic_tests\\recency.sql", "unique_id": "macro.dbt_utils.default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval, ignore_time_component, group_by_columns) %}\n\n{% set threshold = 'cast(' ~ dbt.dateadd(datepart, interval * -1, dbt.current_timestamp()) ~ ' as ' ~ ('date' if ignore_time_component else dbt.type_timestamp()) ~ ')'  %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nwith recency as (\n\n    select \n\n      {{ select_gb_cols }}\n      {% if ignore_time_component %}\n        cast(max({{ field }}) as date) as most_recent\n      {%- else %}\n        max({{ field }}) as most_recent\n      {%- endif %}\n\n    from {{ model }}\n\n    {{ groupby_gb_cols }}\n\n)\n\nselect\n\n    {{ select_gb_cols }}\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.current_timestamp", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205805.4887347, "supported_languages": null}, "macro.dbt_utils.test_relationships_where": {"name": "test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\relationships_where.sql", "original_file_path": "macros\\generic_tests\\relationships_where.sql", "unique_id": "macro.dbt_utils.test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205805.498267, "supported_languages": null}, "macro.dbt_utils.default__test_relationships_where": {"name": "default__test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\relationships_where.sql", "original_file_path": "macros\\generic_tests\\relationships_where.sql", "unique_id": "macro.dbt_utils.default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205805.5078032, "supported_languages": null}, "macro.dbt_utils.test_sequential_values": {"name": "test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\sequential_values.sql", "original_file_path": "macros\\generic_tests\\sequential_values.sql", "unique_id": "macro.dbt_utils.test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart, group_by_columns)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205805.5184522, "supported_languages": null}, "macro.dbt_utils.default__test_sequential_values": {"name": "default__test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\sequential_values.sql", "original_file_path": "macros\\generic_tests\\sequential_values.sql", "unique_id": "macro.dbt_utils.default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(',') + ', ' %}\n  {% set partition_gb_cols = 'partition by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith windowed as (\n\n    select\n        {{ select_gb_cols }}\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            {{partition_gb_cols}}\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt.type_timestamp() }})= cast({{ dbt.dateadd(datepart, interval, previous_column_name) }} as {{ dbt.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.slugify", "macro.dbt.type_timestamp", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205805.5359972, "supported_languages": null}, "macro.dbt_utils.test_unique_combination_of_columns": {"name": "test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\unique_combination_of_columns.sql", "original_file_path": "macros\\generic_tests\\unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205805.5429852, "supported_languages": null}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"name": "default__test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\unique_combination_of_columns.sql", "original_file_path": "macros\\generic_tests\\unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205805.5509872, "supported_languages": null}, "macro.dbt_utils.log_info": {"name": "log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\jinja_helpers\\log_info.sql", "original_file_path": "macros\\jinja_helpers\\log_info.sql", "unique_id": "macro.dbt_utils.log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205805.554987, "supported_languages": null}, "macro.dbt_utils.default__log_info": {"name": "default__log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\jinja_helpers\\log_info.sql", "original_file_path": "macros\\jinja_helpers\\log_info.sql", "unique_id": "macro.dbt_utils.default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205805.5579917, "supported_languages": null}, "macro.dbt_utils.pretty_log_format": {"name": "pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\jinja_helpers\\pretty_log_format.sql", "original_file_path": "macros\\jinja_helpers\\pretty_log_format.sql", "unique_id": "macro.dbt_utils.pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205805.5609865, "supported_languages": null}, "macro.dbt_utils.default__pretty_log_format": {"name": "default__pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\jinja_helpers\\pretty_log_format.sql", "original_file_path": "macros\\jinja_helpers\\pretty_log_format.sql", "unique_id": "macro.dbt_utils.default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205805.5649855, "supported_languages": null}, "macro.dbt_utils.pretty_time": {"name": "pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\jinja_helpers\\pretty_time.sql", "original_file_path": "macros\\jinja_helpers\\pretty_time.sql", "unique_id": "macro.dbt_utils.pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205805.5700033, "supported_languages": null}, "macro.dbt_utils.default__pretty_time": {"name": "default__pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\jinja_helpers\\pretty_time.sql", "original_file_path": "macros\\jinja_helpers\\pretty_time.sql", "unique_id": "macro.dbt_utils.default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205805.5769868, "supported_languages": null}, "macro.dbt_utils.slugify": {"name": "slugify", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\jinja_helpers\\slugify.sql", "original_file_path": "macros\\jinja_helpers\\slugify.sql", "unique_id": "macro.dbt_utils.slugify", "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n{#- Prepends \"_\" if string begins with a number -#}\n{% set string = modules.re.sub('^[0-9]', '_' + string[0], string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205805.5819862, "supported_languages": null}, "macro.dbt_utils._is_ephemeral": {"name": "_is_ephemeral", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\jinja_helpers\\_is_ephemeral.sql", "original_file_path": "macros\\jinja_helpers\\_is_ephemeral.sql", "unique_id": "macro.dbt_utils._is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205805.5949857, "supported_languages": null}, "macro.dbt_utils._is_relation": {"name": "_is_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\jinja_helpers\\_is_relation.sql", "original_file_path": "macros\\jinja_helpers\\_is_relation.sql", "unique_id": "macro.dbt_utils._is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205805.6035578, "supported_languages": null}, "macro.dbt_utils.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\date_spine.sql", "original_file_path": "macros\\sql\\date_spine.sql", "unique_id": "macro.dbt_utils.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205805.609837, "supported_languages": null}, "macro.dbt_utils.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\date_spine.sql", "original_file_path": "macros\\sql\\date_spine.sql", "unique_id": "macro.dbt_utils.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205805.6243908, "supported_languages": null}, "macro.dbt_utils.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\date_spine.sql", "original_file_path": "macros\\sql\\date_spine.sql", "unique_id": "macro.dbt_utils.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205805.6273801, "supported_languages": null}, "macro.dbt_utils.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\date_spine.sql", "original_file_path": "macros\\sql\\date_spine.sql", "unique_id": "macro.dbt_utils.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dbt.dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205805.6306221, "supported_languages": null}, "macro.dbt_utils.deduplicate": {"name": "deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\deduplicate.sql", "original_file_path": "macros\\sql\\deduplicate.sql", "unique_id": "macro.dbt_utils.deduplicate", "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by) -%}\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205805.639635, "supported_languages": null}, "macro.dbt_utils.default__deduplicate": {"name": "default__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\deduplicate.sql", "original_file_path": "macros\\sql\\deduplicate.sql", "unique_id": "macro.dbt_utils.default__deduplicate", "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205805.645301, "supported_languages": null}, "macro.dbt_utils.redshift__deduplicate": {"name": "redshift__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\deduplicate.sql", "original_file_path": "macros\\sql\\deduplicate.sql", "unique_id": "macro.dbt_utils.redshift__deduplicate", "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }} as tt\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205805.6482966, "supported_languages": null}, "macro.dbt_utils.postgres__deduplicate": {"name": "postgres__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\deduplicate.sql", "original_file_path": "macros\\sql\\deduplicate.sql", "unique_id": "macro.dbt_utils.postgres__deduplicate", "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205805.654845, "supported_languages": null}, "macro.dbt_utils.snowflake__deduplicate": {"name": "snowflake__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\deduplicate.sql", "original_file_path": "macros\\sql\\deduplicate.sql", "unique_id": "macro.dbt_utils.snowflake__deduplicate", "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205805.656853, "supported_languages": null}, "macro.dbt_utils.databricks__deduplicate": {"name": "databricks__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\deduplicate.sql", "original_file_path": "macros\\sql\\deduplicate.sql", "unique_id": "macro.dbt_utils.databricks__deduplicate", "macro_sql": "\n{%- macro databricks__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205805.6588256, "supported_languages": null}, "macro.dbt_utils.bigquery__deduplicate": {"name": "bigquery__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\deduplicate.sql", "original_file_path": "macros\\sql\\deduplicate.sql", "unique_id": "macro.dbt_utils.bigquery__deduplicate", "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205805.6608279, "supported_languages": null}, "macro.dbt_utils.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\generate_series.sql", "original_file_path": "macros\\sql\\generate_series.sql", "unique_id": "macro.dbt_utils.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205805.6748292, "supported_languages": null}, "macro.dbt_utils.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\generate_series.sql", "original_file_path": "macros\\sql\\generate_series.sql", "unique_id": "macro.dbt_utils.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205805.680831, "supported_languages": null}, "macro.dbt_utils.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\generate_series.sql", "original_file_path": "macros\\sql\\generate_series.sql", "unique_id": "macro.dbt_utils.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205805.684828, "supported_languages": null}, "macro.dbt_utils.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\generate_series.sql", "original_file_path": "macros\\sql\\generate_series.sql", "unique_id": "macro.dbt_utils.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205805.695029, "supported_languages": null}, "macro.dbt_utils.generate_surrogate_key": {"name": "generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\generate_surrogate_key.sql", "original_file_path": "macros\\sql\\generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.generate_surrogate_key", "macro_sql": "{%- macro generate_surrogate_key(field_list) -%}\n    {{ return(adapter.dispatch('generate_surrogate_key', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205805.7050233, "supported_languages": null}, "macro.dbt_utils.default__generate_surrogate_key": {"name": "default__generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\generate_surrogate_key.sql", "original_file_path": "macros\\sql\\generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.default__generate_surrogate_key", "macro_sql": "\n\n{%- macro default__generate_surrogate_key(field_list) -%}\n\n{%- if var('surrogate_key_treat_nulls_as_empty_strings', False) -%}\n    {%- set default_null_value = \"\" -%}\n{%- else -%}\n    {%- set default_null_value = '_dbt_utils_surrogate_key_null_' -%}\n{%- endif -%}\n\n{%- set fields = [] -%}\n\n{%- for field in field_list -%}\n\n    {%- do fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt.type_string() ~ \"), '\" ~ default_null_value  ~\"')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- do fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{ dbt.hash(dbt.concat(fields)) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.hash", "macro.dbt.concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205805.7200696, "supported_languages": null}, "macro.dbt_utils.get_column_values": {"name": "get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_column_values.sql", "original_file_path": "macros\\sql\\get_column_values.sql", "unique_id": "macro.dbt_utils.get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205805.729766, "supported_languages": null}, "macro.dbt_utils.default__get_column_values": {"name": "default__get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_column_values.sql", "original_file_path": "macros\\sql\\get_column_values.sql", "unique_id": "macro.dbt_utils.default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_ephemeral", "macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205805.748868, "supported_languages": null}, "macro.dbt_utils.get_filtered_columns_in_relation": {"name": "get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_filtered_columns_in_relation.sql", "original_file_path": "macros\\sql\\get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.get_filtered_columns_in_relation", "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205805.7553942, "supported_languages": null}, "macro.dbt_utils.default__get_filtered_columns_in_relation": {"name": "default__get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_filtered_columns_in_relation.sql", "original_file_path": "macros\\sql\\get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation", "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205805.761398, "supported_languages": null}, "macro.dbt_utils.get_query_results_as_dict": {"name": "get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_query_results_as_dict.sql", "original_file_path": "macros\\sql\\get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205805.7649071, "supported_languages": null}, "macro.dbt_utils.default__get_query_results_as_dict": {"name": "default__get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_query_results_as_dict.sql", "original_file_path": "macros\\sql\\get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205805.7729237, "supported_languages": null}, "macro.dbt_utils.get_relations_by_pattern": {"name": "get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_relations_by_pattern.sql", "original_file_path": "macros\\sql\\get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205805.7799208, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_pattern": {"name": "default__get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_relations_by_pattern.sql", "original_file_path": "macros\\sql\\get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205805.7885926, "supported_languages": null}, "macro.dbt_utils.get_relations_by_prefix": {"name": "get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_relations_by_prefix.sql", "original_file_path": "macros\\sql\\get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205805.7981203, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_prefix": {"name": "default__get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_relations_by_prefix.sql", "original_file_path": "macros\\sql\\get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205805.8076468, "supported_languages": null}, "macro.dbt_utils.get_single_value": {"name": "get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_single_value.sql", "original_file_path": "macros\\sql\\get_single_value.sql", "unique_id": "macro.dbt_utils.get_single_value", "macro_sql": "{% macro get_single_value(query, default=none) %}\n    {{ return(adapter.dispatch('get_single_value', 'dbt_utils')(query, default)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_single_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205805.820746, "supported_languages": null}, "macro.dbt_utils.default__get_single_value": {"name": "default__get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_single_value.sql", "original_file_path": "macros\\sql\\get_single_value.sql", "unique_id": "macro.dbt_utils.default__get_single_value", "macro_sql": "{% macro default__get_single_value(query, default) %}\n\n{# This macro returns the (0, 0) record in a query, i.e. the first row of the first column #}\n\n    {%- call statement('get_query_result', fetch_result=True, auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {%- if execute -%}\n\n        {% set r = load_result('get_query_result').table.columns[0].values() %}\n        {% if r | length == 0 %}\n            {% do print('Query `' ~ query ~ '` returned no rows. Using the default value: ' ~ default) %}\n            {% set sql_result = default %}\n        {% else %}\n            {% set sql_result = r[0] %}\n        {% endif %}\n        \n    {%- else -%}\n    \n        {% set sql_result = default %}\n    \n    {%- endif -%}\n\n    {% do return(sql_result) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205805.8305755, "supported_languages": null}, "macro.dbt_utils.get_tables_by_pattern_sql": {"name": "get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_tables_by_pattern_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205805.8737535, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"name": "default__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_tables_by_pattern_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205805.8802867, "supported_languages": null}, "macro.dbt_utils.redshift__get_tables_by_pattern_sql": {"name": "redshift__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_tables_by_pattern_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.redshift__get_tables_by_pattern_sql", "macro_sql": "{% macro redshift__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% set sql %}\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from \"{{ database }}\".\"information_schema\".\"tables\"\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n        union all\n        select distinct\n            schemaname as {{ adapter.quote('table_schema') }},\n            tablename as {{ adapter.quote('table_name') }},\n            'external' as {{ adapter.quote('table_type') }}\n        from svv_external_tables\n        where redshift_database_name = '{{ database }}'\n        and schemaname ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n    {% endset %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205805.8902977, "supported_languages": null}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"name": "bigquery__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_tables_by_pattern_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata", "macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205805.901826, "supported_languages": null}, "macro.dbt_utils._bigquery__get_matching_schemata": {"name": "_bigquery__get_matching_schemata", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_tables_by_pattern_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205805.906823, "supported_languages": null}, "macro.dbt_utils.get_tables_by_prefix_sql": {"name": "get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_tables_by_prefix_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205805.9158556, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"name": "default__get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_tables_by_prefix_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205805.9218762, "supported_languages": null}, "macro.dbt_utils.get_table_types_sql": {"name": "get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_table_types_sql.sql", "original_file_path": "macros\\sql\\get_table_types_sql.sql", "unique_id": "macro.dbt_utils.get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils.default__get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205805.9270236, "supported_languages": null}, "macro.dbt_utils.default__get_table_types_sql": {"name": "default__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_table_types_sql.sql", "original_file_path": "macros\\sql\\get_table_types_sql.sql", "unique_id": "macro.dbt_utils.default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205805.9281821, "supported_languages": null}, "macro.dbt_utils.postgres__get_table_types_sql": {"name": "postgres__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_table_types_sql.sql", "original_file_path": "macros\\sql\\get_table_types_sql.sql", "unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205805.930248, "supported_languages": null}, "macro.dbt_utils.databricks__get_table_types_sql": {"name": "databricks__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_table_types_sql.sql", "original_file_path": "macros\\sql\\get_table_types_sql.sql", "unique_id": "macro.dbt_utils.databricks__get_table_types_sql", "macro_sql": "{% macro databricks__get_table_types_sql() %}\n            case table_type\n                when 'MANAGED' then 'table'\n                when 'BASE TABLE' then 'table'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205805.9364657, "supported_languages": null}, "macro.dbt_utils.group_by": {"name": "group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\groupby.sql", "original_file_path": "macros\\sql\\groupby.sql", "unique_id": "macro.dbt_utils.group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205805.9419801, "supported_languages": null}, "macro.dbt_utils.default__group_by": {"name": "default__group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\groupby.sql", "original_file_path": "macros\\sql\\groupby.sql", "unique_id": "macro.dbt_utils.default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205805.9449959, "supported_languages": null}, "macro.dbt_utils.degrees_to_radians": {"name": "degrees_to_radians", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\haversine_distance.sql", "original_file_path": "macros\\sql\\haversine_distance.sql", "unique_id": "macro.dbt_utils.degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205805.9559462, "supported_languages": null}, "macro.dbt_utils.haversine_distance": {"name": "haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\haversine_distance.sql", "original_file_path": "macros\\sql\\haversine_distance.sql", "unique_id": "macro.dbt_utils.haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205805.9613774, "supported_languages": null}, "macro.dbt_utils.default__haversine_distance": {"name": "default__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\haversine_distance.sql", "original_file_path": "macros\\sql\\haversine_distance.sql", "unique_id": "macro.dbt_utils.default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205805.96539, "supported_languages": null}, "macro.dbt_utils.bigquery__haversine_distance": {"name": "bigquery__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\haversine_distance.sql", "original_file_path": "macros\\sql\\haversine_distance.sql", "unique_id": "macro.dbt_utils.bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205805.972923, "supported_languages": null}, "macro.dbt_utils.nullcheck": {"name": "nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\nullcheck.sql", "original_file_path": "macros\\sql\\nullcheck.sql", "unique_id": "macro.dbt_utils.nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205805.9769204, "supported_languages": null}, "macro.dbt_utils.default__nullcheck": {"name": "default__nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\nullcheck.sql", "original_file_path": "macros\\sql\\nullcheck.sql", "unique_id": "macro.dbt_utils.default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205805.98193, "supported_languages": null}, "macro.dbt_utils.nullcheck_table": {"name": "nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\nullcheck_table.sql", "original_file_path": "macros\\sql\\nullcheck_table.sql", "unique_id": "macro.dbt_utils.nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205805.983922, "supported_languages": null}, "macro.dbt_utils.default__nullcheck_table": {"name": "default__nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\nullcheck_table.sql", "original_file_path": "macros\\sql\\nullcheck_table.sql", "unique_id": "macro.dbt_utils.default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205805.9859312, "supported_languages": null}, "macro.dbt_utils.pivot": {"name": "pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\pivot.sql", "original_file_path": "macros\\sql\\pivot.sql", "unique_id": "macro.dbt_utils.pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205805.9976797, "supported_languages": null}, "macro.dbt_utils.default__pivot": {"name": "default__pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\pivot.sql", "original_file_path": "macros\\sql\\pivot.sql", "unique_id": "macro.dbt_utils.default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.escape_single_quotes", "macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205806.00525, "supported_languages": null}, "macro.dbt_utils.safe_add": {"name": "safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\safe_add.sql", "original_file_path": "macros\\sql\\safe_add.sql", "unique_id": "macro.dbt_utils.safe_add", "macro_sql": "{%- macro safe_add(field_list) -%}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205806.0087745, "supported_languages": null}, "macro.dbt_utils.default__safe_add": {"name": "default__safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\safe_add.sql", "original_file_path": "macros\\sql\\safe_add.sql", "unique_id": "macro.dbt_utils.default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_add` macro now takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205806.027104, "supported_languages": null}, "macro.dbt_utils.safe_divide": {"name": "safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\safe_divide.sql", "original_file_path": "macros\\sql\\safe_divide.sql", "unique_id": "macro.dbt_utils.safe_divide", "macro_sql": "{% macro safe_divide(numerator, denominator) -%}\n  {{ return(adapter.dispatch('safe_divide', 'dbt_utils')(numerator, denominator)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_divide"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205806.030106, "supported_languages": null}, "macro.dbt_utils.default__safe_divide": {"name": "default__safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\safe_divide.sql", "original_file_path": "macros\\sql\\safe_divide.sql", "unique_id": "macro.dbt_utils.default__safe_divide", "macro_sql": "{% macro default__safe_divide(numerator, denominator) %}\n    ( {{ numerator }} ) / nullif( ( {{ denominator }} ), 0)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205806.031109, "supported_languages": null}, "macro.dbt_utils.safe_subtract": {"name": "safe_subtract", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\safe_subtract.sql", "original_file_path": "macros\\sql\\safe_subtract.sql", "unique_id": "macro.dbt_utils.safe_subtract", "macro_sql": "{%- macro safe_subtract(field_list) -%}\n    {{ return(adapter.dispatch('safe_subtract', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_subtract"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205806.0420763, "supported_languages": null}, "macro.dbt_utils.default__safe_subtract": {"name": "default__safe_subtract", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\safe_subtract.sql", "original_file_path": "macros\\sql\\safe_subtract.sql", "unique_id": "macro.dbt_utils.default__safe_subtract", "macro_sql": "\n\n{%- macro default__safe_subtract(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_subtract` macro takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' -\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205806.0490954, "supported_languages": null}, "macro.dbt_utils.star": {"name": "star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\star.sql", "original_file_path": "macros\\sql\\star.sql", "unique_id": "macro.dbt_utils.star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix, quote_identifiers)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205806.0626202, "supported_languages": null}, "macro.dbt_utils.default__star": {"name": "default__star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\star.sql", "original_file_path": "macros\\sql\\star.sql", "unique_id": "macro.dbt_utils.default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {%- do dbt_utils._is_relation(from, 'star') -%}\r\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\r\n\r\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\r\n    {%- if not execute -%}\r\n        {% do return('*') %}\r\n    {%- endif -%}\r\n\r\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\r\n\r\n    {%- if cols|length <= 0 -%}\r\n        {% if flags.WHICH == 'compile' %}\r\n            {% set response %}\r\n*\r\n/* No columns were returned. Maybe the relation doesn't exist yet \r\nor all columns were excluded. This star is only output during  \r\ndbt compile, and exists to keep SQLFluff happy. */\r\n            {% endset %}\r\n            {% do return(response) %}\r\n        {% else %}\r\n            {% do return(\"/* no columns returned from star() macro */\") %}\r\n        {% endif %}\r\n    {%- else -%}\r\n        {%- for col in cols %}\r\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}\r\n                {%- if quote_identifiers -%}\r\n                    {{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {%- else -%}\r\n                    {{ col|trim }} {%- if prefix!='' or suffix!='' %} as {{ (prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {% endif %}\r\n            {%- if not loop.last %},{{ '\\n  ' }}{%- endif -%}\r\n        {%- endfor -%}\r\n    {% endif %}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205806.0851507, "supported_languages": null}, "macro.dbt_utils.surrogate_key": {"name": "surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\surrogate_key.sql", "original_file_path": "macros\\sql\\surrogate_key.sql", "unique_id": "macro.dbt_utils.surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205806.0891485, "supported_languages": null}, "macro.dbt_utils.default__surrogate_key": {"name": "default__surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\surrogate_key.sql", "original_file_path": "macros\\sql\\surrogate_key.sql", "unique_id": "macro.dbt_utils.default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- set error_message = '\nWarning: `dbt_utils.surrogate_key` has been replaced by \\\n`dbt_utils.generate_surrogate_key`. The new macro treats null values \\\ndifferently to empty strings. To restore the behaviour of the original \\\nmacro, add a global variable in dbt_project.yml called \\\n`surrogate_key_treat_nulls_as_empty_strings` to your \\\ndbt_project.yml file with a value of True. \\\nThe {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205806.0921648, "supported_languages": null}, "macro.dbt_utils.union_relations": {"name": "union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\union.sql", "original_file_path": "macros\\sql\\union.sql", "unique_id": "macro.dbt_utils.union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205806.123111, "supported_languages": null}, "macro.dbt_utils.default__union_relations": {"name": "default__union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\union.sql", "original_file_path": "macros\\sql\\union.sql", "unique_id": "macro.dbt_utils.default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n    {%- set all_excludes = [] -%}\n    {%- set all_includes = [] -%}\n\n    {%- if exclude -%}\n        {%- for exc in exclude -%}\n            {%- do all_excludes.append(exc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- if include -%}\n        {%- for inc in include -%}\n            {%- do all_includes.append(inc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column | lower in all_excludes -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column | lower not in all_includes -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n    {%- set dbt_command = flags.WHICH -%}\n\n\n    {% if dbt_command in ['run', 'build'] %}\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                {%- if source_column_name is not none %}\n                cast({{ dbt.string_literal(relation) }} as {{ dbt.type_string() }}) as {{ source_column_name }},\n                {%- endif %}\n\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.string_literal", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205806.1959739, "supported_languages": null}, "macro.dbt_utils.unpivot": {"name": "unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\unpivot.sql", "original_file_path": "macros\\sql\\unpivot.sql", "unique_id": "macro.dbt_utils.unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205806.2054198, "supported_languages": null}, "macro.dbt_utils.default__unpivot": {"name": "default__unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\unpivot.sql", "original_file_path": "macros\\sql\\unpivot.sql", "unique_id": "macro.dbt_utils.default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n\n    {% if not relation %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt.type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt.cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.type_string", "macro.dbt.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205806.228487, "supported_languages": null}, "macro.dbt_utils.width_bucket": {"name": "width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\width_bucket.sql", "original_file_path": "macros\\sql\\width_bucket.sql", "unique_id": "macro.dbt_utils.width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205806.2390087, "supported_languages": null}, "macro.dbt_utils.default__width_bucket": {"name": "default__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\width_bucket.sql", "original_file_path": "macros\\sql\\width_bucket.sql", "unique_id": "macro.dbt_utils.default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt.safe_cast(expr, dbt.type_numeric() ) }},\n                    {{ dbt.safe_cast(bin_size, dbt.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.safe_cast", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205806.248082, "supported_languages": null}, "macro.dbt_utils.snowflake__width_bucket": {"name": "snowflake__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\width_bucket.sql", "original_file_path": "macros\\sql\\width_bucket.sql", "unique_id": "macro.dbt_utils.snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205806.250082, "supported_languages": null}, "macro.dbt_utils.get_url_host": {"name": "get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\web\\get_url_host.sql", "original_file_path": "macros\\web\\get_url_host.sql", "unique_id": "macro.dbt_utils.get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205806.2576232, "supported_languages": null}, "macro.dbt_utils.default__get_url_host": {"name": "default__get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\web\\get_url_host.sql", "original_file_path": "macros\\web\\get_url_host.sql", "unique_id": "macro.dbt_utils.default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt.split_part(\n        dbt.split_part(\n            dbt.replace(\n                dbt.replace(\n                    dbt.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt.safe_cast(\n        parsed,\n        dbt.type_string()\n        )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part", "macro.dbt.replace", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205806.263419, "supported_languages": null}, "macro.dbt_utils.get_url_parameter": {"name": "get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\web\\get_url_parameter.sql", "original_file_path": "macros\\web\\get_url_parameter.sql", "unique_id": "macro.dbt_utils.get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205806.2654147, "supported_languages": null}, "macro.dbt_utils.default__get_url_parameter": {"name": "default__get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\web\\get_url_parameter.sql", "original_file_path": "macros\\web\\get_url_parameter.sql", "unique_id": "macro.dbt_utils.default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt.split_part(dbt.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205806.2674131, "supported_languages": null}, "macro.dbt_utils.get_url_path": {"name": "get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\web\\get_url_path.sql", "original_file_path": "macros\\web\\get_url_path.sql", "unique_id": "macro.dbt_utils.get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205806.2739425, "supported_languages": null}, "macro.dbt_utils.default__get_url_path": {"name": "default__get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\web\\get_url_path.sql", "original_file_path": "macros\\web\\get_url_path.sql", "unique_id": "macro.dbt_utils.default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url =\n        dbt.replace(\n            dbt.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{ dbt.position(\"'/'\", stripped_url) }}, 0),\n            {{ dbt.position(\"'?'\", stripped_url) }} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt.split_part(\n            dbt.right(\n                stripped_url,\n                dbt.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ),\n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt.safe_cast(\n        parsed_path,\n        dbt.type_string()\n    )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.position", "macro.dbt.split_part", "macro.dbt.right", "macro.dbt.length", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728205806.3160653, "supported_languages": null}, "macro.dbt_eda_tools.get_preview": {"name": "get_preview", "resource_type": "macro", "package_name": "dbt_eda_tools", "path": "macros\\get_preview.sql", "original_file_path": "macros\\get_preview.sql", "unique_id": "macro.dbt_eda_tools.get_preview", "macro_sql": "{% macro get_preview(nbr_rows=5) %}\r\n    {{ return(adapter.dispatch('get_preview', 'dbt_eda_tools')(nbr_rows)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_eda_tools.default__get_preview"]}, "description": "Returns the first few rows of a table", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_eda_tools://macros\\schema.yml", "arguments": [{"name": "num_rows", "type": "integer", "description": "The number of rows to return. Defaults to 5."}], "created_at": 1728209051.165862, "supported_languages": null}, "macro.dbt_eda_tools.default__get_preview": {"name": "default__get_preview", "resource_type": "macro", "package_name": "dbt_eda_tools", "path": "macros\\get_preview.sql", "original_file_path": "macros\\get_preview.sql", "unique_id": "macro.dbt_eda_tools.default__get_preview", "macro_sql": "{% macro default__get_preview(nbr_rows) %}\r\n\r\n    {% set sql_statement %}\r\n        SELECT * FROM {{ this }} LIMIT {{nbr_rows}}\r\n    {% endset %}\r\n\r\n    {% if var('dbt_eda_tools_log_enable','N') == 'Y'  %}\r\n        {% set head_rows = dbt_utils.get_query_results_as_dict(sql_statement) %}\r\n\r\n        {% set rows = head_rows.values() | list %}\r\n        {% set total_columns = rows | length %}\r\n        {% set total_length_field = 16 %}\r\n        {% set nbr_of_columns = 7 %}\r\n\r\n        {% set headers = [] %}\r\n        {% for item in head_rows.items() %}\r\n            {% set field_value = item[0] | string %}\r\n            {% set formatted_item = \"{}\".format(field_value if field_value|length <total_length_field else field_value[:total_length_field]+\"..\" ) %}\r\n            {%- if loop.index<=nbr_of_columns-2 and headers.insert(loop.index,formatted_item) %}{% endif -%}\r\n        {% endfor %}\r\n\r\n        {%- if total_columns>nbr_of_columns-2 and headers.insert(nbr_of_columns-2,'..') %}{% endif -%}\r\n\r\n        {% if head_rows.items()|list|length %}\r\n            {% set last_value = (head_rows.items()|list)[-1][0] | string %}\r\n            {% set formatted_item = \"{}\".format(last_value if last_value|length <total_length_field else last_value[:total_length_field]+\"..\" ) %}\r\n            {%- if headers.insert(nbr_of_columns,formatted_item) %}{% endif -%}\r\n        {% endif %}\r\n\r\n\r\n\r\n\r\n        {% set rows = rows[:nbr_of_columns-2]+rows[-1:] %}\r\n\r\n        {% set nbr_of_lines = rows[0] | length %}\r\n        {% set formatted_row_list = [] %}\r\n\r\n        {% for cntr in range(nbr_of_lines) %}\r\n            {% set formatted_rows = [] %}\r\n\r\n            {% for item in rows %}\r\n                {% set field_value = item[cntr] | string %}\r\n                {% set formatted_item = \"{}\".format(field_value if field_value|length <total_length_field else field_value[:total_length_field]+\"..\" ) %}\r\n                {%- if formatted_rows.insert(loop.index,formatted_item) %}{% endif -%}\r\n\r\n            {% endfor %}\r\n            {%- if total_columns> nbr_of_columns-2 and formatted_rows.insert(nbr_of_columns-2,'..') %}{% endif -%}\r\n\r\n            {%- if formatted_row_list.insert(cntr,formatted_rows|list) %}{% endif -%}\r\n        {% endfor %}\r\n\r\n        {% if headers | length %}\r\n            {{ log(\"\\033[1;32m \" + this.name+ \" preview:\\033[0m\", info=True) }}\r\n            {{ dbt_eda_tools.print_pretty_table(headers, formatted_row_list) }}\r\n        {% endif %}\r\n    {% endif%}\r\n\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_query_results_as_dict", "macro.dbt_eda_tools.print_pretty_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1728209049.4374883, "supported_languages": null}}, "docs": {"doc.dbt.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "dbt", "path": "overview.md", "original_file_path": "docs\\overview.md", "unique_id": "doc.dbt.__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "groups": {}, "selectors": {}, "disabled": {"test.dbt_eda_tools.assert_percent_of_total_sum_to_1": [{"database": "dbt_db", "schema": "dbt_schema_dbt_test__audit", "name": "assert_percent_of_total_sum_to_1", "resource_type": "test", "package_name": "dbt_eda_tools", "path": "percent_of_total\\assert_percent_of_total_sum_to_1.sql", "original_file_path": "tests\\percent_of_total\\assert_percent_of_total_sum_to_1.sql", "unique_id": "test.dbt_eda_tools.assert_percent_of_total_sum_to_1", "fqn": ["dbt_eda_tools", "percent_of_total", "assert_percent_of_total_sum_to_1"], "alias": "assert_percent_of_total_sum_to_1", "checksum": {"name": "sha256", "checksum": "7886736fc3effea2212804760bc5f0afb5a442b1a9edf2d23f861e95acc1a5a7"}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"enabled": false}, "created_at": 1728205811.7843359, "relation_name": null, "raw_code": "{{\r\n    config(\r\n        enabled =  env_var('DBT_EDA_TOOLS_DEVELOPER',0)| int == 1\r\n    )\r\n}}\r\n\r\nWITH\r\npercent_of_total AS (\r\n    SELECT\r\n    country\r\n    -- precision needs to be atleast 4 for the sum to be 100%\r\n    , {{dbt_eda_tools.percent_of_total('str_length','sum',4)}} AS sum_percent\r\n    , {{dbt_eda_tools.percent_of_total('company_name', 'count', 4)}} AS count_percent\r\n    , {{dbt_eda_tools.percent_of_total('company_name','countdistinct',4)}} AS count_distinct_percent\r\n    , {{dbt_eda_tools.percent_of_total('company_name','incorrectagg')}} AS incorrect_returns_null\r\n\r\nFROM {{ ref('data_aggregated') }}\r\nGROUP BY 1\r\n)\r\n, sum_percent_of_total AS (\r\n    SELECT\r\n        sum(sum_percent) AS sum_percent\r\n        , sum(count_percent) AS count_percent\r\n        , sum(count_distinct_percent) AS count_distinct_percent\r\n        , sum(incorrect_returns_null) AS incorrect_returns_null\r\n    FROM percent_of_total\r\n)\r\nSELECT * FROM sum_percent_of_total\r\nWHERE\r\n    sum_percent<>1\r\n    OR count_percent<>1\r\n    OR count_distinct_percent<>1\r\n    OR incorrect_returns_null IS NOT NULL", "language": "sql", "refs": [{"name": "data_aggregated", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_eda_tools.percent_of_total"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}}]}, "parent_map": {"model.dbt_eda_tools.describe_ex2": ["model.dbt_eda_tools.data_aggregated"], "model.dbt_eda_tools.percent_of_total_ex1": ["model.dbt_eda_tools.data_aggregated"], "model.dbt_eda_tools.percent_of_total_ex2": ["model.dbt_eda_tools.data_aggregated"], "model.dbt_eda_tools.data_aggregated": ["model.dbt_eda_tools.data_generator"], "model.dbt_eda_tools.data_aggregated_yearly_granularity": ["model.dbt_eda_tools.data_aggregated_mixed_granularity"], "model.dbt_eda_tools.describe_ex3": ["model.dbt_eda_tools.data_aggregated_mixed_granularity"], "model.dbt_eda_tools.data_aggregated_mixed_granularity": ["model.dbt_eda_tools.data_generator"], "model.dbt_eda_tools.describe_ex1": ["model.dbt_eda_tools.data_generator_enriched_describe"], "model.dbt_eda_tools.describe_ex4": ["model.dbt_eda_tools.data_generator_enriched_describe"], "model.dbt_eda_tools.describe_ex5": ["model.dbt_eda_tools.data_generator_enriched_describe"], "model.dbt_eda_tools.data_generator_enriched_describe": ["model.dbt_eda_tools.data_generator"], "model.dbt_eda_tools.get_missing_dates_ex1": ["model.dbt_eda_tools.missing_day"], "model.dbt_eda_tools.get_missing_dates_ex3": ["model.dbt_eda_tools.missing_day"], "model.dbt_eda_tools.get_missing_dates_ex4": ["model.dbt_eda_tools.missing_day"], "model.dbt_eda_tools.missing_day": ["model.dbt_eda_tools.data_generator"], "model.dbt_eda_tools.get_missing_dates_ex2": ["model.dbt_eda_tools.missing_month"], "model.dbt_eda_tools.missing_month": ["model.dbt_eda_tools.data_generator"], "model.dbt_eda_tools.missing_year": ["model.dbt_eda_tools.data_generator"], "model.dbt_eda_tools.data_generator": [], "test.dbt_eda_tools.assert_percent_of_total_level": ["model.dbt_eda_tools.data_aggregated"], "test.dbt_eda_tools.assert_percent_of_total_rounding": ["model.dbt_eda_tools.data_aggregated"], "test.dbt_eda_tools.assert_data_describe_column_details_estimated_granularity_yearly": ["model.dbt_eda_tools.data_aggregated_yearly_granularity"], "test.dbt_eda_tools.assert_data_describe_column_details_estimated_granularity": ["model.dbt_eda_tools.data_aggregated_mixed_granularity"], "test.dbt_eda_tools.assert_data_describe_all": ["model.dbt_eda_tools.data_generator_enriched_describe"], "test.dbt_eda_tools.assert_data_describe_column_details": ["model.dbt_eda_tools.data_generator_enriched_describe"], "test.dbt_eda_tools.assert_data_describe_include": ["model.dbt_eda_tools.data_generator_enriched_describe"], "test.dbt_eda_tools.assert_data_describe_structure": ["model.dbt_eda_tools.data_generator_enriched_describe"], "test.dbt_eda_tools.assert_missing_day": ["model.dbt_eda_tools.missing_day"], "test.dbt_eda_tools.assert_missing_day_by_company": ["model.dbt_eda_tools.missing_day"], "test.dbt_eda_tools.assert_missing_day_by_country": ["model.dbt_eda_tools.missing_day"], "test.dbt_eda_tools.assert_missing_day_by_country_company": ["model.dbt_eda_tools.missing_day"], "test.dbt_eda_tools.assert_missing_day_by_country_company_filtered_both": ["model.dbt_eda_tools.missing_day"], "test.dbt_eda_tools.assert_missing_day_by_country_company_filtered_country": ["model.dbt_eda_tools.missing_day"], "test.dbt_eda_tools.assert_missing_day_by_country_company_numeric_filter": ["model.dbt_eda_tools.missing_day"], "test.dbt_eda_tools.assert_missing_month": ["model.dbt_eda_tools.missing_month"], "test.dbt_eda_tools.assert_missing_month_by_days": ["model.dbt_eda_tools.missing_month"], "test.dbt_eda_tools.assert_missing_year": ["model.dbt_eda_tools.missing_year"], "test.dbt_eda_tools.assert_missing_year_by_month": ["model.dbt_eda_tools.missing_year"]}, "child_map": {"model.dbt_eda_tools.describe_ex2": [], "model.dbt_eda_tools.percent_of_total_ex1": [], "model.dbt_eda_tools.percent_of_total_ex2": [], "model.dbt_eda_tools.data_aggregated": ["model.dbt_eda_tools.describe_ex2", "model.dbt_eda_tools.percent_of_total_ex1", "model.dbt_eda_tools.percent_of_total_ex2", "test.dbt_eda_tools.assert_percent_of_total_level", "test.dbt_eda_tools.assert_percent_of_total_rounding"], "model.dbt_eda_tools.data_aggregated_yearly_granularity": ["test.dbt_eda_tools.assert_data_describe_column_details_estimated_granularity_yearly"], "model.dbt_eda_tools.describe_ex3": [], "model.dbt_eda_tools.data_aggregated_mixed_granularity": ["model.dbt_eda_tools.data_aggregated_yearly_granularity", "model.dbt_eda_tools.describe_ex3", "test.dbt_eda_tools.assert_data_describe_column_details_estimated_granularity"], "model.dbt_eda_tools.describe_ex1": [], "model.dbt_eda_tools.describe_ex4": [], "model.dbt_eda_tools.describe_ex5": [], "model.dbt_eda_tools.data_generator_enriched_describe": ["model.dbt_eda_tools.describe_ex1", "model.dbt_eda_tools.describe_ex4", "model.dbt_eda_tools.describe_ex5", "test.dbt_eda_tools.assert_data_describe_all", "test.dbt_eda_tools.assert_data_describe_column_details", "test.dbt_eda_tools.assert_data_describe_include", "test.dbt_eda_tools.assert_data_describe_structure"], "model.dbt_eda_tools.get_missing_dates_ex1": [], "model.dbt_eda_tools.get_missing_dates_ex3": [], "model.dbt_eda_tools.get_missing_dates_ex4": [], "model.dbt_eda_tools.missing_day": ["model.dbt_eda_tools.get_missing_dates_ex1", "model.dbt_eda_tools.get_missing_dates_ex3", "model.dbt_eda_tools.get_missing_dates_ex4", "test.dbt_eda_tools.assert_missing_day", "test.dbt_eda_tools.assert_missing_day_by_company", "test.dbt_eda_tools.assert_missing_day_by_country", "test.dbt_eda_tools.assert_missing_day_by_country_company", "test.dbt_eda_tools.assert_missing_day_by_country_company_filtered_both", "test.dbt_eda_tools.assert_missing_day_by_country_company_filtered_country", "test.dbt_eda_tools.assert_missing_day_by_country_company_numeric_filter"], "model.dbt_eda_tools.get_missing_dates_ex2": [], "model.dbt_eda_tools.missing_month": ["model.dbt_eda_tools.get_missing_dates_ex2", "test.dbt_eda_tools.assert_missing_month", "test.dbt_eda_tools.assert_missing_month_by_days"], "model.dbt_eda_tools.missing_year": ["test.dbt_eda_tools.assert_missing_year", "test.dbt_eda_tools.assert_missing_year_by_month"], "model.dbt_eda_tools.data_generator": ["model.dbt_eda_tools.data_aggregated", "model.dbt_eda_tools.data_aggregated_mixed_granularity", "model.dbt_eda_tools.data_generator_enriched_describe", "model.dbt_eda_tools.missing_day", "model.dbt_eda_tools.missing_month", "model.dbt_eda_tools.missing_year"], "test.dbt_eda_tools.assert_percent_of_total_level": [], "test.dbt_eda_tools.assert_percent_of_total_rounding": [], "test.dbt_eda_tools.assert_data_describe_column_details_estimated_granularity_yearly": [], "test.dbt_eda_tools.assert_data_describe_column_details_estimated_granularity": [], "test.dbt_eda_tools.assert_data_describe_all": [], "test.dbt_eda_tools.assert_data_describe_column_details": [], "test.dbt_eda_tools.assert_data_describe_include": [], "test.dbt_eda_tools.assert_data_describe_structure": [], "test.dbt_eda_tools.assert_missing_day": [], "test.dbt_eda_tools.assert_missing_day_by_company": [], "test.dbt_eda_tools.assert_missing_day_by_country": [], "test.dbt_eda_tools.assert_missing_day_by_country_company": [], "test.dbt_eda_tools.assert_missing_day_by_country_company_filtered_both": [], "test.dbt_eda_tools.assert_missing_day_by_country_company_filtered_country": [], "test.dbt_eda_tools.assert_missing_day_by_country_company_numeric_filter": [], "test.dbt_eda_tools.assert_missing_month": [], "test.dbt_eda_tools.assert_missing_month_by_days": [], "test.dbt_eda_tools.assert_missing_year": [], "test.dbt_eda_tools.assert_missing_year_by_month": []}, "group_map": {}, "saved_queries": {}, "semantic_models": {}, "unit_tests": {}}