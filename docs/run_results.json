{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.8.4", "generated_at": "2024-07-24T12:33:04.138717Z", "invocation_id": "cbeb41a9-92a2-41c9-97f8-84afb75c892c", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-24T12:33:02.676361Z", "completed_at": "2024-07-24T12:33:03.800128Z"}, {"name": "execute", "started_at": "2024-07-24T12:33:03.802131Z", "completed_at": "2024-07-24T12:33:03.802131Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.2253289222717285, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_utils_medley.data_generator", "compiled": true, "compiled_code": "WITH date_gen AS (\n    \n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n     + \n    \n    p7.generated_number * power(2, 7)\n     + \n    \n    p8.generated_number * power(2, 8)\n     + \n    \n    p9.generated_number * power(2, 9)\n     + \n    \n    p10.generated_number * power(2, 10)\n     + \n    \n    p11.generated_number * power(2, 11)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n     cross join \n    \n    p as p11\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 2192\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        cast('2019-01-01' as date)\n        )\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= cast('2025-01-01' as date)\n\n)\n\nselect * from filtered\n\n\n),\ncompany_gen AS (\n     SELECT 'MSFT' AS company_name\n     UNION ALL\n     SELECT 'GOG' AS company_name\n     UNION ALL\n     SELECT 'AMZN' AS company_name\n     UNION ALL\n     SELECT 'A' AS company_name\n     UNION ALL\n     SELECT 'FB' AS company_name\n),\ncountry_gen AS (\n    SELECT 'FR' AS country\n    UNION ALL\n    SELECT 'DE' AS country\n    UNION ALL\n    SELECT 'GB' AS country\n    UNION ALL\n    SELECT 'US' AS country\n    UNION all\n    SELECT 'CA' AS country\n)\n\nSELECT *, LENGTH(company_name)+LENGTH(country) AS str_length\nFROM date_gen, company_gen, country_gen", "relation_name": "dbt_db.dbt_schema.data_generator"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-24T12:33:03.914611Z", "completed_at": "2024-07-24T12:33:03.947571Z"}, {"name": "execute", "started_at": "2024-07-24T12:33:03.948577Z", "completed_at": "2024-07-24T12:33:03.948577Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.042339324951171875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_utils_medley.missing_month", "compiled": true, "compiled_code": "\nWITH  raw_data AS (\n    SELECT\n        DISTINCT\n        company_name\n        , country\n        , CAST(date_trunc('month', date_day) AS Date) AS date_month\n    FROM dbt_db.dbt_schema.data_generator\n),\nmissing_month AS (\n    SELECT * FROM raw_data\n    WHERE NOT (\n        \n        (company_name = 'FB' AND country = 'CA' AND date_month BETWEEN DATE('2019-05-01') AND DATE('2019-07-05')) OR\n        (company_name = 'GOOG' AND country = 'FR' AND date_month BETWEEN DATE('2020-01-01') AND DATE('2020-05-01')) OR\n        (company_name = 'AAPL' AND country = 'US' AND date_month BETWEEN DATE('2021-05-15') AND DATE('2021-12-26')) OR\n        \n        (date_month  BETWEEN DATE('2022-05-01') AND DATE('2022-08-05')) OR\n        \n        (country = 'DE' AND date_month BETWEEN DATE('2019-09-07') AND DATE('2019-11-09')) OR\n        \n        (company_name = 'AMZN' AND date_month BETWEEN DATE('2019-01-07') AND DATE('2019-09-09'))\n    )\n)\nSELECT * FROM missing_month", "relation_name": "dbt_db.dbt_schema.missing_month"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-24T12:33:03.912610Z", "completed_at": "2024-07-24T12:33:03.951574Z"}, {"name": "execute", "started_at": "2024-07-24T12:33:03.953571Z", "completed_at": "2024-07-24T12:33:03.953571Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.04893374443054199, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_utils_medley.missing_day", "compiled": true, "compiled_code": "\nWITH\nmissing_day AS (\n    SELECT *\n    FROM dbt_db.dbt_schema.data_generator\n    WHERE NOT (\n        \n        (company_name = 'FB' AND country = 'CA' AND date_day BETWEEN DATE('2019-05-01') AND DATE('2019-05-17')) OR\n        (company_name = 'GOOG' AND country = 'FR' AND date_day BETWEEN DATE('2020-01-01') AND DATE('2020-05-01')) OR\n        (company_name = 'AAPL' AND country = 'US' AND date_day BETWEEN DATE('2021-12-15') AND DATE('2021-12-26')) OR\n        \n        (date_day  BETWEEN DATE('2022-05-01') AND DATE('2022-05-05')) OR\n        \n        (country = 'DE' AND date_day BETWEEN DATE('2019-09-07') AND DATE('2019-09-09')) OR\n        \n        (company_name = 'AMZN' AND date_day BETWEEN DATE('2019-09-07') AND DATE('2019-09-09'))\n    )\n)\nSELECT * FROM missing_day", "relation_name": "dbt_db.dbt_schema.missing_day"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-24T12:33:03.932652Z", "completed_at": "2024-07-24T12:33:03.952573Z"}, {"name": "execute", "started_at": "2024-07-24T12:33:03.954940Z", "completed_at": "2024-07-24T12:33:03.954940Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.04834485054016113, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_utils_medley.missing_year", "compiled": true, "compiled_code": "\nWITH\nraw_data AS (\n    SELECT\n        DISTINCT\n        company_name\n        , country\n        , CAST(date_trunc('year', date_day) AS Date) AS date_year\n    FROM dbt_db.dbt_schema.data_generator\n)\n, missing_year AS (\n    SELECT * FROM raw_data\n    WHERE NOT (\n        \n        (company_name = 'FB' AND country = 'CA' AND date_year BETWEEN DATE('2019-05-01') AND DATE('2020-07-05')) OR\n        (company_name = 'GOOG' AND country = 'FR' AND date_year BETWEEN DATE('2020-01-01') AND DATE('2021-05-01')) OR\n        \n        (date_year  BETWEEN DATE('2021-05-01') AND DATE('2022-08-05')) OR\n        \n        (country = 'DE' AND date_year BETWEEN DATE('2019-09-07') AND DATE('2020-11-09')) OR\n        \n        (company_name = 'AMZN' AND date_year BETWEEN DATE('2020-01-07') AND DATE('2021-09-09')) OR\n        (date_year BETWEEN DATE('2021-05-07') AND DATE('2022-09-09'))\n    )\n)\nSELECT * FROM missing_year", "relation_name": "dbt_db.dbt_schema.missing_year"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-24T12:33:03.973862Z", "completed_at": "2024-07-24T12:33:04.027243Z"}, {"name": "execute", "started_at": "2024-07-24T12:33:04.063853Z", "completed_at": "2024-07-24T12:33:04.063853Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 0.10491204261779785, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_utils_medley.fetch_missing_date", "compiled": true, "compiled_code": "\n\n\nWITH\nunique_dates AS (\n  SELECT\n    DISTINCT\n        date_month\n        \n            , (country) AS country\n        \n            , (company_name) AS company_name\n        \n  FROM dbt_db.dbt_schema.missing_month\n  \n    \n        \n          WHERE 1=1\n        \n\n        \n        \n          \n            AND  country = 'DE'\n          \n\n        \n    \n  \n)\n, dates_lagged AS (\n  SELECT *\n  , LAG(date_month,1) OVER (\n        ORDER BY\n        \n            (country) DESC,\n        \n            (company_name) DESC,\n        \n        date_month DESC) AS next_date_month\n  FROM unique_dates\n)\nSELECT\n    date_month\n    \n        , (country) AS country\n    \n        , (company_name) AS company_name\n    \n    , next_date_month\n    , ABS(datediff(\n        MONTH,\n        next_date_month,\n        date_month\n        )) AS missing_month\nFROM dates_lagged\nWHERE datediff(\n        MONTH,\n        next_date_month,\n        date_month\n        ) < -1\n", "relation_name": "dbt_db.dbt_schema.fetch_missing_date"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-24T12:33:03.992860Z", "completed_at": "2024-07-24T12:33:04.028241Z"}, {"name": "execute", "started_at": "2024-07-24T12:33:04.065850Z", "completed_at": "2024-07-24T12:33:04.065850Z"}], "thread_id": "Thread-8 (worker)", "execution_time": 0.10591244697570801, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_utils_medley.assert_missing_month", "compiled": true, "compiled_code": "WITH\nmissing_values AS (\n    \nWITH\nunique_dates AS (\n  SELECT\n    DISTINCT\n        date_month\n        \n  FROM dbt_db.dbt_schema.missing_month\n  \n)\n, dates_lagged AS (\n  SELECT *\n  , LAG(date_month,1) OVER (\n        ORDER BY\n        \n        date_month DESC) AS next_date_month\n  FROM unique_dates\n)\nSELECT\n    date_month\n    \n    , next_date_month\n    , ABS(datediff(\n        MONTH,\n        next_date_month,\n        date_month\n        )) AS missing_month\nFROM dates_lagged\nWHERE datediff(\n        MONTH,\n        next_date_month,\n        date_month\n        ) < -1\n\n)\n, row_count_missing_values AS (\n    SELECT COUNT(missing_month) AS row_count\n    FROM missing_values\n)\nSELECT * FROM row_count_missing_values WHERE row_count <> 1", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-24T12:33:04.002239Z", "completed_at": "2024-07-24T12:33:04.052330Z"}, {"name": "execute", "started_at": "2024-07-24T12:33:04.080649Z", "completed_at": "2024-07-24T12:33:04.080649Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.11767959594726562, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_utils_medley.assert_missing_month_by_days", "compiled": true, "compiled_code": "WITH\nmissing_values AS (\n    \nWITH\nunique_dates AS (\n  SELECT\n    DISTINCT\n        date_month\n        \n  FROM dbt_db.dbt_schema.missing_month\n  \n)\n, dates_lagged AS (\n  SELECT *\n  , LAG(date_month,1) OVER (\n        ORDER BY\n        \n        date_month DESC) AS next_date_month\n  FROM unique_dates\n)\nSELECT\n    date_month\n    \n    , next_date_month\n    , ABS(datediff(\n        DAY,\n        next_date_month,\n        date_month\n        )) AS missing_day\nFROM dates_lagged\nWHERE datediff(\n        DAY,\n        next_date_month,\n        date_month\n        ) < -1\n\n)\n, row_count_missing_values AS (\n    SELECT COUNT(missing_day) AS row_count\n    FROM missing_values\n)\nSELECT * FROM row_count_missing_values WHERE row_count <> 67", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-24T12:33:04.011241Z", "completed_at": "2024-07-24T12:33:04.066852Z"}, {"name": "execute", "started_at": "2024-07-24T12:33:04.091665Z", "completed_at": "2024-07-24T12:33:04.091665Z"}], "thread_id": "Thread-10 (worker)", "execution_time": 0.1248166561126709, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_utils_medley.assert_missing_day", "compiled": true, "compiled_code": "WITH\nmissing_values AS (\n    \nWITH\nunique_dates AS (\n  SELECT\n    DISTINCT\n        date_day\n        \n  FROM dbt_db.dbt_schema.missing_day\n  \n)\n, dates_lagged AS (\n  SELECT *\n  , LAG(date_day,1) OVER (\n        ORDER BY\n        \n        date_day DESC) AS next_date_day\n  FROM unique_dates\n)\nSELECT\n    date_day\n    \n    , next_date_day\n    , ABS(datediff(\n        DAY,\n        next_date_day,\n        date_day\n        )) AS missing_day\nFROM dates_lagged\nWHERE datediff(\n        DAY,\n        next_date_day,\n        date_day\n        ) < -1\n\n)\n, row_count_missing_values AS (\n    SELECT COUNT(missing_day) AS row_count\n    FROM missing_values\n)\nSELECT * FROM row_count_missing_values WHERE row_count <> 1", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-24T12:33:04.019241Z", "completed_at": "2024-07-24T12:33:04.078893Z"}, {"name": "execute", "started_at": "2024-07-24T12:33:04.094668Z", "completed_at": "2024-07-24T12:33:04.094668Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.12680673599243164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_utils_medley.assert_missing_day_by_company", "compiled": true, "compiled_code": "WITH\nmissing_values AS (\n    \nWITH\nunique_dates AS (\n  SELECT\n    DISTINCT\n        date_day\n        \n            , (company_name) AS company_name\n        \n  FROM dbt_db.dbt_schema.missing_day\n  \n)\n, dates_lagged AS (\n  SELECT *\n  , LAG(date_day,1) OVER (\n        ORDER BY\n        \n            (company_name) DESC,\n        \n        date_day DESC) AS next_date_day\n  FROM unique_dates\n)\nSELECT\n    date_day\n    \n        , (company_name) AS company_name\n    \n    , next_date_day\n    , ABS(datediff(\n        DAY,\n        next_date_day,\n        date_day\n        )) AS missing_day\nFROM dates_lagged\nWHERE datediff(\n        DAY,\n        next_date_day,\n        date_day\n        ) < -1\n\n)\n, row_count_missing_values AS (\n    SELECT COUNT(missing_day) AS row_count\n    FROM missing_values\n)\nSELECT * FROM row_count_missing_values WHERE row_count <> 6", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-24T12:33:04.031246Z", "completed_at": "2024-07-24T12:33:04.082667Z"}, {"name": "execute", "started_at": "2024-07-24T12:33:04.097783Z", "completed_at": "2024-07-24T12:33:04.097783Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.12592005729675293, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_utils_medley.assert_missing_day_by_country", "compiled": true, "compiled_code": "WITH\nmissing_values AS (\n    \nWITH\nunique_dates AS (\n  SELECT\n    DISTINCT\n        date_day\n        \n            , (country) AS country\n        \n  FROM dbt_db.dbt_schema.missing_day\n  \n)\n, dates_lagged AS (\n  SELECT *\n  , LAG(date_day,1) OVER (\n        ORDER BY\n        \n            (country) DESC,\n        \n        date_day DESC) AS next_date_day\n  FROM unique_dates\n)\nSELECT\n    date_day\n    \n        , (country) AS country\n    \n    , next_date_day\n    , ABS(datediff(\n        DAY,\n        next_date_day,\n        date_day\n        )) AS missing_day\nFROM dates_lagged\nWHERE datediff(\n        DAY,\n        next_date_day,\n        date_day\n        ) < -1\n\n)\n, row_count_missing_values AS (\n    SELECT COUNT(missing_day) AS row_count\n    FROM missing_values\n)\nSELECT * FROM row_count_missing_values WHERE row_count <> 6", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-24T12:33:04.039328Z", "completed_at": "2024-07-24T12:33:04.086674Z"}, {"name": "execute", "started_at": "2024-07-24T12:33:04.101309Z", "completed_at": "2024-07-24T12:33:04.101309Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.10944724082946777, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_utils_medley.assert_missing_day_by_country_company", "compiled": true, "compiled_code": "WITH\nmissing_values AS (\n    \nWITH\nunique_dates AS (\n  SELECT\n    DISTINCT\n        date_day\n        \n            , (country) AS country\n        \n            , (company_name) AS company_name\n        \n  FROM dbt_db.dbt_schema.missing_day\n  \n)\n, dates_lagged AS (\n  SELECT *\n  , LAG(date_day,1) OVER (\n        ORDER BY\n        \n            (country) DESC,\n        \n            (company_name) DESC,\n        \n        date_day DESC) AS next_date_day\n  FROM unique_dates\n)\nSELECT\n    date_day\n    \n        , (country) AS country\n    \n        , (company_name) AS company_name\n    \n    , next_date_day\n    , ABS(datediff(\n        DAY,\n        next_date_day,\n        date_day\n        )) AS missing_day\nFROM dates_lagged\nWHERE datediff(\n        DAY,\n        next_date_day,\n        date_day\n        ) < -1\n\n)\n, row_count_missing_values AS (\n    SELECT COUNT(missing_day) AS row_count\n    FROM missing_values\n)\nSELECT * FROM row_count_missing_values WHERE row_count <> 35", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-24T12:33:04.046295Z", "completed_at": "2024-07-24T12:33:04.089674Z"}, {"name": "execute", "started_at": "2024-07-24T12:33:04.102327Z", "completed_at": "2024-07-24T12:33:04.102327Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.10543131828308105, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_utils_medley.assert_missing_day_by_country_company_filtered_both", "compiled": true, "compiled_code": "WITH\nmissing_values AS (\n    \nWITH\nunique_dates AS (\n  SELECT\n    DISTINCT\n        date_day\n        \n            , (country) AS country\n        \n            , (company_name) AS company_name\n        \n  FROM dbt_db.dbt_schema.missing_day\n  \n    \n        \n          WHERE 1=1\n        \n\n        \n        \n          \n            AND  country = 'DE'\n          \n\n        \n    \n        \n\n        \n        \n          \n            AND  company_name = 'A'\n          \n\n        \n    \n  \n)\n, dates_lagged AS (\n  SELECT *\n  , LAG(date_day,1) OVER (\n        ORDER BY\n        \n            (country) DESC,\n        \n            (company_name) DESC,\n        \n        date_day DESC) AS next_date_day\n  FROM unique_dates\n)\nSELECT\n    date_day\n    \n        , (country) AS country\n    \n        , (company_name) AS company_name\n    \n    , next_date_day\n    , ABS(datediff(\n        DAY,\n        next_date_day,\n        date_day\n        )) AS missing_day\nFROM dates_lagged\nWHERE datediff(\n        DAY,\n        next_date_day,\n        date_day\n        ) < -1\n\n)\n, row_count_missing_values AS (\n    SELECT COUNT(missing_day) AS row_count\n    FROM missing_values\n)\nSELECT * FROM row_count_missing_values WHERE row_count <> 2", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-24T12:33:04.055849Z", "completed_at": "2024-07-24T12:33:04.093672Z"}, {"name": "execute", "started_at": "2024-07-24T12:33:04.105331Z", "completed_at": "2024-07-24T12:33:04.105331Z"}], "thread_id": "Thread-9 (worker)", "execution_time": 0.10710358619689941, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_utils_medley.assert_missing_day_by_country_company_filtered_country", "compiled": true, "compiled_code": "WITH\nmissing_values AS (\n    \nWITH\nunique_dates AS (\n  SELECT\n    DISTINCT\n        date_day\n        \n            , (country) AS country\n        \n            , (company_name) AS company_name\n        \n  FROM dbt_db.dbt_schema.missing_day\n  \n    \n        \n          WHERE 1=1\n        \n\n        \n        \n          \n            AND  country = 'DE'\n          \n\n        \n    \n  \n)\n, dates_lagged AS (\n  SELECT *\n  , LAG(date_day,1) OVER (\n        ORDER BY\n        \n            (country) DESC,\n        \n            (company_name) DESC,\n        \n        date_day DESC) AS next_date_day\n  FROM unique_dates\n)\nSELECT\n    date_day\n    \n        , (country) AS country\n    \n        , (company_name) AS company_name\n    \n    , next_date_day\n    , ABS(datediff(\n        DAY,\n        next_date_day,\n        date_day\n        )) AS missing_day\nFROM dates_lagged\nWHERE datediff(\n        DAY,\n        next_date_day,\n        date_day\n        ) < -1\n\n)\n, row_count_missing_values AS (\n    SELECT COUNT(missing_day) AS row_count\n    FROM missing_values\n)\nSELECT * FROM row_count_missing_values WHERE row_count <> 10", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-24T12:33:04.068854Z", "completed_at": "2024-07-24T12:33:04.104367Z"}, {"name": "execute", "started_at": "2024-07-24T12:33:04.109714Z", "completed_at": "2024-07-24T12:33:04.109714Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.10843372344970703, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_utils_medley.assert_missing_year", "compiled": true, "compiled_code": "WITH\nmissing_values AS (\n    \nWITH\nunique_dates AS (\n  SELECT\n    DISTINCT\n        date_year\n        \n  FROM dbt_db.dbt_schema.missing_year\n  \n)\n, dates_lagged AS (\n  SELECT *\n  , LAG(date_year,1) OVER (\n        ORDER BY\n        \n        date_year DESC) AS next_date_year\n  FROM unique_dates\n)\nSELECT\n    date_year\n    \n    , next_date_year\n    , ABS(datediff(\n        YEAR,\n        next_date_year,\n        date_year\n        )) AS missing_year\nFROM dates_lagged\nWHERE datediff(\n        YEAR,\n        next_date_year,\n        date_year\n        ) < -1\n\n)\n, row_count_missing_values AS (\n    SELECT COUNT(missing_year) AS row_count\n    FROM missing_values\n)\nSELECT * FROM row_count_missing_values WHERE row_count <> 1", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-24T12:33:04.111720Z", "completed_at": "2024-07-24T12:33:04.120722Z"}, {"name": "execute", "started_at": "2024-07-24T12:33:04.121716Z", "completed_at": "2024-07-24T12:33:04.121716Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 0.022916793823242188, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_utils_medley.assert_missing_year_by_month", "compiled": true, "compiled_code": "WITH\nmissing_values AS (\n    \nWITH\nunique_dates AS (\n  SELECT\n    DISTINCT\n        date_year\n        \n  FROM dbt_db.dbt_schema.missing_year\n  \n)\n, dates_lagged AS (\n  SELECT *\n  , LAG(date_year,1) OVER (\n        ORDER BY\n        \n        date_year DESC) AS next_date_year\n  FROM unique_dates\n)\nSELECT\n    date_year\n    \n    , next_date_year\n    , ABS(datediff(\n        MONTH,\n        next_date_year,\n        date_year\n        )) AS missing_month\nFROM dates_lagged\nWHERE datediff(\n        MONTH,\n        next_date_year,\n        date_year\n        ) < -1\n\n)\n, row_count_missing_values AS (\n    SELECT COUNT(missing_month) AS row_count\n    FROM missing_values\n)\nSELECT * FROM row_count_missing_values WHERE row_count <> 4", "relation_name": null}], "elapsed_time": 3.1837852001190186, "args": {"enable_legacy_logger": false, "use_colors_file": true, "cache_selected_only": false, "favor_state": false, "log_level_file": "debug", "log_level": "info", "require_resource_names_without_spaces": false, "log_path": "C:\\Users\\shank\\Google Drive\\Jupyter Data\\Consulting\\External\\Kering\\Sourcev1\\Coding\\dbt_package_dev\\dbt_utils_medley\\logs", "macro_debugging": false, "printer_width": 80, "profiles_dir": "C:\\Users\\shank\\.dbt", "select": [], "quiet": false, "source_freshness_run_project_hooks": false, "empty_catalog": false, "version_check": true, "which": "generate", "exclude": [], "indirect_selection": "eager", "compile": true, "introspect": true, "static": false, "project_dir": "C:\\Users\\shank\\Google Drive\\Jupyter Data\\Consulting\\External\\Kering\\Sourcev1\\Coding\\dbt_package_dev\\dbt_utils_medley", "static_parser": true, "send_anonymous_usage_stats": true, "write_json": true, "invocation_command": "dbt docs generate", "vars": {}, "log_format": "default", "partial_parse_file_diff": true, "partial_parse": true, "log_file_max_bytes": 10485760, "show_resource_report": false, "strict_mode": false, "require_explicit_package_overrides_for_builtin_materializations": true, "populate_cache": true, "use_colors": true, "warn_error_options": {"include": [], "exclude": []}, "defer": false, "log_format_file": "debug", "print": true}}