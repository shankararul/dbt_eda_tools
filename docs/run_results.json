{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.8.4", "generated_at": "2024-07-29T14:03:40.017977Z", "invocation_id": "6e631698-86ea-4ef6-9fe3-b667bc58730d", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-29T14:03:39.053716Z", "completed_at": "2024-07-29T14:03:39.730961Z"}, {"name": "execute", "started_at": "2024-07-29T14:03:39.730961Z", "completed_at": "2024-07-29T14:03:39.730961Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.7682416439056396, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_eda_tools.data_generator", "compiled": true, "compiled_code": "WITH date_gen AS (\n    \n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n     + \n    \n    p7.generated_number * power(2, 7)\n     + \n    \n    p8.generated_number * power(2, 8)\n     + \n    \n    p9.generated_number * power(2, 9)\n     + \n    \n    p10.generated_number * power(2, 10)\n     + \n    \n    p11.generated_number * power(2, 11)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n     cross join \n    \n    p as p11\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 2192\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        cast('2019-01-01' as date)\n        )\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= cast('2025-01-01' as date)\n\n)\n\nselect * from filtered\n\n\n),\ncompany_gen AS (\n     SELECT 'MSFT' AS company_name\n     UNION ALL\n     SELECT 'GOG' AS company_name\n     UNION ALL\n     SELECT 'AMZN' AS company_name\n     UNION ALL\n     SELECT 'A' AS company_name\n     UNION ALL\n     SELECT 'FB' AS company_name\n),\ncountry_gen AS (\n    SELECT 'FR' AS country\n    UNION ALL\n    SELECT 'DE' AS country\n    UNION ALL\n    SELECT 'GB' AS country\n    UNION ALL\n    SELECT 'US' AS country\n    UNION all\n    SELECT 'CA' AS country\n)\n\nSELECT *, LENGTH(company_name)+LENGTH(country) AS str_length\nFROM date_gen, company_gen, country_gen", "relation_name": "dbt_db.dbt_schema.data_generator"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-29T14:03:39.841921Z", "completed_at": "2024-07-29T14:03:39.859159Z"}, {"name": "execute", "started_at": "2024-07-29T14:03:39.859159Z", "completed_at": "2024-07-29T14:03:39.859159Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.023247957229614258, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_eda_tools.missing_day", "compiled": true, "compiled_code": "\nWITH\nmissing_day AS (\n    SELECT *\n    FROM dbt_db.dbt_schema.data_generator\n    WHERE NOT (\n        \n        (company_name = 'FB' AND country = 'CA' AND date_day BETWEEN DATE('2019-05-01') AND DATE('2019-05-17')) OR\n        (company_name = 'GOOG' AND country = 'FR' AND date_day BETWEEN DATE('2020-01-01') AND DATE('2020-05-01')) OR\n        (company_name = 'AAPL' AND country = 'US' AND date_day BETWEEN DATE('2021-12-15') AND DATE('2021-12-26')) OR\n        \n        (date_day  BETWEEN DATE('2022-05-01') AND DATE('2022-05-05')) OR\n        \n        (country = 'DE' AND date_day BETWEEN DATE('2019-09-07') AND DATE('2019-09-09')) OR\n        \n        (company_name = 'AMZN' AND date_day BETWEEN DATE('2019-09-07') AND DATE('2019-09-09'))\n    )\n)\nSELECT * FROM missing_day", "relation_name": "dbt_db.dbt_schema.missing_day"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-29T14:03:39.849723Z", "completed_at": "2024-07-29T14:03:39.859159Z"}, {"name": "execute", "started_at": "2024-07-29T14:03:39.859159Z", "completed_at": "2024-07-29T14:03:39.859159Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.021424531936645508, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_eda_tools.missing_month", "compiled": true, "compiled_code": "\nWITH  raw_data AS (\n    SELECT\n        DISTINCT\n        company_name\n        , country\n        , CAST(date_trunc('month', date_day) AS Date) AS date_month\n    FROM dbt_db.dbt_schema.data_generator\n),\nmissing_month AS (\n    SELECT * FROM raw_data\n    WHERE NOT (\n        \n        (company_name = 'FB' AND country = 'CA' AND date_month BETWEEN DATE('2019-05-01') AND DATE('2019-07-05')) OR\n        (company_name = 'GOOG' AND country = 'FR' AND date_month BETWEEN DATE('2020-01-01') AND DATE('2020-05-01')) OR\n        (company_name = 'AAPL' AND country = 'US' AND date_month BETWEEN DATE('2021-05-15') AND DATE('2021-12-26')) OR\n        \n        (date_month  BETWEEN DATE('2022-05-01') AND DATE('2022-08-05')) OR\n        \n        (country = 'DE' AND date_month BETWEEN DATE('2019-09-07') AND DATE('2019-11-09')) OR\n        \n        (company_name = 'AMZN' AND date_month BETWEEN DATE('2019-01-07') AND DATE('2019-09-09'))\n    )\n)\nSELECT * FROM missing_month", "relation_name": "dbt_db.dbt_schema.missing_month"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-29T14:03:39.859159Z", "completed_at": "2024-07-29T14:03:39.859159Z"}, {"name": "execute", "started_at": "2024-07-29T14:03:39.874813Z", "completed_at": "2024-07-29T14:03:39.874813Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.03606915473937988, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_eda_tools.missing_year", "compiled": true, "compiled_code": "\nWITH\nraw_data AS (\n    SELECT\n        DISTINCT\n        company_name\n        , country\n        , CAST(date_trunc('year', date_day) AS Date) AS date_year\n    FROM dbt_db.dbt_schema.data_generator\n)\n, missing_year AS (\n    SELECT * FROM raw_data\n    WHERE NOT (\n        \n        (company_name = 'FB' AND country = 'CA' AND date_year BETWEEN DATE('2019-05-01') AND DATE('2020-07-05')) OR\n        (company_name = 'GOOG' AND country = 'FR' AND date_year BETWEEN DATE('2020-01-01') AND DATE('2021-05-01')) OR\n        \n        (date_year  BETWEEN DATE('2021-05-01') AND DATE('2022-08-05')) OR\n        \n        (country = 'DE' AND date_year BETWEEN DATE('2019-09-07') AND DATE('2020-11-09')) OR\n        \n        (company_name = 'AMZN' AND date_year BETWEEN DATE('2020-01-07') AND DATE('2021-09-09')) OR\n        (date_year BETWEEN DATE('2021-05-07') AND DATE('2022-09-09'))\n    )\n)\nSELECT * FROM missing_year", "relation_name": "dbt_db.dbt_schema.missing_year"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-29T14:03:39.890434Z", "completed_at": "2024-07-29T14:03:39.937302Z"}, {"name": "execute", "started_at": "2024-07-29T14:03:39.953319Z", "completed_at": "2024-07-29T14:03:39.953319Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 0.07850503921508789, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_eda_tools.get_missing_dates_ex1", "compiled": true, "compiled_code": "/**\n * Retrieves the missing dates in the date_day column of the missing_day model at the Day level granularity.\n *\n * @param {string} missing_day - The name of the model.\n * @param {string} date_day - The name of the column containing the dates.\n * @param {array} [dimensions] - An optional array of dimensions across which the missing dates are computed.\n * @param {object} [filters] - An optional filter object.\n * @param {string} [expected_frequency] - The interval to use when generating the missing dates (e.g. 'DAY', 'MONTH', 'YEAR').\n * @returns {rows} Rows of missing dates.\n */\n\n\nWITH\nunique_dates AS (\n  SELECT\n    DISTINCT\n        date_day\n        \n  FROM dbt_db.dbt_schema.missing_day\n  \n)\n, dates_lagged AS (\n  SELECT *\n  , LAG(date_day,1) OVER (\n        ORDER BY\n        \n        date_day DESC) AS next_date_day\n  FROM unique_dates\n)\nSELECT\n    date_day\n    \n    , next_date_day\n    , ABS(datediff(\n        DAY,\n        next_date_day,\n        date_day\n        )) AS missing_day\nFROM dates_lagged\nWHERE datediff(\n        DAY,\n        next_date_day,\n        date_day\n        ) < -1\n", "relation_name": "dbt_db.dbt_schema.get_missing_dates_ex1"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-29T14:03:39.890434Z", "completed_at": "2024-07-29T14:03:39.937302Z"}, {"name": "execute", "started_at": "2024-07-29T14:03:39.953319Z", "completed_at": "2024-07-29T14:03:39.953319Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.07850503921508789, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_eda_tools.get_missing_dates_ex3", "compiled": true, "compiled_code": "/**\n * Retrieves the missing dates in the date_day column of the missing_day model at the Day level granularity.\n *\n * @param {string} missing_day - The name of the model.\n * @param {string} date_day - The name of the column containing the dates.\n * @param {array} [dimensions] - An optional array of dimensions across which the missing dates are computed.\n * @param {object} [filters] - An optional filter object.\n * @param {string} [expected_frequency] - The interval to use when generating the missing dates (e.g. 'DAY', 'MONTH', 'YEAR').\n * @returns {rows} Rows of missing dates.\n */\n\n\nWITH\nunique_dates AS (\n  SELECT\n    DISTINCT\n        date_day\n        \n            , (country) AS country\n        \n            , (company_name) AS company_name\n        \n  FROM dbt_db.dbt_schema.missing_day\n  \n    \n        \n          WHERE 1=1\n        \n\n        \n        \n          AND country IN ('DE', 'US')\n        \n    \n        \n\n        \n        \n          \n            AND  company_name = 'MSFT'\n          \n\n        \n    \n        \n\n        \n        \n          \n            AND  str_length >2\n          \n\n        \n    \n  \n)\n, dates_lagged AS (\n  SELECT *\n  , LAG(date_day,1) OVER (\n        ORDER BY\n        \n            (country) DESC,\n        \n            (company_name) DESC,\n        \n        date_day DESC) AS next_date_day\n  FROM unique_dates\n)\nSELECT\n    date_day\n    \n        , (country) AS country\n    \n        , (company_name) AS company_name\n    \n    , next_date_day\n    , ABS(datediff(\n        DAY,\n        next_date_day,\n        date_day\n        )) AS missing_day\nFROM dates_lagged\nWHERE datediff(\n        DAY,\n        next_date_day,\n        date_day\n        ) < -1\n", "relation_name": "dbt_db.dbt_schema.get_missing_dates_ex3"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-29T14:03:39.906100Z", "completed_at": "2024-07-29T14:03:39.937302Z"}, {"name": "execute", "started_at": "2024-07-29T14:03:39.953319Z", "completed_at": "2024-07-29T14:03:39.953319Z"}], "thread_id": "Thread-8 (worker)", "execution_time": 0.07850503921508789, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_eda_tools.get_missing_dates_ex4", "compiled": true, "compiled_code": "/**\n * Retrieves the missing dates in the date_day column of the missing_day model at the Day level granularity.\n *\n * @param {string} missing_day - The name of the model.\n * @param {string} date_day - The name of the column containing the dates.\n * @param {array} [dimensions] - An optional array of dimensions across which the missing dates are computed.\n * @param {object} [filters] - An optional filter object.\n * @param {string} [expected_frequency] - The interval to use when generating the missing dates (e.g. 'DAY', 'MONTH', 'YEAR').\n * @returns {rows} Rows of missing dates.\n */\n\n\nWITH\nunique_dates AS (\n  SELECT\n    DISTINCT\n        date_day\n        \n            , (country) AS country\n        \n            , (company_name) AS company_name\n        \n  FROM dbt_db.dbt_schema.missing_day\n  \n    \n        \n          WHERE 1=1\n        \n\n        \n        \n          AND country IN ('DE', 'US')\n        \n    \n        \n\n        \n        \n          AND company_name IN ('GOG', 'A')\n        \n    \n        \n\n        \n        \n          \n            AND  str_length =3\n          \n\n        \n    \n  \n)\n, dates_lagged AS (\n  SELECT *\n  , LAG(date_day,1) OVER (\n        ORDER BY\n        \n            (country) DESC,\n        \n            (company_name) DESC,\n        \n        date_day DESC) AS next_date_day\n  FROM unique_dates\n)\nSELECT\n    date_day\n    \n        , (country) AS country\n    \n        , (company_name) AS company_name\n    \n    , next_date_day\n    , ABS(datediff(\n        DAY,\n        next_date_day,\n        date_day\n        )) AS missing_day\nFROM dates_lagged\nWHERE datediff(\n        DAY,\n        next_date_day,\n        date_day\n        ) < -1\n", "relation_name": "dbt_db.dbt_schema.get_missing_dates_ex4"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-29T14:03:39.906100Z", "completed_at": "2024-07-29T14:03:39.949810Z"}, {"name": "execute", "started_at": "2024-07-29T14:03:39.953319Z", "completed_at": "2024-07-29T14:03:39.953319Z"}], "thread_id": "Thread-9 (worker)", "execution_time": 0.07850503921508789, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_eda_tools.assert_missing_day", "compiled": true, "compiled_code": "WITH\nmissing_values AS (\n    \nWITH\nunique_dates AS (\n  SELECT\n    DISTINCT\n        date_day\n        \n  FROM dbt_db.dbt_schema.missing_day\n  \n)\n, dates_lagged AS (\n  SELECT *\n  , LAG(date_day,1) OVER (\n        ORDER BY\n        \n        date_day DESC) AS next_date_day\n  FROM unique_dates\n)\nSELECT\n    date_day\n    \n    , next_date_day\n    , ABS(datediff(\n        DAY,\n        next_date_day,\n        date_day\n        )) AS missing_day\nFROM dates_lagged\nWHERE datediff(\n        DAY,\n        next_date_day,\n        date_day\n        ) < -1\n\n)\n, row_count_missing_values AS (\n    SELECT COUNT(missing_day) AS row_count\n    FROM missing_values\n)\nSELECT * FROM row_count_missing_values WHERE row_count <> 1", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-29T14:03:39.906100Z", "completed_at": "2024-07-29T14:03:39.949810Z"}, {"name": "execute", "started_at": "2024-07-29T14:03:39.953319Z", "completed_at": "2024-07-29T14:03:39.953319Z"}], "thread_id": "Thread-10 (worker)", "execution_time": 0.07850503921508789, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_eda_tools.assert_missing_day_by_company", "compiled": true, "compiled_code": "WITH\nmissing_values AS (\n    \nWITH\nunique_dates AS (\n  SELECT\n    DISTINCT\n        date_day\n        \n            , (company_name) AS company_name\n        \n  FROM dbt_db.dbt_schema.missing_day\n  \n)\n, dates_lagged AS (\n  SELECT *\n  , LAG(date_day,1) OVER (\n        ORDER BY\n        \n            (company_name) DESC,\n        \n        date_day DESC) AS next_date_day\n  FROM unique_dates\n)\nSELECT\n    date_day\n    \n        , (company_name) AS company_name\n    \n    , next_date_day\n    , ABS(datediff(\n        DAY,\n        next_date_day,\n        date_day\n        )) AS missing_day\nFROM dates_lagged\nWHERE datediff(\n        DAY,\n        next_date_day,\n        date_day\n        ) < -1\n\n)\n, row_count_missing_values AS (\n    SELECT COUNT(missing_day) AS row_count\n    FROM missing_values\n)\nSELECT * FROM row_count_missing_values WHERE row_count <> 6", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-29T14:03:39.921723Z", "completed_at": "2024-07-29T14:03:39.953319Z"}, {"name": "execute", "started_at": "2024-07-29T14:03:39.953319Z", "completed_at": "2024-07-29T14:03:39.953319Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.07850503921508789, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_eda_tools.assert_missing_day_by_country_company", "compiled": true, "compiled_code": "WITH\nmissing_values AS (\n    \nWITH\nunique_dates AS (\n  SELECT\n    DISTINCT\n        date_day\n        \n            , (country) AS country\n        \n            , (company_name) AS company_name\n        \n  FROM dbt_db.dbt_schema.missing_day\n  \n)\n, dates_lagged AS (\n  SELECT *\n  , LAG(date_day,1) OVER (\n        ORDER BY\n        \n            (country) DESC,\n        \n            (company_name) DESC,\n        \n        date_day DESC) AS next_date_day\n  FROM unique_dates\n)\nSELECT\n    date_day\n    \n        , (country) AS country\n    \n        , (company_name) AS company_name\n    \n    , next_date_day\n    , ABS(datediff(\n        DAY,\n        next_date_day,\n        date_day\n        )) AS missing_day\nFROM dates_lagged\nWHERE datediff(\n        DAY,\n        next_date_day,\n        date_day\n        ) < -1\n\n)\n, row_count_missing_values AS (\n    SELECT COUNT(missing_day) AS row_count\n    FROM missing_values\n)\nSELECT * FROM row_count_missing_values WHERE row_count <> 35", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-29T14:03:39.921723Z", "completed_at": "2024-07-29T14:03:39.953319Z"}, {"name": "execute", "started_at": "2024-07-29T14:03:39.970239Z", "completed_at": "2024-07-29T14:03:39.970239Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.09542512893676758, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_eda_tools.assert_missing_day_by_country", "compiled": true, "compiled_code": "WITH\nmissing_values AS (\n    \nWITH\nunique_dates AS (\n  SELECT\n    DISTINCT\n        date_day\n        \n            , (country) AS country\n        \n  FROM dbt_db.dbt_schema.missing_day\n  \n)\n, dates_lagged AS (\n  SELECT *\n  , LAG(date_day,1) OVER (\n        ORDER BY\n        \n            (country) DESC,\n        \n        date_day DESC) AS next_date_day\n  FROM unique_dates\n)\nSELECT\n    date_day\n    \n        , (country) AS country\n    \n    , next_date_day\n    , ABS(datediff(\n        DAY,\n        next_date_day,\n        date_day\n        )) AS missing_day\nFROM dates_lagged\nWHERE datediff(\n        DAY,\n        next_date_day,\n        date_day\n        ) < -1\n\n)\n, row_count_missing_values AS (\n    SELECT COUNT(missing_day) AS row_count\n    FROM missing_values\n)\nSELECT * FROM row_count_missing_values WHERE row_count <> 6", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-29T14:03:39.921723Z", "completed_at": "2024-07-29T14:03:39.953319Z"}, {"name": "execute", "started_at": "2024-07-29T14:03:39.972457Z", "completed_at": "2024-07-29T14:03:39.972457Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.09764337539672852, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_eda_tools.assert_missing_day_by_country_company_filtered_both", "compiled": true, "compiled_code": "WITH\nmissing_values AS (\n    \nWITH\nunique_dates AS (\n  SELECT\n    DISTINCT\n        date_day\n        \n            , (country) AS country\n        \n            , (company_name) AS company_name\n        \n  FROM dbt_db.dbt_schema.missing_day\n  \n    \n        \n          WHERE 1=1\n        \n\n        \n        \n          \n            AND  country = 'DE'\n          \n\n        \n    \n        \n\n        \n        \n          \n            AND  company_name = 'A'\n          \n\n        \n    \n  \n)\n, dates_lagged AS (\n  SELECT *\n  , LAG(date_day,1) OVER (\n        ORDER BY\n        \n            (country) DESC,\n        \n            (company_name) DESC,\n        \n        date_day DESC) AS next_date_day\n  FROM unique_dates\n)\nSELECT\n    date_day\n    \n        , (country) AS country\n    \n        , (company_name) AS company_name\n    \n    , next_date_day\n    , ABS(datediff(\n        DAY,\n        next_date_day,\n        date_day\n        )) AS missing_day\nFROM dates_lagged\nWHERE datediff(\n        DAY,\n        next_date_day,\n        date_day\n        ) < -1\n\n)\n, row_count_missing_values AS (\n    SELECT COUNT(missing_day) AS row_count\n    FROM missing_values\n)\nSELECT * FROM row_count_missing_values WHERE row_count <> 2", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-29T14:03:39.937302Z", "completed_at": "2024-07-29T14:03:39.953319Z"}, {"name": "execute", "started_at": "2024-07-29T14:03:39.979105Z", "completed_at": "2024-07-29T14:03:39.979105Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.10529303550720215, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_eda_tools.assert_missing_day_by_country_company_filtered_country", "compiled": true, "compiled_code": "WITH\nmissing_values AS (\n    \nWITH\nunique_dates AS (\n  SELECT\n    DISTINCT\n        date_day\n        \n            , (country) AS country\n        \n            , (company_name) AS company_name\n        \n  FROM dbt_db.dbt_schema.missing_day\n  \n    \n        \n          WHERE 1=1\n        \n\n        \n        \n          \n            AND  country = 'DE'\n          \n\n        \n    \n  \n)\n, dates_lagged AS (\n  SELECT *\n  , LAG(date_day,1) OVER (\n        ORDER BY\n        \n            (country) DESC,\n        \n            (company_name) DESC,\n        \n        date_day DESC) AS next_date_day\n  FROM unique_dates\n)\nSELECT\n    date_day\n    \n        , (country) AS country\n    \n        , (company_name) AS company_name\n    \n    , next_date_day\n    , ABS(datediff(\n        DAY,\n        next_date_day,\n        date_day\n        )) AS missing_day\nFROM dates_lagged\nWHERE datediff(\n        DAY,\n        next_date_day,\n        date_day\n        ) < -1\n\n)\n, row_count_missing_values AS (\n    SELECT COUNT(missing_day) AS row_count\n    FROM missing_values\n)\nSELECT * FROM row_count_missing_values WHERE row_count <> 10", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-29T14:03:39.953319Z", "completed_at": "2024-07-29T14:03:39.979105Z"}, {"name": "execute", "started_at": "2024-07-29T14:03:39.985167Z", "completed_at": "2024-07-29T14:03:39.985167Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.07906603813171387, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_eda_tools.assert_missing_day_by_country_company_numeric_filter", "compiled": true, "compiled_code": "WITH\nmissing_values AS (\n    \nWITH\nunique_dates AS (\n  SELECT\n    DISTINCT\n        date_day\n        \n            , (country) AS country\n        \n            , (company_name) AS company_name\n        \n  FROM dbt_db.dbt_schema.missing_day\n  \n    \n        \n          WHERE 1=1\n        \n\n        \n        \n          AND country IN ('DE', 'US')\n        \n    \n        \n\n        \n        \n          AND company_name IN ('GOG', 'A')\n        \n    \n        \n\n        \n        \n          \n            AND  str_length =3\n          \n\n        \n    \n  \n)\n, dates_lagged AS (\n  SELECT *\n  , LAG(date_day,1) OVER (\n        ORDER BY\n        \n            (country) DESC,\n        \n            (company_name) DESC,\n        \n        date_day DESC) AS next_date_day\n  FROM unique_dates\n)\nSELECT\n    date_day\n    \n        , (country) AS country\n    \n        , (company_name) AS company_name\n    \n    , next_date_day\n    , ABS(datediff(\n        DAY,\n        next_date_day,\n        date_day\n        )) AS missing_day\nFROM dates_lagged\nWHERE datediff(\n        DAY,\n        next_date_day,\n        date_day\n        ) < -1\n\n\n)\n, row_count_missing_values AS (\n    SELECT COUNT(missing_day) AS row_count\n    FROM missing_values\n)\n-- Only rows corresponding to company A are picked up as the str_length is set to 3\nSELECT * FROM row_count_missing_values WHERE row_count <> 3", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-29T14:03:39.995154Z", "completed_at": "2024-07-29T14:03:40.012903Z"}, {"name": "execute", "started_at": "2024-07-29T14:03:40.014945Z", "completed_at": "2024-07-29T14:03:40.014945Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.03216814994812012, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_eda_tools.assert_missing_month", "compiled": true, "compiled_code": "WITH\nmissing_values AS (\n    \nWITH\nunique_dates AS (\n  SELECT\n    DISTINCT\n        date_month\n        \n  FROM dbt_db.dbt_schema.missing_month\n  \n)\n, dates_lagged AS (\n  SELECT *\n  , LAG(date_month,1) OVER (\n        ORDER BY\n        \n        date_month DESC) AS next_date_month\n  FROM unique_dates\n)\nSELECT\n    date_month\n    \n    , next_date_month\n    , ABS(datediff(\n        MONTH,\n        next_date_month,\n        date_month\n        )) AS missing_month\nFROM dates_lagged\nWHERE datediff(\n        MONTH,\n        next_date_month,\n        date_month\n        ) < -1\n\n)\n, row_count_missing_values AS (\n    SELECT COUNT(missing_month) AS row_count\n    FROM missing_values\n)\nSELECT * FROM row_count_missing_values WHERE row_count <> 1", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-29T14:03:40.004915Z", "completed_at": "2024-07-29T14:03:40.016930Z"}, {"name": "execute", "started_at": "2024-07-29T14:03:40.017977Z", "completed_at": "2024-07-29T14:03:40.017977Z"}], "thread_id": "Thread-9 (worker)", "execution_time": 0.03386402130126953, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_eda_tools.assert_missing_year", "compiled": true, "compiled_code": "WITH\nmissing_values AS (\n    \nWITH\nunique_dates AS (\n  SELECT\n    DISTINCT\n        date_year\n        \n  FROM dbt_db.dbt_schema.missing_year\n  \n)\n, dates_lagged AS (\n  SELECT *\n  , LAG(date_year,1) OVER (\n        ORDER BY\n        \n        date_year DESC) AS next_date_year\n  FROM unique_dates\n)\nSELECT\n    date_year\n    \n    , next_date_year\n    , ABS(datediff(\n        YEAR,\n        next_date_year,\n        date_year\n        )) AS missing_year\nFROM dates_lagged\nWHERE datediff(\n        YEAR,\n        next_date_year,\n        date_year\n        ) < -1\n\n)\n, row_count_missing_values AS (\n    SELECT COUNT(missing_year) AS row_count\n    FROM missing_values\n)\nSELECT * FROM row_count_missing_values WHERE row_count <> 1", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-29T14:03:39.998943Z", "completed_at": "2024-07-29T14:03:40.017977Z"}, {"name": "execute", "started_at": "2024-07-29T14:03:40.017977Z", "completed_at": "2024-07-29T14:03:40.017977Z"}], "thread_id": "Thread-8 (worker)", "execution_time": 0.034534454345703125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_eda_tools.assert_missing_month_by_days", "compiled": true, "compiled_code": "WITH\nmissing_values AS (\n    \nWITH\nunique_dates AS (\n  SELECT\n    DISTINCT\n        date_month\n        \n  FROM dbt_db.dbt_schema.missing_month\n  \n)\n, dates_lagged AS (\n  SELECT *\n  , LAG(date_month,1) OVER (\n        ORDER BY\n        \n        date_month DESC) AS next_date_month\n  FROM unique_dates\n)\nSELECT\n    date_month\n    \n    , next_date_month\n    , ABS(datediff(\n        DAY,\n        next_date_month,\n        date_month\n        )) AS missing_day\nFROM dates_lagged\nWHERE datediff(\n        DAY,\n        next_date_month,\n        date_month\n        ) < -1\n\n)\n, row_count_missing_values AS (\n    SELECT COUNT(missing_day) AS row_count\n    FROM missing_values\n)\nSELECT * FROM row_count_missing_values WHERE row_count <> 67", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-29T14:03:39.990186Z", "completed_at": "2024-07-29T14:03:40.017977Z"}, {"name": "execute", "started_at": "2024-07-29T14:03:40.017977Z", "completed_at": "2024-07-29T14:03:40.017977Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 0.03687596321105957, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_eda_tools.get_missing_dates_ex2", "compiled": true, "compiled_code": "/**\n * Retrieves the missing dates in the date_month column of the missing_month model at the Monthly level granularity.\n *\n * @param {string} missing_day - The name of the model.\n * @param {string} date_day - The name of the column containing the dates.\n * @param {array} [dimensions] - An optional array of dimensions across which the missing dates are computed.\n * @param {object} [filters] - An optional filter object.\n * @param {string} [expected_frequency] - The interval to use when generating the missing dates (e.g. 'DAY', 'MONTH', 'YEAR').\n * @returns {rows} Rows of missing dates.\n */\n\n\nWITH\nunique_dates AS (\n  SELECT\n    DISTINCT\n        date_month\n        \n            , (country) AS country\n        \n  FROM dbt_db.dbt_schema.missing_month\n  \n)\n, dates_lagged AS (\n  SELECT *\n  , LAG(date_month,1) OVER (\n        ORDER BY\n        \n            (country) DESC,\n        \n        date_month DESC) AS next_date_month\n  FROM unique_dates\n)\nSELECT\n    date_month\n    \n        , (country) AS country\n    \n    , next_date_month\n    , ABS(datediff(\n        MONTH,\n        next_date_month,\n        date_month\n        )) AS missing_month\nFROM dates_lagged\nWHERE datediff(\n        MONTH,\n        next_date_month,\n        date_month\n        ) < -1\n", "relation_name": "dbt_db.dbt_schema.get_missing_dates_ex2"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-07-29T14:03:40.007894Z", "completed_at": "2024-07-29T14:03:40.017977Z"}, {"name": "execute", "started_at": "2024-07-29T14:03:40.017977Z", "completed_at": "2024-07-29T14:03:40.017977Z"}], "thread_id": "Thread-10 (worker)", "execution_time": 0.03386402130126953, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_eda_tools.assert_missing_year_by_month", "compiled": true, "compiled_code": "WITH\nmissing_values AS (\n    \nWITH\nunique_dates AS (\n  SELECT\n    DISTINCT\n        date_year\n        \n  FROM dbt_db.dbt_schema.missing_year\n  \n)\n, dates_lagged AS (\n  SELECT *\n  , LAG(date_year,1) OVER (\n        ORDER BY\n        \n        date_year DESC) AS next_date_year\n  FROM unique_dates\n)\nSELECT\n    date_year\n    \n    , next_date_year\n    , ABS(datediff(\n        MONTH,\n        next_date_year,\n        date_year\n        )) AS missing_month\nFROM dates_lagged\nWHERE datediff(\n        MONTH,\n        next_date_year,\n        date_year\n        ) < -1\n\n)\n, row_count_missing_values AS (\n    SELECT COUNT(missing_month) AS row_count\n    FROM missing_values\n)\nSELECT * FROM row_count_missing_values WHERE row_count <> 4", "relation_name": null}], "elapsed_time": 2.01318359375, "args": {"cache_selected_only": false, "introspect": true, "log_level_file": "debug", "which": "generate", "require_resource_names_without_spaces": false, "vars": {}, "show_resource_report": false, "log_format_file": "debug", "enable_legacy_logger": false, "write_json": true, "require_explicit_package_overrides_for_builtin_materializations": true, "source_freshness_run_project_hooks": false, "quiet": false, "version_check": true, "invocation_command": "dbt docs generate", "macro_debugging": false, "select": [], "profiles_dir": "C:\\Users\\shank\\.dbt", "strict_mode": false, "static": false, "log_format": "default", "empty_catalog": false, "compile": true, "project_dir": "C:\\Users\\shank\\Google Drive\\Jupyter Data\\Consulting\\External\\Kering\\Sourcev1\\Coding\\dbt_eda_tools", "send_anonymous_usage_stats": true, "exclude": [], "populate_cache": true, "indirect_selection": "eager", "use_colors_file": true, "use_colors": true, "print": true, "warn_error_options": {"include": [], "exclude": []}, "partial_parse": true, "log_level": "info", "static_parser": true, "defer": false, "favor_state": false, "log_file_max_bytes": 10485760, "log_path": "C:\\Users\\shank\\Google Drive\\Jupyter Data\\Consulting\\External\\Kering\\Sourcev1\\Coding\\dbt_eda_tools\\logs", "partial_parse_file_diff": true, "printer_width": 80}}