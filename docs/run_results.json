{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.8.4", "generated_at": "2024-09-02T15:15:40.359715Z", "invocation_id": "bc4bc200-4854-40c0-ae11-ec569cf9af00", "env": {"EDA_TOOLS_DEVELOPER": "1"}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-02T15:14:58.168310Z", "completed_at": "2024-09-02T15:14:59.046687Z"}, {"name": "execute", "started_at": "2024-09-02T15:14:59.047863Z", "completed_at": "2024-09-02T15:14:59.420991Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.3533744812011719, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b6c392-0000-9fa2-0001-0e1a000552e6"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.dbt_eda_tools.data_generator", "compiled": true, "compiled_code": "\n\nWITH date_gen AS (\n    \n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n     + \n    \n    p7.generated_number * power(2, 7)\n     + \n    \n    p8.generated_number * power(2, 8)\n     + \n    \n    p9.generated_number * power(2, 9)\n     + \n    \n    p10.generated_number * power(2, 10)\n     + \n    \n    p11.generated_number * power(2, 11)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n     cross join \n    \n    p as p11\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 2192\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        cast('2019-01-01' as date)\n        )\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= cast('2025-01-01' as date)\n\n)\n\nselect * from filtered\n\n\n),\ncompany_gen AS (\n     SELECT 'MSFT' AS company_name\n     UNION ALL\n     SELECT 'GOG' AS company_name\n     UNION ALL\n     SELECT 'AMZN' AS company_name\n     UNION ALL\n     SELECT 'A' AS company_name\n     UNION ALL\n     SELECT 'FB' AS company_name\n),\ncountry_gen AS (\n    SELECT 'FR' AS country\n    UNION ALL\n    SELECT 'DE' AS country\n    UNION ALL\n    SELECT 'GB' AS country\n    UNION ALL\n    SELECT 'US' AS country\n    UNION all\n    SELECT 'CA' AS country\n)\n\nSELECT *, LENGTH(company_name)+LENGTH(country) AS str_length\nFROM date_gen, company_gen, country_gen", "relation_name": "dbt_db.dbt_schema.data_generator"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-02T15:14:59.599355Z", "completed_at": "2024-09-02T15:14:59.674265Z"}, {"name": "execute", "started_at": "2024-09-02T15:14:59.695646Z", "completed_at": "2024-09-02T15:15:02.137124Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 2.6617391109466553, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b6c392-0000-a053-0001-0e1a00057206"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.dbt_eda_tools.data_aggregated_mixed_granularity", "compiled": true, "compiled_code": "\n\nSELECT\n    company_name\n    , country\n    , CASE\n        WHEN date_day <= DATE('2022-01-01')  THEN CAST(date_trunc('year', date_day) AS Date)\n        WHEN date_day BETWEEN DATE('2022-01-01') AND DATE('2023-01-01') THEN CAST(date_trunc('month', date_day) AS Date)\n        \n    END AS date_mixed_granularity\nFROM dbt_db.dbt_schema.data_generator\nWHERE company_name = 'FB' AND country = 'US'\nGROUP BY 1,2,3", "relation_name": "dbt_db.dbt_schema.data_aggregated_mixed_granularity"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-02T15:14:59.585423Z", "completed_at": "2024-09-02T15:14:59.661685Z"}, {"name": "execute", "started_at": "2024-09-02T15:14:59.676622Z", "completed_at": "2024-09-02T15:15:02.167089Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 2.7047128677368164, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b6c392-0000-9ff3-0001-0e1a0005429a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.dbt_eda_tools.data_aggregated", "compiled": true, "compiled_code": "\n\nSELECT\n    company_name\n    , country\n    , MIN(str_length) AS str_length\nFROM dbt_db.dbt_schema.data_generator\nWHERE\n    --exclude some rows. Keeps only 2 companies for France and 3 countries for MSFT\n    NOT (\n        (company_name = 'MSFT' AND country = 'DE')\n        OR\n        (country = 'FR' AND (company_name IN ('GOG','A','MSFT')))\n    )\nGROUP BY 1,2", "relation_name": "dbt_db.dbt_schema.data_aggregated"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-02T15:14:59.650413Z", "completed_at": "2024-09-02T15:14:59.730447Z"}, {"name": "execute", "started_at": "2024-09-02T15:14:59.760310Z", "completed_at": "2024-09-02T15:15:02.296107Z"}], "thread_id": "Thread-8 (worker)", "execution_time": 2.8862268924713135, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b6c392-0000-9fe4-0001-0e1a00050432"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.dbt_eda_tools.missing_year", "compiled": true, "compiled_code": "\n\n\nWITH\nraw_data AS (\n    SELECT\n        DISTINCT\n        company_name\n        , country\n        , CAST(date_trunc('year', date_day) AS Date) AS date_year\n    FROM dbt_db.dbt_schema.data_generator\n)\n, missing_year AS (\n    SELECT * FROM raw_data\n    WHERE NOT (\n        \n        (company_name = 'FB' AND country = 'CA' AND date_year BETWEEN DATE('2019-05-01') AND DATE('2020-07-05')) OR\n        (company_name = 'GOOG' AND country = 'FR' AND date_year BETWEEN DATE('2020-01-01') AND DATE('2021-05-01')) OR\n        \n        (date_year  BETWEEN DATE('2021-05-01') AND DATE('2022-08-05')) OR\n        \n        (country = 'DE' AND date_year BETWEEN DATE('2019-09-07') AND DATE('2020-11-09')) OR\n        \n        (company_name = 'AMZN' AND date_year BETWEEN DATE('2020-01-07') AND DATE('2021-09-09')) OR\n        (date_year BETWEEN DATE('2021-05-07') AND DATE('2022-09-09'))\n    )\n)\nSELECT * FROM missing_year", "relation_name": "dbt_db.dbt_schema.missing_year"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-02T15:14:59.631432Z", "completed_at": "2024-09-02T15:14:59.707802Z"}, {"name": "execute", "started_at": "2024-09-02T15:14:59.732284Z", "completed_at": "2024-09-02T15:15:02.307314Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 2.9092485904693604, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b6c392-0000-a06a-0001-0e1a0005822a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.dbt_eda_tools.missing_month", "compiled": true, "compiled_code": "\n\n\nWITH  raw_data AS (\n    SELECT\n        DISTINCT\n        company_name\n        , country\n        , CAST(date_trunc('month', date_day) AS Date) AS date_month\n    FROM dbt_db.dbt_schema.data_generator\n),\nmissing_month AS (\n    SELECT * FROM raw_data\n    WHERE NOT (\n        \n        (company_name = 'FB' AND country = 'CA' AND date_month BETWEEN DATE('2019-05-01') AND DATE('2019-07-05')) OR\n        (company_name = 'GOOG' AND country = 'FR' AND date_month BETWEEN DATE('2020-01-01') AND DATE('2020-05-01')) OR\n        (company_name = 'AAPL' AND country = 'US' AND date_month BETWEEN DATE('2021-05-15') AND DATE('2021-12-26')) OR\n        \n        (date_month  BETWEEN DATE('2022-05-01') AND DATE('2022-08-05')) OR\n        \n        (country = 'DE' AND date_month BETWEEN DATE('2019-09-07') AND DATE('2019-11-09')) OR\n        \n        (company_name = 'AMZN' AND date_month BETWEEN DATE('2019-01-07') AND DATE('2019-09-09'))\n    )\n)\nSELECT * FROM missing_month", "relation_name": "dbt_db.dbt_schema.missing_month"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-02T15:14:59.614196Z", "completed_at": "2024-09-02T15:14:59.692304Z"}, {"name": "execute", "started_at": "2024-09-02T15:14:59.717891Z", "completed_at": "2024-09-02T15:15:02.459712Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 3.188697099685669, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b6c392-0000-a053-0001-0e1a0005720a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.dbt_eda_tools.data_generator_enriched_describe", "compiled": true, "compiled_code": "\n\n\n\nSELECT\n    *\n    , IFF(str_length<4,True,False)   AS is_short_string\nFROM dbt_db.dbt_schema.data_generator", "relation_name": "dbt_db.dbt_schema.data_generator_enriched_describe"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-02T15:14:59.623406Z", "completed_at": "2024-09-02T15:14:59.714128Z"}, {"name": "execute", "started_at": "2024-09-02T15:14:59.747634Z", "completed_at": "2024-09-02T15:15:02.444718Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 3.200962543487549, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b6c392-0000-a06a-0001-0e1a0005822e"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.dbt_eda_tools.missing_day", "compiled": true, "compiled_code": "\n\n\nWITH\nmissing_day AS (\n    SELECT *\n    FROM dbt_db.dbt_schema.data_generator\n    WHERE NOT (\n        \n        (company_name = 'FB' AND country = 'CA' AND date_day BETWEEN DATE('2019-05-01') AND DATE('2019-05-17')) OR\n        (company_name = 'GOOG' AND country = 'FR' AND date_day BETWEEN DATE('2020-01-01') AND DATE('2020-05-01')) OR\n        (company_name = 'AAPL' AND country = 'US' AND date_day BETWEEN DATE('2021-12-15') AND DATE('2021-12-26')) OR\n        \n        (date_day  BETWEEN DATE('2022-05-01') AND DATE('2022-05-05')) OR\n        \n        (country = 'DE' AND date_day BETWEEN DATE('2019-09-07') AND DATE('2019-09-09')) OR\n        \n        (company_name = 'AMZN' AND date_day BETWEEN DATE('2019-09-07') AND DATE('2019-09-09'))\n    )\n)\nSELECT * FROM missing_day", "relation_name": "dbt_db.dbt_schema.missing_day"}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-09-02T15:15:02.757357Z", "completed_at": "2024-09-02T15:15:02.825565Z"}, {"name": "execute", "started_at": "2024-09-02T15:15:02.853406Z", "completed_at": "2024-09-02T15:15:05.946901Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 3.555875062942505, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b6c393-0000-9ff3-0001-0e1a0005429e"}, "message": null, "failures": 0, "unique_id": "test.dbt_eda_tools.assert_missing_month_by_days", "compiled": true, "compiled_code": "\n\nWITH\nmissing_values AS (\n    \n  WITH\n  unique_dates AS (\n    SELECT\n      DISTINCT\n          date_month\n          \n    FROM dbt_db.dbt_schema.missing_month\n    \n  )\n  , dates_lagged AS (\n    SELECT *\n    , LAG(date_month,1) OVER (\n          ORDER BY\n          \n          date_month DESC) AS next_date_month\n    FROM unique_dates\n  )\n  SELECT\n      date_month\n      \n      , next_date_month\n      , ABS(datediff(\n        DAY,\n        next_date_month,\n        date_month\n        )) AS missing_day\n  FROM dates_lagged\n  WHERE datediff(\n        DAY,\n        next_date_month,\n        date_month\n        ) < -1\n\n)\n, row_count_missing_values AS (\n    SELECT COUNT(missing_day) AS row_count\n    FROM missing_values\n)\nSELECT * FROM row_count_missing_values WHERE row_count <> 67", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-09-02T15:15:02.282921Z", "completed_at": "2024-09-02T15:15:02.308041Z"}, {"name": "execute", "started_at": "2024-09-02T15:15:02.319457Z", "completed_at": "2024-09-02T15:15:06.102035Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 3.978044033050537, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b6c393-0000-9fa2-0001-0e1a000552ea"}, "message": null, "failures": 0, "unique_id": "test.dbt_eda_tools.assert_percent_of_total_level", "compiled": true, "compiled_code": "\n\nWITH\npercent_of_total AS (\n    SELECT\n        company_name\n        , country\n        , \n\n  \n\n  \n\n      ROUND(\n        \n          DIV0NULL(\n            COUNT(str_length)\n            ,\n            SUM(COUNT(str_length)) OVER ()\n          )\n        \n      , 3)\n\n AS count_percent\n        , \n\n  \n\n  \n    \n  \n\n      ROUND(\n        \n          DIV0NULL(\n            COUNT(str_length)\n            ,\n            SUM(COUNT(str_length)) OVER (PARTITION BY company_name)\n          )\n        \n      , 3)\n\n AS count_percent_level\n\n    FROM dbt_db.dbt_schema.data_aggregated\n    GROUP BY 1,2\n    ORDER BY company_name, country, sum(str_length)  DESC\n)\nSELECT * FROM percent_of_total\nWHERE\n    1=1\n    -- aggregated percent at level is always greater than percent of entire column\n    AND\n    (\n        count_percent_level < count_percent\n    -- MSFT has 3 countries, so each should be 1/3 of the total\n    OR (company_name = 'MSFT' AND count_percent_level <> .333)\n    -- AMZN & FB are unfiltered and have 5 countries, so each should be 1/5 of the total\n    OR (company_name IN ('AMZN','FB') AND count_percent_level <> .2)\n    -- Each with 4 countries, so each should be 1/4 of the total\n    OR (company_name IN ('GOG','A') AND count_percent_level <> .25)\n    )", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-09-02T15:15:02.308751Z", "completed_at": "2024-09-02T15:15:02.359705Z"}, {"name": "execute", "started_at": "2024-09-02T15:15:02.360786Z", "completed_at": "2024-09-02T15:15:06.195751Z"}], "thread_id": "Thread-9 (worker)", "execution_time": 4.004243850708008, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b6c393-0000-a06a-0001-0e1a00058236"}, "message": null, "failures": 0, "unique_id": "test.dbt_eda_tools.assert_percent_of_total_rounding", "compiled": true, "compiled_code": "\n\nWITH\npercent_of_total AS (\n    SELECT\n    country\n    -- rounding defaults to 2 if unspecified\n    , \n\n  \n\n  \n\n      ROUND(\n        \n          DIV0NULL(\n            sum(str_length)\n            ,\n            SUM(sum(str_length)) OVER ()\n          )\n        \n      , 2)\n\n AS sum_percent\n    , \n\n  \n\n  \n\n      ROUND(\n        \n          DIV0NULL(\n            sum(str_length)\n            ,\n            SUM(sum(str_length)) OVER ()\n          )\n        \n      , 2)\n\n AS sum_percent_3\n\nFROM dbt_db.dbt_schema.data_aggregated\nGROUP BY 1\n)\nSELECT * FROM percent_of_total\nWHERE\n    country = 'GB'\n    AND sum_percent <> 0.2\n    AND sum_percent <> 0.24", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-09-02T15:15:02.525676Z", "completed_at": "2024-09-02T15:15:02.555224Z"}, {"name": "execute", "started_at": "2024-09-02T15:15:02.567984Z", "completed_at": "2024-09-02T15:15:06.366257Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 3.9801414012908936, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b6c393-0000-a06a-0001-0e1a00058232"}, "message": null, "failures": 0, "unique_id": "test.dbt_eda_tools.assert_missing_year_by_month", "compiled": true, "compiled_code": "\n\nWITH\nmissing_values AS (\n    \n  WITH\n  unique_dates AS (\n    SELECT\n      DISTINCT\n          date_year\n          \n    FROM dbt_db.dbt_schema.missing_year\n    \n  )\n  , dates_lagged AS (\n    SELECT *\n    , LAG(date_year,1) OVER (\n          ORDER BY\n          \n          date_year DESC) AS next_date_year\n    FROM unique_dates\n  )\n  SELECT\n      date_year\n      \n      , next_date_year\n      , ABS(datediff(\n        MONTH,\n        next_date_year,\n        date_year\n        )) AS missing_month\n  FROM dates_lagged\n  WHERE datediff(\n        MONTH,\n        next_date_year,\n        date_year\n        ) < -1\n\n)\n, row_count_missing_values AS (\n    SELECT COUNT(missing_month) AS row_count\n    FROM missing_values\n)\nSELECT * FROM row_count_missing_values WHERE row_count <> 4", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-09-02T15:15:02.583529Z", "completed_at": "2024-09-02T15:15:02.804720Z"}, {"name": "execute", "started_at": "2024-09-02T15:15:02.819304Z", "completed_at": "2024-09-02T15:15:07.050304Z"}], "thread_id": "Thread-8 (worker)", "execution_time": 4.695749998092651, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b6c393-0000-a053-0001-0e1a0005720e"}, "message": null, "failures": 0, "unique_id": "test.dbt_eda_tools.assert_missing_month", "compiled": true, "compiled_code": "\n\nWITH\nmissing_values AS (\n    \n  WITH\n  unique_dates AS (\n    SELECT\n      DISTINCT\n          date_month\n          \n    FROM dbt_db.dbt_schema.missing_month\n    \n  )\n  , dates_lagged AS (\n    SELECT *\n    , LAG(date_month,1) OVER (\n          ORDER BY\n          \n          date_month DESC) AS next_date_month\n    FROM unique_dates\n  )\n  SELECT\n      date_month\n      \n      , next_date_month\n      , ABS(datediff(\n        MONTH,\n        next_date_month,\n        date_month\n        )) AS missing_month\n  FROM dates_lagged\n  WHERE datediff(\n        MONTH,\n        next_date_month,\n        date_month\n        ) < -1\n\n)\n, row_count_missing_values AS (\n    SELECT COUNT(missing_month) AS row_count\n    FROM missing_values\n)\nSELECT * FROM row_count_missing_values WHERE row_count <> 1", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-09-02T15:15:02.503585Z", "completed_at": "2024-09-02T15:15:02.553385Z"}, {"name": "execute", "started_at": "2024-09-02T15:15:02.558932Z", "completed_at": "2024-09-02T15:15:07.236731Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 4.932844400405884, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b6c393-0000-a06a-0001-0e1a0005823a"}, "message": null, "failures": 0, "unique_id": "test.dbt_eda_tools.assert_missing_year", "compiled": true, "compiled_code": "\n\nWITH\nmissing_values AS (\n    \n  WITH\n  unique_dates AS (\n    SELECT\n      DISTINCT\n          date_year\n          \n    FROM dbt_db.dbt_schema.missing_year\n    \n  )\n  , dates_lagged AS (\n    SELECT *\n    , LAG(date_year,1) OVER (\n          ORDER BY\n          \n          date_year DESC) AS next_date_year\n    FROM unique_dates\n  )\n  SELECT\n      date_year\n      \n      , next_date_year\n      , ABS(datediff(\n        YEAR,\n        next_date_year,\n        date_year\n        )) AS missing_year\n  FROM dates_lagged\n  WHERE datediff(\n        YEAR,\n        next_date_year,\n        date_year\n        ) < -1\n\n)\n, row_count_missing_values AS (\n    SELECT COUNT(missing_year) AS row_count\n    FROM missing_values\n)\nSELECT * FROM row_count_missing_values WHERE row_count <> 1", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-09-02T15:15:06.319405Z", "completed_at": "2024-09-02T15:15:06.328959Z"}, {"name": "execute", "started_at": "2024-09-02T15:15:06.331600Z", "completed_at": "2024-09-02T15:15:08.659925Z"}], "thread_id": "Thread-9 (worker)", "execution_time": 2.481513500213623, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b6c393-0000-9fe4-0001-0e1a0005043e"}, "message": null, "failures": 0, "unique_id": "test.dbt_eda_tools.assert_missing_day_by_company", "compiled": true, "compiled_code": "\n\nWITH\nmissing_values AS (\n    \n  WITH\n  unique_dates AS (\n    SELECT\n      DISTINCT\n          date_day\n          \n              , (company_name) AS company_name\n          \n    FROM dbt_db.dbt_schema.missing_day\n    \n  )\n  , dates_lagged AS (\n    SELECT *\n    , LAG(date_day,1) OVER (\n          ORDER BY\n          \n              (company_name) DESC,\n          \n          date_day DESC) AS next_date_day\n    FROM unique_dates\n  )\n  SELECT\n      date_day\n      \n          , (company_name) AS company_name\n      \n      , next_date_day\n      , ABS(datediff(\n        DAY,\n        next_date_day,\n        date_day\n        )) AS missing_day\n  FROM dates_lagged\n  WHERE datediff(\n        DAY,\n        next_date_day,\n        date_day\n        ) < -1\n\n)\n, row_count_missing_values AS (\n    SELECT COUNT(missing_day) AS row_count\n    FROM missing_values\n)\nSELECT * FROM row_count_missing_values WHERE row_count <> 6", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-09-02T15:15:06.490675Z", "completed_at": "2024-09-02T15:15:06.507147Z"}, {"name": "execute", "started_at": "2024-09-02T15:15:06.508951Z", "completed_at": "2024-09-02T15:15:08.803465Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 2.460989236831665, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b6c393-0000-9ff3-0001-0e1a000542ae"}, "message": null, "failures": 0, "unique_id": "test.dbt_eda_tools.assert_missing_day_by_country", "compiled": true, "compiled_code": "\n\nWITH\nmissing_values AS (\n    \n  WITH\n  unique_dates AS (\n    SELECT\n      DISTINCT\n          date_day\n          \n              , (country) AS country\n          \n    FROM dbt_db.dbt_schema.missing_day\n    \n  )\n  , dates_lagged AS (\n    SELECT *\n    , LAG(date_day,1) OVER (\n          ORDER BY\n          \n              (country) DESC,\n          \n          date_day DESC) AS next_date_day\n    FROM unique_dates\n  )\n  SELECT\n      date_day\n      \n          , (country) AS country\n      \n      , next_date_day\n      , ABS(datediff(\n        DAY,\n        next_date_day,\n        date_day\n        )) AS missing_day\n  FROM dates_lagged\n  WHERE datediff(\n        DAY,\n        next_date_day,\n        date_day\n        ) < -1\n\n)\n, row_count_missing_values AS (\n    SELECT COUNT(missing_day) AS row_count\n    FROM missing_values\n)\nSELECT * FROM row_count_missing_values WHERE row_count <> 6", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-09-02T15:15:06.266414Z", "completed_at": "2024-09-02T15:15:06.281161Z"}, {"name": "execute", "started_at": "2024-09-02T15:15:06.282559Z", "completed_at": "2024-09-02T15:15:09.470539Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 3.3468167781829834, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b6c393-0000-a053-0001-0e1a00057212"}, "message": null, "failures": 0, "unique_id": "test.dbt_eda_tools.assert_missing_day", "compiled": true, "compiled_code": "\n\nWITH\nmissing_values AS (\n    \n  WITH\n  unique_dates AS (\n    SELECT\n      DISTINCT\n          date_day\n          \n    FROM dbt_db.dbt_schema.missing_day\n    \n  )\n  , dates_lagged AS (\n    SELECT *\n    , LAG(date_day,1) OVER (\n          ORDER BY\n          \n          date_day DESC) AS next_date_day\n    FROM unique_dates\n  )\n  SELECT\n      date_day\n      \n      , next_date_day\n      , ABS(datediff(\n        DAY,\n        next_date_day,\n        date_day\n        )) AS missing_day\n  FROM dates_lagged\n  WHERE datediff(\n        DAY,\n        next_date_day,\n        date_day\n        ) < -1\n\n)\n, row_count_missing_values AS (\n    SELECT COUNT(missing_day) AS row_count\n    FROM missing_values\n)\nSELECT * FROM row_count_missing_values WHERE row_count <> 1", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-09-02T15:15:07.442791Z", "completed_at": "2024-09-02T15:15:07.470449Z"}, {"name": "execute", "started_at": "2024-09-02T15:15:07.474126Z", "completed_at": "2024-09-02T15:15:09.553706Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 2.267240047454834, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b6c393-0000-9fa2-0001-0e1a000552fa"}, "message": null, "failures": 0, "unique_id": "test.dbt_eda_tools.assert_missing_day_by_country_company_filtered_both", "compiled": true, "compiled_code": "\n\nWITH\nmissing_values AS (\n    \n  WITH\n  unique_dates AS (\n    SELECT\n      DISTINCT\n          date_day\n          \n              , (country) AS country\n          \n              , (company_name) AS company_name\n          \n    FROM dbt_db.dbt_schema.missing_day\n    \n      \n          \n            WHERE 1=1\n          \n\n          \n          \n            \n              AND  country = 'DE'\n            \n\n          \n      \n          \n\n          \n          \n            \n              AND  company_name = 'A'\n            \n\n          \n      \n    \n  )\n  , dates_lagged AS (\n    SELECT *\n    , LAG(date_day,1) OVER (\n          ORDER BY\n          \n              (country) DESC,\n          \n              (company_name) DESC,\n          \n          date_day DESC) AS next_date_day\n    FROM unique_dates\n  )\n  SELECT\n      date_day\n      \n          , (country) AS country\n      \n          , (company_name) AS company_name\n      \n      , next_date_day\n      , ABS(datediff(\n        DAY,\n        next_date_day,\n        date_day\n        )) AS missing_day\n  FROM dates_lagged\n  WHERE datediff(\n        DAY,\n        next_date_day,\n        date_day\n        ) < -1\n\n)\n, row_count_missing_values AS (\n    SELECT COUNT(missing_day) AS row_count\n    FROM missing_values\n)\nSELECT * FROM row_count_missing_values WHERE row_count <> 2", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-09-02T15:15:07.269576Z", "completed_at": "2024-09-02T15:15:07.291106Z"}, {"name": "execute", "started_at": "2024-09-02T15:15:07.295429Z", "completed_at": "2024-09-02T15:15:09.752259Z"}], "thread_id": "Thread-8 (worker)", "execution_time": 2.6375958919525146, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b6c393-0000-a06a-0001-0e1a0005823e"}, "message": null, "failures": 0, "unique_id": "test.dbt_eda_tools.assert_missing_day_by_country_company", "compiled": true, "compiled_code": "\n\nWITH\nmissing_values AS (\n    \n  WITH\n  unique_dates AS (\n    SELECT\n      DISTINCT\n          date_day\n          \n              , (country) AS country\n          \n              , (company_name) AS company_name\n          \n    FROM dbt_db.dbt_schema.missing_day\n    \n  )\n  , dates_lagged AS (\n    SELECT *\n    , LAG(date_day,1) OVER (\n          ORDER BY\n          \n              (country) DESC,\n          \n              (company_name) DESC,\n          \n          date_day DESC) AS next_date_day\n    FROM unique_dates\n  )\n  SELECT\n      date_day\n      \n          , (country) AS country\n      \n          , (company_name) AS company_name\n      \n      , next_date_day\n      , ABS(datediff(\n        DAY,\n        next_date_day,\n        date_day\n        )) AS missing_day\n  FROM dates_lagged\n  WHERE datediff(\n        DAY,\n        next_date_day,\n        date_day\n        ) < -1\n\n)\n, row_count_missing_values AS (\n    SELECT COUNT(missing_day) AS row_count\n    FROM missing_values\n)\nSELECT * FROM row_count_missing_values WHERE row_count <> 35", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-09-02T15:15:08.958677Z", "completed_at": "2024-09-02T15:15:08.972681Z"}, {"name": "execute", "started_at": "2024-09-02T15:15:08.974976Z", "completed_at": "2024-09-02T15:15:11.372662Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 2.6813604831695557, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b6c393-0000-9fa2-0001-0e1a00055302"}, "message": null, "failures": 0, "unique_id": "test.dbt_eda_tools.assert_missing_day_by_country_company_numeric_filter", "compiled": true, "compiled_code": "\n\nWITH\nmissing_values AS (\n    \n  WITH\n  unique_dates AS (\n    SELECT\n      DISTINCT\n          date_day\n          \n              , (country) AS country\n          \n              , (company_name) AS company_name\n          \n    FROM dbt_db.dbt_schema.missing_day\n    \n      \n          \n            WHERE 1=1\n          \n\n          \n          \n            AND country IN ('DE', 'US')\n          \n      \n          \n\n          \n          \n            AND company_name IN ('GOG', 'A')\n          \n      \n          \n\n          \n          \n            \n              AND  str_length =3\n            \n\n          \n      \n    \n  )\n  , dates_lagged AS (\n    SELECT *\n    , LAG(date_day,1) OVER (\n          ORDER BY\n          \n              (country) DESC,\n          \n              (company_name) DESC,\n          \n          date_day DESC) AS next_date_day\n    FROM unique_dates\n  )\n  SELECT\n      date_day\n      \n          , (country) AS country\n      \n          , (company_name) AS company_name\n      \n      , next_date_day\n      , ABS(datediff(\n        DAY,\n        next_date_day,\n        date_day\n        )) AS missing_day\n  FROM dates_lagged\n  WHERE datediff(\n        DAY,\n        next_date_day,\n        date_day\n        ) < -1\n\n\n)\n, row_count_missing_values AS (\n    SELECT COUNT(missing_day) AS row_count\n    FROM missing_values\n)\n-- Only rows corresponding to company A are picked up as the str_length is set to 3\nSELECT * FROM row_count_missing_values WHERE row_count <> 3", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-09-02T15:15:08.819174Z", "completed_at": "2024-09-02T15:15:08.839905Z"}, {"name": "execute", "started_at": "2024-09-02T15:15:08.841752Z", "completed_at": "2024-09-02T15:15:11.931350Z"}], "thread_id": "Thread-9 (worker)", "execution_time": 3.2447562217712402, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b6c393-0000-a053-0001-0e1a0005721a"}, "message": null, "failures": 0, "unique_id": "test.dbt_eda_tools.assert_missing_day_by_country_company_filtered_country", "compiled": true, "compiled_code": "\n\nWITH\nmissing_values AS (\n    \n  WITH\n  unique_dates AS (\n    SELECT\n      DISTINCT\n          date_day\n          \n              , (country) AS country\n          \n              , (company_name) AS company_name\n          \n    FROM dbt_db.dbt_schema.missing_day\n    \n      \n          \n            WHERE 1=1\n          \n\n          \n          \n            \n              AND  country = 'DE'\n            \n\n          \n      \n    \n  )\n  , dates_lagged AS (\n    SELECT *\n    , LAG(date_day,1) OVER (\n          ORDER BY\n          \n              (country) DESC,\n          \n              (company_name) DESC,\n          \n          date_day DESC) AS next_date_day\n    FROM unique_dates\n  )\n  SELECT\n      date_day\n      \n          , (country) AS country\n      \n          , (company_name) AS company_name\n      \n      , next_date_day\n      , ABS(datediff(\n        DAY,\n        next_date_day,\n        date_day\n        )) AS missing_day\n  FROM dates_lagged\n  WHERE datediff(\n        DAY,\n        next_date_day,\n        date_day\n        ) < -1\n\n)\n, row_count_missing_values AS (\n    SELECT COUNT(missing_day) AS row_count\n    FROM missing_values\n)\nSELECT * FROM row_count_missing_values WHERE row_count <> 10", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-02T15:15:09.920972Z", "completed_at": "2024-09-02T15:15:09.945939Z"}, {"name": "execute", "started_at": "2024-09-02T15:15:09.949029Z", "completed_at": "2024-09-02T15:15:12.319458Z"}], "thread_id": "Thread-8 (worker)", "execution_time": 2.5400989055633545, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b6c393-0000-9fa2-0001-0e1a00055306"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.dbt_eda_tools.percent_of_total_ex2", "compiled": true, "compiled_code": "\n\nSELECT\n    company_name\n    , country\n    , count(str_length) AS count_str_length\n    -- the percentages are caclulated at the aggregation of company_name and not entire column\n    , \n\n  \n\n  \n    \n  \n\n      ROUND(\n        \n          DIV0NULL(\n            count(str_length)\n            ,\n            SUM(count(str_length)) OVER (PARTITION BY company_name)\n          )\n        \n      , 3)\n\n AS count_percent_level_company_name\n    , \n\n  \n\n  \n\n      ROUND(\n        \n          DIV0NULL(\n            COUNT(str_length)\n            ,\n            SUM(COUNT(str_length)) OVER ()\n          )\n        \n      , 2)\n\n AS count_percent_level_full_column\n\nFROM dbt_db.dbt_schema.data_aggregated\nGROUP BY 1,2\nORDER BY company_name, country, count(str_length)  DESC", "relation_name": "dbt_db.dbt_schema.percent_of_total_ex2"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-02T15:15:09.719346Z", "completed_at": "2024-09-02T15:15:09.757258Z"}, {"name": "execute", "started_at": "2024-09-02T15:15:09.760351Z", "completed_at": "2024-09-02T15:15:12.849421Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 3.333293914794922, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b6c393-0000-a053-0001-0e1a00057222"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.dbt_eda_tools.percent_of_total_ex1", "compiled": true, "compiled_code": "\n\nSELECT\n    country\n    , SUM(str_length) AS sum_2_str_length\n    -- example: sum\n    , \n\n  \n\n  \n\n      ROUND(\n        \n          DIV0NULL(\n            sum(str_length)\n            ,\n            SUM(sum(str_length)) OVER ()\n          )\n        \n      , 3)\n\n AS sum_percent\n\n    , COUNT(company_name) AS count_company_name\n    -- example: count\n    -- defaults to count if no aggregation function is specified and 1 decimal if no precision is specified\n\n    , \n\n  \n\n  \n\n      ROUND(\n        \n          DIV0NULL(\n            COUNT(company_name)\n            ,\n            SUM(COUNT(company_name)) OVER ()\n          )\n        \n      , 3)\n\n AS count_percent\n\n    , COUNT(DISTINCT company_name) AS count_distinct_company_name\n    -- example: countdistinct\n    , \n\n  \n\n  \n\n      ROUND(\n        \n            DIV0NULL(\n              COUNT(DISTINCT company_name)\n              ,\n              SUM(COUNT(DISTINCT company_name)) OVER ()\n            )\n        \n      , 3)\n\n AS count_distinct_percent\n\nFROM dbt_db.dbt_schema.data_aggregated\nGROUP BY 1\nORDER BY sum(str_length)  DESC", "relation_name": "dbt_db.dbt_schema.percent_of_total_ex1"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-02T15:15:11.654727Z", "completed_at": "2024-09-02T15:15:11.682978Z"}, {"name": "execute", "started_at": "2024-09-02T15:15:11.686034Z", "completed_at": "2024-09-02T15:15:13.462735Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.9934797286987305, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b6c393-0000-a06a-0001-0e1a0005824a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.dbt_eda_tools.get_missing_dates_ex2", "compiled": true, "compiled_code": "/**\n * Retrieves the missing dates in the date_month column of the missing_month model at the Monthly level granularity.\n *\n * @param {string} missing_day - The name of the model.\n * @param {string} date_day - The name of the column containing the dates.\n * @param {array} [dimensions] - An optional array of dimensions across which the missing dates are computed.\n * @param {object} [filters] - An optional filter object.\n * @param {string} [expected_frequency] - The interval to use when generating the missing dates (e.g. 'DAY', 'MONTH', 'YEAR').\n * @returns {rows} Rows of missing dates.\n */\n\n\n\n\n  WITH\n  unique_dates AS (\n    SELECT\n      DISTINCT\n          date_month\n          \n              , (country) AS country\n          \n    FROM dbt_db.dbt_schema.missing_month\n    \n  )\n  , dates_lagged AS (\n    SELECT *\n    , LAG(date_month,1) OVER (\n          ORDER BY\n          \n              (country) DESC,\n          \n          date_month DESC) AS next_date_month\n    FROM unique_dates\n  )\n  SELECT\n      date_month\n      \n          , (country) AS country\n      \n      , next_date_month\n      , ABS(datediff(\n        MONTH,\n        next_date_month,\n        date_month\n        )) AS missing_month\n  FROM dates_lagged\n  WHERE datediff(\n        MONTH,\n        next_date_month,\n        date_month\n        ) < -1\n", "relation_name": "dbt_db.dbt_schema.get_missing_dates_ex2"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-02T15:15:12.072361Z", "completed_at": "2024-09-02T15:15:12.085996Z"}, {"name": "execute", "started_at": "2024-09-02T15:15:12.087722Z", "completed_at": "2024-09-02T15:15:13.887871Z"}], "thread_id": "Thread-9 (worker)", "execution_time": 1.9278461933135986, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b6c393-0000-9fe4-0001-0e1a0005044a"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.dbt_eda_tools.get_missing_dates_ex1", "compiled": true, "compiled_code": "/**\n * Retrieves the missing dates in the date_day column of the missing_day model at the Day level granularity.\n *\n * @param {string} missing_day - The name of the model.\n * @param {string} date_day - The name of the column containing the dates.\n * @param {array} [dimensions] - An optional array of dimensions across which the missing dates are computed.\n * @param {object} [filters] - An optional filter object.\n * @param {string} [expected_frequency] - The interval to use when generating the missing dates (e.g. 'DAY', 'MONTH', 'YEAR').\n * @returns {rows} Rows of missing dates.\n */\n\n\n\n\n  WITH\n  unique_dates AS (\n    SELECT\n      DISTINCT\n          date_day\n          \n    FROM dbt_db.dbt_schema.missing_day\n    \n  )\n  , dates_lagged AS (\n    SELECT *\n    , LAG(date_day,1) OVER (\n          ORDER BY\n          \n          date_day DESC) AS next_date_day\n    FROM unique_dates\n  )\n  SELECT\n      date_day\n      \n      , next_date_day\n      , ABS(datediff(\n        DAY,\n        next_date_day,\n        date_day\n        )) AS missing_day\n  FROM dates_lagged\n  WHERE datediff(\n        DAY,\n        next_date_day,\n        date_day\n        ) < -1\n", "relation_name": "dbt_db.dbt_schema.get_missing_dates_ex1"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-02T15:15:12.472310Z", "completed_at": "2024-09-02T15:15:12.488462Z"}, {"name": "execute", "started_at": "2024-09-02T15:15:12.492196Z", "completed_at": "2024-09-02T15:15:14.402830Z"}], "thread_id": "Thread-8 (worker)", "execution_time": 2.026038646697998, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b6c393-0000-9ff3-0001-0e1a000542b6"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.dbt_eda_tools.get_missing_dates_ex3", "compiled": true, "compiled_code": "/**\n * Retrieves the missing dates in the date_day column of the missing_day model at the Day level granularity.\n *\n * @param {string} missing_day - The name of the model.\n * @param {string} date_day - The name of the column containing the dates.\n * @param {array} [dimensions] - An optional array of dimensions across which the missing dates are computed.\n * @param {object} [filters] - An optional filter object.\n * @param {string} [expected_frequency] - The interval to use when generating the missing dates (e.g. 'DAY', 'MONTH', 'YEAR').\n * @returns {rows} Rows of missing dates.\n */\n\n\n\n\n  WITH\n  unique_dates AS (\n    SELECT\n      DISTINCT\n          date_day\n          \n              , (country) AS country\n          \n              , (company_name) AS company_name\n          \n    FROM dbt_db.dbt_schema.missing_day\n    \n      \n          \n            WHERE 1=1\n          \n\n          \n          \n            AND country IN ('DE', 'US')\n          \n      \n          \n\n          \n          \n            \n              AND  company_name = 'MSFT'\n            \n\n          \n      \n          \n\n          \n          \n            \n              AND  str_length >2\n            \n\n          \n      \n    \n  )\n  , dates_lagged AS (\n    SELECT *\n    , LAG(date_day,1) OVER (\n          ORDER BY\n          \n              (country) DESC,\n          \n              (company_name) DESC,\n          \n          date_day DESC) AS next_date_day\n    FROM unique_dates\n  )\n  SELECT\n      date_day\n      \n          , (country) AS country\n      \n          , (company_name) AS company_name\n      \n      , next_date_day\n      , ABS(datediff(\n        DAY,\n        next_date_day,\n        date_day\n        )) AS missing_day\n  FROM dates_lagged\n  WHERE datediff(\n        DAY,\n        next_date_day,\n        date_day\n        ) < -1\n", "relation_name": "dbt_db.dbt_schema.get_missing_dates_ex3"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-02T15:15:13.074578Z", "completed_at": "2024-09-02T15:15:13.096136Z"}, {"name": "execute", "started_at": "2024-09-02T15:15:13.098822Z", "completed_at": "2024-09-02T15:15:14.579467Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.6090326309204102, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b6c393-0000-9ff3-0001-0e1a000542ba"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.dbt_eda_tools.get_missing_dates_ex4", "compiled": true, "compiled_code": "/**\n * Retrieves the missing dates in the date_day column of the missing_day model at the Day level granularity.\n *\n * @param {string} missing_day - The name of the model.\n * @param {string} date_day - The name of the column containing the dates.\n * @param {array} [dimensions] - An optional array of dimensions across which the missing dates are computed.\n * @param {object} [filters] - An optional filter object.\n * @param {string} [expected_frequency] - The interval to use when generating the missing dates (e.g. 'DAY', 'MONTH', 'YEAR').\n * @returns {rows} Rows of missing dates.\n */\n\n\n\n\n  WITH\n  unique_dates AS (\n    SELECT\n      DISTINCT\n          date_day\n          \n              , (country) AS country\n          \n              , (company_name) AS company_name\n          \n    FROM dbt_db.dbt_schema.missing_day\n    \n      \n          \n            WHERE 1=1\n          \n\n          \n          \n            AND country IN ('DE', 'US')\n          \n      \n          \n\n          \n          \n            AND company_name IN ('GOG', 'A')\n          \n      \n          \n\n          \n          \n            \n              AND  str_length =3\n            \n\n          \n      \n    \n  )\n  , dates_lagged AS (\n    SELECT *\n    , LAG(date_day,1) OVER (\n          ORDER BY\n          \n              (country) DESC,\n          \n              (company_name) DESC,\n          \n          date_day DESC) AS next_date_day\n    FROM unique_dates\n  )\n  SELECT\n      date_day\n      \n          , (country) AS country\n      \n          , (company_name) AS company_name\n      \n      , next_date_day\n      , ABS(datediff(\n        DAY,\n        next_date_day,\n        date_day\n        )) AS missing_day\n  FROM dates_lagged\n  WHERE datediff(\n        DAY,\n        next_date_day,\n        date_day\n        ) < -1\n", "relation_name": "dbt_db.dbt_schema.get_missing_dates_ex4"}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-09-02T15:15:03.038710Z", "completed_at": "2024-09-02T15:15:12.986593Z"}, {"name": "execute", "started_at": "2024-09-02T15:15:12.993249Z", "completed_at": "2024-09-02T15:15:16.344505Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 13.524670362472534, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b6c393-0000-9fa2-0001-0e1a00055312"}, "message": null, "failures": 0, "unique_id": "test.dbt_eda_tools.assert_data_describe_include", "compiled": true, "compiled_code": "\n\nWITH\ndescribe_dataframe AS (\n    \n\n    \n\n    \n    \n    \n    \n\n    \n\n    WITH\n    \n    dummy AS (SELECT 1)\n    \n    \n        , \n\n    \n    \n\n    \n    \n    \n\n    \n    \n    \n        \n        \n\n            \n\n\n            column_detail_COMPANY_NAME AS (\n                SELECT\n                    1\n                    \n                        , COMPANY_NAME\n                        , COUNT(*) AS cnt\n                    \n\n\n                    , SUM(COUNT(COMPANY_NAME)) OVER () AS cnt_total\n                    , SUM(COUNT(DISTINCT COMPANY_NAME)) OVER () AS cnt_unique\n                    , COUNT_IF(COMPANY_NAME IS NULL) AS cnt_null\n\n                FROM dbt_db.dbt_schema.data_generator_enriched_describe\n\n                GROUP BY ALL\n\n                \n                    LIMIT 10\n                \n\n            ) ,\n        \n\n            \n\n\n            column_detail_COUNTRY AS (\n                SELECT\n                    1\n                    \n                        , COUNTRY\n                        , COUNT(*) AS cnt\n                    \n\n\n                    , SUM(COUNT(COUNTRY)) OVER () AS cnt_total\n                    , SUM(COUNT(DISTINCT COUNTRY)) OVER () AS cnt_unique\n                    , COUNT_IF(COUNTRY IS NULL) AS cnt_null\n\n                FROM dbt_db.dbt_schema.data_generator_enriched_describe\n\n                GROUP BY ALL\n\n                \n                    LIMIT 10\n                \n\n            ) \n        \n\n        \n        , column_detail_info_text AS (\n            \n            \n            SELECT\n                'COMPANY_NAME' AS column_name\n                , OBJECT_CONSTRUCT(\n                    'column_name', 'COMPANY_NAME'\n                    , 'count' , MIN(cnt_total)\n                    , 'count_null' , MIN(cnt_null)\n                    \n                        \n                            , 'unique' , MIN(cnt_unique)\n                        \n                        , 'value_counts_top10',\n                            OBJECT_AGG\n                                (\n                                    COALESCE(COMPANY_NAME,'NULL'):: STRING\n                                , cnt)\n                                \n                    \n                ) AS detail\n            FROM column_detail_COMPANY_NAME\n            UNION ALL\n        \n            \n            SELECT\n                'COUNTRY' AS column_name\n                , OBJECT_CONSTRUCT(\n                    'column_name', 'COUNTRY'\n                    , 'count' , MIN(cnt_total)\n                    , 'count_null' , MIN(cnt_null)\n                    \n                        \n                            , 'unique' , MIN(cnt_unique)\n                        \n                        , 'value_counts_top10',\n                            OBJECT_AGG\n                                (\n                                    COALESCE(COUNTRY,'NULL'):: STRING\n                                , cnt)\n                                \n                    \n                ) AS detail\n            FROM column_detail_COUNTRY\n            \n        \n\n        )\n    \n\n\n    \n        , \n\n    \n    \n\n    \n    \n    \n\n    \n    \n    \n        \n        \n\n            \n\n\n            column_detail_IS_SHORT_STRING AS (\n                SELECT\n                    1\n                    \n                        , IS_SHORT_STRING\n                        , COUNT(*) AS cnt\n                    \n\n\n                    , SUM(COUNT(IS_SHORT_STRING)) OVER () AS cnt_total\n                    , SUM(COUNT(DISTINCT IS_SHORT_STRING)) OVER () AS cnt_unique\n                    , COUNT_IF(IS_SHORT_STRING IS NULL) AS cnt_null\n\n                FROM dbt_db.dbt_schema.data_generator_enriched_describe\n\n                GROUP BY ALL\n\n                \n\n            ) \n        \n\n        \n        , column_detail_info_boolean AS (\n            \n            \n            SELECT\n                'IS_SHORT_STRING' AS column_name\n                , OBJECT_CONSTRUCT(\n                    'column_name', 'IS_SHORT_STRING'\n                    , 'count' , MIN(cnt_total)\n                    , 'count_null' , MIN(cnt_null)\n                    \n                        \n                        , 'value_counts_top10',\n                            OBJECT_AGG\n                                (\n                                    COALESCE(IS_SHORT_STRING,'NULL'):: STRING\n                                , cnt)\n                                \n                    \n                ) AS detail\n            FROM column_detail_IS_SHORT_STRING\n            \n        \n\n        )\n    \n\n\n    \n        , \n\n    \n    \n\n    \n    \n    \n\n    \n    \n    \n        \n        \n\n            \n\n\n            column_detail_STR_LENGTH AS (\n                SELECT\n                    1\n                    \n                            , MIN(STR_LENGTH) AS min\n                            , MAX(STR_LENGTH) AS max\n                            \n                                , ROUND(AVG(STR_LENGTH),4) AS avg\n                                \n                                , ROUND(TO_VARCHAR(APPROX_PERCENTILE(STR_LENGTH, 0.25),'999.999999'),4) AS percentile_25\n                                , ROUND(TO_VARCHAR(APPROX_PERCENTILE(STR_LENGTH, 0.5),'999.999999'),4) AS percentile_50\n                                , ROUND(TO_VARCHAR(APPROX_PERCENTILE(STR_LENGTH, 0.75),'999.999999'),4) AS percentile_75\n                                \n                            \n                    \n\n\n                    , SUM(COUNT(STR_LENGTH)) OVER () AS cnt_total\n                    , SUM(COUNT(DISTINCT STR_LENGTH)) OVER () AS cnt_unique\n                    , COUNT_IF(STR_LENGTH IS NULL) AS cnt_null\n\n                FROM dbt_db.dbt_schema.data_generator_enriched_describe\n\n                GROUP BY ALL\n\n                \n\n            ) \n        \n\n        \n        , column_detail_info_numeric AS (\n            \n            \n            SELECT\n                'STR_LENGTH' AS column_name\n                , OBJECT_CONSTRUCT(\n                    'column_name', 'STR_LENGTH'\n                    , 'count' , MIN(cnt_total)\n                    , 'count_null' , MIN(cnt_null)\n                    \n                        , 'min' , MIN(min)\n                        , 'max' , MIN(max)\n                        \n                            , 'mean' , MIN(avg)\n                            , 'percentile_25' , MIN(percentile_25)\n                            , 'percentile_50' , MIN(percentile_50)\n                            , 'percentile_75' , MIN(percentile_75)\n                        \n                    \n                ) AS detail\n            FROM column_detail_STR_LENGTH\n            \n        \n\n        )\n    \n\n\n    \n\n    \n        \n\n\n\n\n\n    , unioned_data AS (\n            \n                SELECT\n                   'text' AS dtype\n                    , * FROM\n                column_detail_info_text\n                WHERE column_name != ''\n                \n                    UNION ALL\n                \n            \n                SELECT\n                   'boolean' AS dtype\n                    , * FROM\n                column_detail_info_boolean\n                WHERE column_name != ''\n                \n                    UNION ALL\n                \n            \n                SELECT\n                   'numeric' AS dtype\n                    , * FROM\n                column_detail_info_numeric\n                WHERE column_name != ''\n                \n            \n        )\n        \n        , unpivoted_data AS (\n                SELECT\n                    column_name\n                    , dtype\n                    , key AS pivot_key\n                    , value AS pivot_value\n                FROM\n            \n                unioned_data\n                , LATERAL FLATTEN(input => detail) f\n            \n\n        )\n        SELECT\n            column_name\n            , dtype\n            , \"'count'\"\n            , \"'count_null'\"\n            , ROUND(DIV0NULL(\n                \"'count_null'\"::double\n                , \"'count'\"::double+\"'count_null'\"::double\n            ),3) AS percent_null\n            , * EXCLUDE(column_name, dtype\n                , \"'count'\"\n                , \"'count_null'\"\n            )\n        FROM\n        unpivoted_data\n        PIVOT(MIN(pivot_value) FOR pivot_key IN (ANY))\n        ORDER BY dtype\n\n\n    \n\n\n)\nSELECT * FROM describe_dataframe\nWHERE\n    1=1\n    -- filtered out the date column\n    AND\n    (\n        (\n        column_name NOT IN ('IS_SHORT_STRING', 'STR_LENGTH', 'COMPANY_NAME', 'COUNTRY')\n        )\n    )", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-09-02T15:15:02.944427Z", "completed_at": "2024-09-02T15:15:16.108985Z"}, {"name": "execute", "started_at": "2024-09-02T15:15:16.110937Z", "completed_at": "2024-09-02T15:15:19.893415Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 17.107986211776733, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b6c393-0000-9ff3-0001-0e1a000542be"}, "message": null, "failures": 0, "unique_id": "test.dbt_eda_tools.assert_data_describe_all", "compiled": true, "compiled_code": "\n\nWITH\ndescribe_dataframe AS (\n    \n\n    \n\n    \n    \n    \n    \n\n    \n\n    WITH\n    \n    dummy AS (SELECT 1)\n    \n    \n        , \n\n    \n    \n\n    \n    \n    \n\n    \n    \n    \n        \n        \n\n            \n\n\n            column_detail_STR_LENGTH AS (\n                SELECT\n                    1\n                    \n                            , MIN(STR_LENGTH) AS min\n                            , MAX(STR_LENGTH) AS max\n                            \n                                , ROUND(AVG(STR_LENGTH),4) AS avg\n                                \n                                , ROUND(TO_VARCHAR(APPROX_PERCENTILE(STR_LENGTH, 0.25),'999.999999'),4) AS percentile_25\n                                , ROUND(TO_VARCHAR(APPROX_PERCENTILE(STR_LENGTH, 0.5),'999.999999'),4) AS percentile_50\n                                , ROUND(TO_VARCHAR(APPROX_PERCENTILE(STR_LENGTH, 0.75),'999.999999'),4) AS percentile_75\n                                \n                            \n                    \n\n\n                    , SUM(COUNT(STR_LENGTH)) OVER () AS cnt_total\n                    , SUM(COUNT(DISTINCT STR_LENGTH)) OVER () AS cnt_unique\n                    , COUNT_IF(STR_LENGTH IS NULL) AS cnt_null\n\n                FROM dbt_db.dbt_schema.data_generator_enriched_describe\n\n                GROUP BY ALL\n\n                \n\n            ) \n        \n\n        \n        , column_detail_info_numeric AS (\n            \n            \n            SELECT\n                'STR_LENGTH' AS column_name\n                , OBJECT_CONSTRUCT(\n                    'column_name', 'STR_LENGTH'\n                    , 'count' , MIN(cnt_total)\n                    , 'count_null' , MIN(cnt_null)\n                    \n                        , 'min' , MIN(min)\n                        , 'max' , MIN(max)\n                        \n                            , 'mean' , MIN(avg)\n                            , 'percentile_25' , MIN(percentile_25)\n                            , 'percentile_50' , MIN(percentile_50)\n                            , 'percentile_75' , MIN(percentile_75)\n                        \n                    \n                ) AS detail\n            FROM column_detail_STR_LENGTH\n            \n        \n\n        )\n    \n\n\n    \n        , \n\n    \n    \n\n    \n    \n    \n\n    \n    \n    \n        \n        \n\n            \n\n\n            column_detail_COMPANY_NAME AS (\n                SELECT\n                    1\n                    \n                        , COMPANY_NAME\n                        , COUNT(*) AS cnt\n                    \n\n\n                    , SUM(COUNT(COMPANY_NAME)) OVER () AS cnt_total\n                    , SUM(COUNT(DISTINCT COMPANY_NAME)) OVER () AS cnt_unique\n                    , COUNT_IF(COMPANY_NAME IS NULL) AS cnt_null\n\n                FROM dbt_db.dbt_schema.data_generator_enriched_describe\n\n                GROUP BY ALL\n\n                \n                    LIMIT 10\n                \n\n            ) ,\n        \n\n            \n\n\n            column_detail_COUNTRY AS (\n                SELECT\n                    1\n                    \n                        , COUNTRY\n                        , COUNT(*) AS cnt\n                    \n\n\n                    , SUM(COUNT(COUNTRY)) OVER () AS cnt_total\n                    , SUM(COUNT(DISTINCT COUNTRY)) OVER () AS cnt_unique\n                    , COUNT_IF(COUNTRY IS NULL) AS cnt_null\n\n                FROM dbt_db.dbt_schema.data_generator_enriched_describe\n\n                GROUP BY ALL\n\n                \n                    LIMIT 10\n                \n\n            ) \n        \n\n        \n        , column_detail_info_text AS (\n            \n            \n            SELECT\n                'COMPANY_NAME' AS column_name\n                , OBJECT_CONSTRUCT(\n                    'column_name', 'COMPANY_NAME'\n                    , 'count' , MIN(cnt_total)\n                    , 'count_null' , MIN(cnt_null)\n                    \n                        \n                            , 'unique' , MIN(cnt_unique)\n                        \n                        , 'value_counts_top10',\n                            OBJECT_AGG\n                                (\n                                    COALESCE(COMPANY_NAME,'NULL'):: STRING\n                                , cnt)\n                                \n                    \n                ) AS detail\n            FROM column_detail_COMPANY_NAME\n            UNION ALL\n        \n            \n            SELECT\n                'COUNTRY' AS column_name\n                , OBJECT_CONSTRUCT(\n                    'column_name', 'COUNTRY'\n                    , 'count' , MIN(cnt_total)\n                    , 'count_null' , MIN(cnt_null)\n                    \n                        \n                            , 'unique' , MIN(cnt_unique)\n                        \n                        , 'value_counts_top10',\n                            OBJECT_AGG\n                                (\n                                    COALESCE(COUNTRY,'NULL'):: STRING\n                                , cnt)\n                                \n                    \n                ) AS detail\n            FROM column_detail_COUNTRY\n            \n        \n\n        )\n    \n\n\n    \n        , \n\n    \n    \n\n    \n    \n    \n\n    \n    \n    \n        \n        \n\n            \n                \n            \n\n\n            column_detail_DATE_DAY AS (\n                SELECT\n                    1\n                    \n                            , MIN(DATE_DAY) AS min\n                            , MAX(DATE_DAY) AS max\n                            \n                                , MIN('Daily') AS estimated_granularity\n                                , MIN(1.000) AS estimated_granularity_confidence\n                            \n                    \n\n\n                    , SUM(COUNT(DATE_DAY)) OVER () AS cnt_total\n                    , SUM(COUNT(DISTINCT DATE_DAY)) OVER () AS cnt_unique\n                    , COUNT_IF(DATE_DAY IS NULL) AS cnt_null\n\n                FROM dbt_db.dbt_schema.data_generator_enriched_describe\n\n                GROUP BY ALL\n\n                \n\n            ) \n        \n\n        \n        , column_detail_info_date AS (\n            \n            \n            SELECT\n                'DATE_DAY' AS column_name\n                , OBJECT_CONSTRUCT(\n                    'column_name', 'DATE_DAY'\n                    , 'count' , MIN(cnt_total)\n                    , 'count_null' , MIN(cnt_null)\n                    \n                        , 'min' , MIN(min)\n                        , 'max' , MIN(max)\n                        \n                            , 'estimated_granularity' , MIN(estimated_granularity)\n                            , 'estimated_granularity_confidence' , MIN(estimated_granularity_confidence)\n                        \n                    \n                ) AS detail\n            FROM column_detail_DATE_DAY\n            \n        \n\n        )\n    \n\n\n    \n        , \n\n    \n    \n\n    \n    \n    \n\n    \n    \n    \n        \n        \n\n            \n\n\n            column_detail_IS_SHORT_STRING AS (\n                SELECT\n                    1\n                    \n                        , IS_SHORT_STRING\n                        , COUNT(*) AS cnt\n                    \n\n\n                    , SUM(COUNT(IS_SHORT_STRING)) OVER () AS cnt_total\n                    , SUM(COUNT(DISTINCT IS_SHORT_STRING)) OVER () AS cnt_unique\n                    , COUNT_IF(IS_SHORT_STRING IS NULL) AS cnt_null\n\n                FROM dbt_db.dbt_schema.data_generator_enriched_describe\n\n                GROUP BY ALL\n\n                \n\n            ) \n        \n\n        \n        , column_detail_info_boolean AS (\n            \n            \n            SELECT\n                'IS_SHORT_STRING' AS column_name\n                , OBJECT_CONSTRUCT(\n                    'column_name', 'IS_SHORT_STRING'\n                    , 'count' , MIN(cnt_total)\n                    , 'count_null' , MIN(cnt_null)\n                    \n                        \n                        , 'value_counts_top10',\n                            OBJECT_AGG\n                                (\n                                    COALESCE(IS_SHORT_STRING,'NULL'):: STRING\n                                , cnt)\n                                \n                    \n                ) AS detail\n            FROM column_detail_IS_SHORT_STRING\n            \n        \n\n        )\n    \n\n\n    \n\n    \n        \n\n\n\n\n\n    , unioned_data AS (\n            \n                SELECT\n                   'numeric' AS dtype\n                    , * FROM\n                column_detail_info_numeric\n                WHERE column_name != ''\n                \n                    UNION ALL\n                \n            \n                SELECT\n                   'text' AS dtype\n                    , * FROM\n                column_detail_info_text\n                WHERE column_name != ''\n                \n                    UNION ALL\n                \n            \n                SELECT\n                   'date' AS dtype\n                    , * FROM\n                column_detail_info_date\n                WHERE column_name != ''\n                \n                    UNION ALL\n                \n            \n                SELECT\n                   'boolean' AS dtype\n                    , * FROM\n                column_detail_info_boolean\n                WHERE column_name != ''\n                \n            \n        )\n        \n        , unpivoted_data AS (\n                SELECT\n                    column_name\n                    , dtype\n                    , key AS pivot_key\n                    , value AS pivot_value\n                FROM\n            \n                unioned_data\n                , LATERAL FLATTEN(input => detail) f\n            \n\n        )\n        SELECT\n            column_name\n            , dtype\n            , \"'count'\"\n            , \"'count_null'\"\n            , ROUND(DIV0NULL(\n                \"'count_null'\"::double\n                , \"'count'\"::double+\"'count_null'\"::double\n            ),3) AS percent_null\n            , * EXCLUDE(column_name, dtype\n                , \"'count'\"\n                , \"'count_null'\"\n            )\n        FROM\n        unpivoted_data\n        PIVOT(MIN(pivot_value) FOR pivot_key IN (ANY))\n        ORDER BY dtype\n\n\n    \n\n\n)\nSELECT * FROM describe_dataframe\nWHERE\n    1=1\n    -- 5 column names as rows\n    AND\n    (\n        (\n        column_name NOT IN ('IS_SHORT_STRING', 'DATE_DAY', 'STR_LENGTH', 'COMPANY_NAME', 'COUNTRY')\n        )\n        OR column_name = 'IS_SHORT_STRING' AND NOT (\n            dtype = 'boolean' AND \"'count'\"=54800 AND \"'unique'\"=5\n            AND \"'value_counts_top10'\" = PARSE_JSON('{\"false\": 43840, \"true\": 10960}')\n        )\n        OR column_name = 'COMPANY_NAME' AND NOT (\n            dtype = 'text' AND \"'count'\"=54800 AND \"'unique'\"=5\n            AND \"'value_counts_top10'\" = PARSE_JSON('{\"A\": 10960,\"AMZN\": 10960,\"FB\": 10960,\"GOG\": 10960,\"MSFT\": 10960}')\n        )\n        OR column_name = 'COUNTRY' AND NOT (\n            dtype = 'text' AND \"'count'\"=54800 AND \"'unique'\"=5\n            AND \"'value_counts_top10'\" = PARSE_JSON('{\"CA\": 10960,\"DE\": 10960,\"FR\": 10960,\"GB\": 10960,\"US\": 10960}')\n        )\n        OR column_name = 'STR_LENGTH' AND NOT (\n            dtype = 'numeric' AND \"'count'\"=54800 AND \"'unique'\"=5\n            AND \"'max'\" = 6 AND \"'min'\" = 3 AND \"'mean'\" = 4.8\n            AND \"'percentile_25'\" = 4 AND \"'percentile_50'\" = 5 AND \"'percentile_75'\" = 6\n        )\n        OR column_name = 'DATE_DAY' AND NOT (\n            dtype = 'date' AND \"'count'\"=54800 AND \"'estimated_granularity'\"='Daily' AND \"'estimated_granularity_confidence'\"= 1\n            AND \"'max'\" = '2024-12-31' AND \"'min'\" = '2019-01-01'\n        )\n    )", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-09-02T15:15:02.241337Z", "completed_at": "2024-09-02T15:15:15.135346Z"}, {"name": "execute", "started_at": "2024-09-02T15:15:15.137411Z", "completed_at": "2024-09-02T15:15:20.765508Z"}], "thread_id": "Thread-10 (worker)", "execution_time": 18.60927653312683, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b6c393-0000-a06a-0001-0e1a0005824e"}, "message": null, "failures": 0, "unique_id": "test.dbt_eda_tools.assert_data_describe_column_details_estimated_granularity", "compiled": true, "compiled_code": "\n\nWITH\ndescribe_dataframe AS (\n    \n\n    \n\n    \n    \n    \n    \n\n    \n\n    WITH\n    \n    dummy AS (SELECT 1)\n    \n        , \n    \n    \n    meta_data AS (\n        -- Need to explicitly cast the type before transposing the data\n        SELECT\n        column_name\n        , data_type\n        , COUNT(*) OVER ():: STRING AS nbr_of_columns\n        , CASE\n                \n                    \n                        WHEN DATA_TYPE IN ('VARCHAR', 'CHAR', 'CHARACTER', 'STRING', 'TEXT') THEN 'text'\n                    \n                \n                    \n                        WHEN DATA_TYPE IN ('DATE', 'DATETIME', 'TIMESTAMP', 'TIMESTAMP_LTZ', 'TIMESTAMP_NTZ', 'TIMESTAMP_TZ') THEN 'date'\n                    \n                \n                    \n                        WHEN DATA_TYPE IN ('NUMBER', 'DECIMAL', 'NUMERIC', 'INT', 'INTEGER', 'BIGINT', 'SMALLINT', 'FLOAT', 'FLOAT4', 'FLOAT8', 'DOUBLE', 'DOUBLE PRECISION', 'REAL', 'INT64', 'TINYINT', 'BYETEINT', 'BIGDECIMAL', 'FLOAT64') THEN 'numeric'\n                    \n                \n                    \n                        WHEN DATA_TYPE IN ('BOOLEAN', 'BOOL') THEN 'boolean'\n                    \n                \n                    \n                        WHEN DATA_TYPE IN ('TIME', 'NEEDSTOBEARRAY') THEN 'time'\n                    \n                \n                    \n                \n                    \n                \n                    \n                \n                    \n                \n        END AS data_type_input\n\n        \n            \n                , COUNT_IF(DATA_TYPE IN ('VARCHAR', 'CHAR', 'CHARACTER', 'STRING', 'TEXT')) OVER () :: STRING  AS nbr_of_text_columns\n            \n        \n            \n                , COUNT_IF(DATA_TYPE IN ('DATE', 'DATETIME', 'TIMESTAMP', 'TIMESTAMP_LTZ', 'TIMESTAMP_NTZ', 'TIMESTAMP_TZ')) OVER () :: STRING  AS nbr_of_date_columns\n            \n        \n            \n                , COUNT_IF(DATA_TYPE IN ('NUMBER', 'DECIMAL', 'NUMERIC', 'INT', 'INTEGER', 'BIGINT', 'SMALLINT', 'FLOAT', 'FLOAT4', 'FLOAT8', 'DOUBLE', 'DOUBLE PRECISION', 'REAL', 'INT64', 'TINYINT', 'BYETEINT', 'BIGDECIMAL', 'FLOAT64')) OVER () :: STRING  AS nbr_of_numeric_columns\n            \n        \n            \n                , COUNT_IF(DATA_TYPE IN ('BOOLEAN', 'BOOL')) OVER () :: STRING  AS nbr_of_boolean_columns\n            \n        \n            \n                , COUNT_IF(DATA_TYPE IN ('TIME', 'NEEDSTOBEARRAY')) OVER () :: STRING  AS nbr_of_time_columns\n            \n        \n            \n        \n            \n        \n            \n        \n            \n        \n\n        FROM INFORMATION_SCHEMA.TABLES t\n        INNER JOIN INFORMATION_SCHEMA.COLUMNS c ON\n                c.table_schema = t.table_schema AND c.table_name = t.table_name\n                WHERE t.table_name = 'DATA_AGGREGATED_MIXED_GRANULARITY'\n    )\n\n\n        \n        , \n\n    \n\n        meta_data_unique AS (\n            SELECT\n                    DISTINCT\n                    'dataset' AS identifier\n                    , NULL AS detail\n                    , nbr_of_columns\n                    , nbr_of_text_columns\n                    , nbr_of_date_columns\n                    , nbr_of_numeric_columns\n                    , nbr_of_boolean_columns\n                    , nbr_of_time_columns\n                FROM meta_data\n        )\n        , dataset_info AS (\n            SELECT\n                    CASE LOWER(meta_data_key)\n                            WHEN 'nbr_of_columns' THEN 1\n                            WHEN 'nbr_of_text_columns' THEN 2\n                            WHEN 'nbr_of_date_columns' THEN 3\n                            WHEN 'nbr_of_numeric_columns' THEN 4\n                            WHEN 'nbr_of_boolean_columns' THEN 5\n                            WHEN 'nbr_of_time_columns' THEN 6\n                    END AS index_pos\n                    , meta_data_key\n                    , identifier\n                    , detail\n                    , meta_data_value:: STRING AS meta_data_value\n                FROM meta_data_unique\n                UNPIVOT (meta_data_value FOR meta_data_key IN (nbr_of_columns, nbr_of_text_columns, nbr_of_date_columns, nbr_of_numeric_columns,nbr_of_boolean_columns,nbr_of_time_columns))\n        )\n\n    \n\n\n        \n        , \n\n    \n        rowcount_info AS (\n            SELECT\n                    0 AS index_pos\n                    , UPPER('nbr_of_rows') AS meta_data_key\n                    , 'dataset' AS identifier\n                    , NULL AS detail\n                    , COUNT(*):: STRING AS meta_data_value\n            FROM dbt_db.dbt_schema.data_aggregated_mixed_granularity\n            GROUP BY ALL\n        )\n    \n\n\n        \n        , \n\n    \n        column_info AS (\n            SELECT\n                20 + ROW_NUMBER() OVER (ORDER BY data_type) AS index_pos\n                , column_name AS meta_data_key\n                , 'column' AS identifier\n                , NULL AS detail\n                , data_type:: STRING AS meta_data_value\n            FROM meta_data\n        )\n    \n\n\n        \n        , \n    \n    assembled_result AS (\n        \n            SELECT\n                \n                     index_pos\n                \n                    , meta_data_key\n                \n                    , meta_data_value\n                \n                    , identifier\n                \n                    , detail\n                \n            FROM\n            dataset_info\n            UNION ALL\n        \n            SELECT\n                \n                     index_pos\n                \n                    , meta_data_key\n                \n                    , meta_data_value\n                \n                    , identifier\n                \n                    , detail\n                \n            FROM\n            rowcount_info\n            UNION ALL\n        \n            SELECT\n                \n                     index_pos\n                \n                    , meta_data_key\n                \n                    , meta_data_value\n                \n                    , identifier\n                \n                    , detail\n                \n            FROM\n            column_info\n            \n        \n    )\n\n\n    \n    \n        , \n\n    \n    \n\n    \n    \n    \n\n    \n    \n    \n        column_detail_info_numeric AS (\n            SELECT\n                '' AS column_name\n                , (NULL) AS detail\n        )\n    \n\n\n    \n        , \n\n    \n    \n\n    \n    \n    \n\n    \n    \n    \n        \n        \n\n            \n\n\n            column_detail_COMPANY_NAME AS (\n                SELECT\n                    1\n                    \n                        , COMPANY_NAME\n                        , COUNT(*) AS cnt\n                    \n\n\n                    , SUM(COUNT(COMPANY_NAME)) OVER () AS cnt_total\n                    , SUM(COUNT(DISTINCT COMPANY_NAME)) OVER () AS cnt_unique\n                    , COUNT_IF(COMPANY_NAME IS NULL) AS cnt_null\n\n                FROM dbt_db.dbt_schema.data_aggregated_mixed_granularity\n\n                GROUP BY ALL\n\n                \n                    LIMIT 10\n                \n\n            ) ,\n        \n\n            \n\n\n            column_detail_COUNTRY AS (\n                SELECT\n                    1\n                    \n                        , COUNTRY\n                        , COUNT(*) AS cnt\n                    \n\n\n                    , SUM(COUNT(COUNTRY)) OVER () AS cnt_total\n                    , SUM(COUNT(DISTINCT COUNTRY)) OVER () AS cnt_unique\n                    , COUNT_IF(COUNTRY IS NULL) AS cnt_null\n\n                FROM dbt_db.dbt_schema.data_aggregated_mixed_granularity\n\n                GROUP BY ALL\n\n                \n                    LIMIT 10\n                \n\n            ) \n        \n\n        \n        , column_detail_info_text AS (\n            \n            \n            SELECT\n                'COMPANY_NAME' AS column_name\n                , OBJECT_CONSTRUCT(\n                    'column_name', 'COMPANY_NAME'\n                    , 'count' , MIN(cnt_total)\n                    , 'count_null' , MIN(cnt_null)\n                    \n                        \n                            , 'unique' , MIN(cnt_unique)\n                        \n                        , 'value_counts_top10',\n                            OBJECT_AGG\n                                (\n                                    COALESCE(COMPANY_NAME,'NULL'):: STRING\n                                , cnt)\n                                \n                    \n                ) AS detail\n            FROM column_detail_COMPANY_NAME\n            UNION ALL\n        \n            \n            SELECT\n                'COUNTRY' AS column_name\n                , OBJECT_CONSTRUCT(\n                    'column_name', 'COUNTRY'\n                    , 'count' , MIN(cnt_total)\n                    , 'count_null' , MIN(cnt_null)\n                    \n                        \n                            , 'unique' , MIN(cnt_unique)\n                        \n                        , 'value_counts_top10',\n                            OBJECT_AGG\n                                (\n                                    COALESCE(COUNTRY,'NULL'):: STRING\n                                , cnt)\n                                \n                    \n                ) AS detail\n            FROM column_detail_COUNTRY\n            \n        \n\n        )\n    \n\n\n    \n        , \n\n    \n    \n\n    \n    \n    \n\n    \n    \n    \n        \n        \n\n            \n                \n            \n\n\n            column_detail_DATE_MIXED_GRANULARITY AS (\n                SELECT\n                    1\n                    \n                            , MIN(DATE_MIXED_GRANULARITY) AS min\n                            , MAX(DATE_MIXED_GRANULARITY) AS max\n                            \n                                , MIN('Monthly') AS estimated_granularity\n                                , MIN(0.800) AS estimated_granularity_confidence\n                            \n                    \n\n\n                    , SUM(COUNT(DATE_MIXED_GRANULARITY)) OVER () AS cnt_total\n                    , SUM(COUNT(DISTINCT DATE_MIXED_GRANULARITY)) OVER () AS cnt_unique\n                    , COUNT_IF(DATE_MIXED_GRANULARITY IS NULL) AS cnt_null\n\n                FROM dbt_db.dbt_schema.data_aggregated_mixed_granularity\n\n                GROUP BY ALL\n\n                \n\n            ) \n        \n\n        \n        , column_detail_info_date AS (\n            \n            \n            SELECT\n                'DATE_MIXED_GRANULARITY' AS column_name\n                , OBJECT_CONSTRUCT(\n                    'column_name', 'DATE_MIXED_GRANULARITY'\n                    , 'count' , MIN(cnt_total)\n                    , 'count_null' , MIN(cnt_null)\n                    \n                        , 'min' , MIN(min)\n                        , 'max' , MIN(max)\n                        \n                            , 'estimated_granularity' , MIN(estimated_granularity)\n                            , 'estimated_granularity_confidence' , MIN(estimated_granularity_confidence)\n                        \n                    \n                ) AS detail\n            FROM column_detail_DATE_MIXED_GRANULARITY\n            \n        \n\n        )\n    \n\n\n    \n        , \n\n    \n    \n\n    \n    \n    \n\n    \n    \n    \n        column_detail_info_boolean AS (\n            SELECT\n                '' AS column_name\n                , (NULL) AS detail\n        )\n    \n\n\n    \n\n    \n        \n\n\n\n\n\n    SELECT\n        assembed_result.meta_data_key\n        , assembed_result.meta_data_value\n        , assembed_result.identifier\n        , COALESCE(text_detail.detail, numeric_detail.detail,date_detail.detail, boolean_detail.detail) AS detail\n    FROM assembled_result AS assembed_result\n    LEFT JOIN column_detail_info_text AS text_detail\n    ON assembed_result.meta_data_key = text_detail.column_name\n    LEFT JOIN column_detail_info_numeric AS numeric_detail\n    ON assembed_result.meta_data_key = numeric_detail.column_name\n    LEFT JOIN column_detail_info_date AS date_detail\n    ON assembed_result.meta_data_key = date_detail.column_name\n    LEFT JOIN column_detail_info_boolean AS boolean_detail\n    ON assembed_result.meta_data_key = boolean_detail.column_name\n\n    ORDER BY index_pos ASC\n\n\n    \n\n\n)\nSELECT * FROM describe_dataframe\nWHERE\n    identifier = 'column'\n    AND\n    (\n        (\n            LOWER(meta_data_value) = 'date'\n\n            AND (\n\n                detail IS NULL\n\n                OR (\n                    meta_data_key = 'DATE_MIXED_GRANULARITY' AND (\n                    DETAIL:column_name::string <> 'DATE_MIXED_GRANULARITY'\n                    OR DETAIL:estimated_granularity::string <> 'Monthly'\n                    OR DETAIL:estimated_granularity_confidence::float <> 0.8\n                    OR DETAIL:count::integer <> 16\n                    OR DETAIL:count_null::integer <> 1\n                    OR DETAIL:min::date <> DATE('2019-01-01')\n                    OR DETAIL:max::date <> DATE('2023-01-01')\n                    )\n                )\n            )\n        )\n    )", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-02T15:15:09.624996Z", "completed_at": "2024-09-02T15:15:20.622050Z"}, {"name": "execute", "started_at": "2024-09-02T15:15:20.622661Z", "completed_at": "2024-09-02T15:15:22.436104Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 12.940273761749268, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b6c393-0000-a06a-0001-0e1a00058256"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.dbt_eda_tools.describe_ex2", "compiled": true, "compiled_code": "\n\n\n\n    \n\n    \n    \n    \n    \n\n    \n\n    WITH\n    \n    dummy AS (SELECT 1)\n    \n        , \n    \n    \n    meta_data AS (\n        -- Need to explicitly cast the type before transposing the data\n        SELECT\n        column_name\n        , data_type\n        , COUNT(*) OVER ():: STRING AS nbr_of_columns\n        , CASE\n                \n                    \n                        WHEN DATA_TYPE IN ('VARCHAR', 'CHAR', 'CHARACTER', 'STRING', 'TEXT') THEN 'text'\n                    \n                \n                    \n                        WHEN DATA_TYPE IN ('DATE', 'DATETIME', 'TIMESTAMP', 'TIMESTAMP_LTZ', 'TIMESTAMP_NTZ', 'TIMESTAMP_TZ') THEN 'date'\n                    \n                \n                    \n                        WHEN DATA_TYPE IN ('NUMBER', 'DECIMAL', 'NUMERIC', 'INT', 'INTEGER', 'BIGINT', 'SMALLINT', 'FLOAT', 'FLOAT4', 'FLOAT8', 'DOUBLE', 'DOUBLE PRECISION', 'REAL', 'INT64', 'TINYINT', 'BYETEINT', 'BIGDECIMAL', 'FLOAT64') THEN 'numeric'\n                    \n                \n                    \n                        WHEN DATA_TYPE IN ('BOOLEAN', 'BOOL') THEN 'boolean'\n                    \n                \n                    \n                        WHEN DATA_TYPE IN ('TIME', 'NEEDSTOBEARRAY') THEN 'time'\n                    \n                \n                    \n                \n                    \n                \n                    \n                \n                    \n                \n        END AS data_type_input\n\n        \n            \n                , COUNT_IF(DATA_TYPE IN ('VARCHAR', 'CHAR', 'CHARACTER', 'STRING', 'TEXT')) OVER () :: STRING  AS nbr_of_text_columns\n            \n        \n            \n                , COUNT_IF(DATA_TYPE IN ('DATE', 'DATETIME', 'TIMESTAMP', 'TIMESTAMP_LTZ', 'TIMESTAMP_NTZ', 'TIMESTAMP_TZ')) OVER () :: STRING  AS nbr_of_date_columns\n            \n        \n            \n                , COUNT_IF(DATA_TYPE IN ('NUMBER', 'DECIMAL', 'NUMERIC', 'INT', 'INTEGER', 'BIGINT', 'SMALLINT', 'FLOAT', 'FLOAT4', 'FLOAT8', 'DOUBLE', 'DOUBLE PRECISION', 'REAL', 'INT64', 'TINYINT', 'BYETEINT', 'BIGDECIMAL', 'FLOAT64')) OVER () :: STRING  AS nbr_of_numeric_columns\n            \n        \n            \n                , COUNT_IF(DATA_TYPE IN ('BOOLEAN', 'BOOL')) OVER () :: STRING  AS nbr_of_boolean_columns\n            \n        \n            \n                , COUNT_IF(DATA_TYPE IN ('TIME', 'NEEDSTOBEARRAY')) OVER () :: STRING  AS nbr_of_time_columns\n            \n        \n            \n        \n            \n        \n            \n        \n            \n        \n\n        FROM INFORMATION_SCHEMA.TABLES t\n        INNER JOIN INFORMATION_SCHEMA.COLUMNS c ON\n                c.table_schema = t.table_schema AND c.table_name = t.table_name\n                WHERE t.table_name = 'DATA_AGGREGATED'\n    )\n\n\n        \n        , \n\n    \n\n        meta_data_unique AS (\n            SELECT\n                    DISTINCT\n                    'dataset' AS identifier\n                    , NULL AS detail\n                    , nbr_of_columns\n                    , nbr_of_text_columns\n                    , nbr_of_date_columns\n                    , nbr_of_numeric_columns\n                    , nbr_of_boolean_columns\n                    , nbr_of_time_columns\n                FROM meta_data\n        )\n        , dataset_info AS (\n            SELECT\n                    CASE LOWER(meta_data_key)\n                            WHEN 'nbr_of_columns' THEN 1\n                            WHEN 'nbr_of_text_columns' THEN 2\n                            WHEN 'nbr_of_date_columns' THEN 3\n                            WHEN 'nbr_of_numeric_columns' THEN 4\n                            WHEN 'nbr_of_boolean_columns' THEN 5\n                            WHEN 'nbr_of_time_columns' THEN 6\n                    END AS index_pos\n                    , meta_data_key\n                    , identifier\n                    , detail\n                    , meta_data_value:: STRING AS meta_data_value\n                FROM meta_data_unique\n                UNPIVOT (meta_data_value FOR meta_data_key IN (nbr_of_columns, nbr_of_text_columns, nbr_of_date_columns, nbr_of_numeric_columns,nbr_of_boolean_columns,nbr_of_time_columns))\n        )\n\n    \n\n\n        \n        , \n\n    \n        rowcount_info AS (\n            SELECT\n                    0 AS index_pos\n                    , UPPER('nbr_of_rows') AS meta_data_key\n                    , 'dataset' AS identifier\n                    , NULL AS detail\n                    , COUNT(*):: STRING AS meta_data_value\n            FROM dbt_db.dbt_schema.data_aggregated\n            GROUP BY ALL\n        )\n    \n\n\n        \n        , \n\n    \n        column_info AS (\n            SELECT\n                20 + ROW_NUMBER() OVER (ORDER BY data_type) AS index_pos\n                , column_name AS meta_data_key\n                , 'column' AS identifier\n                , NULL AS detail\n                , data_type:: STRING AS meta_data_value\n            FROM meta_data\n        )\n    \n\n\n        \n        , \n    \n    assembled_result AS (\n        \n            SELECT\n                \n                     index_pos\n                \n                    , meta_data_key\n                \n                    , meta_data_value\n                \n                    , identifier\n                \n                    , detail\n                \n            FROM\n            dataset_info\n            UNION ALL\n        \n            SELECT\n                \n                     index_pos\n                \n                    , meta_data_key\n                \n                    , meta_data_value\n                \n                    , identifier\n                \n                    , detail\n                \n            FROM\n            rowcount_info\n            UNION ALL\n        \n            SELECT\n                \n                     index_pos\n                \n                    , meta_data_key\n                \n                    , meta_data_value\n                \n                    , identifier\n                \n                    , detail\n                \n            FROM\n            column_info\n            \n        \n    )\n\n\n    \n    \n        , \n\n    \n    \n\n    \n    \n    \n\n    \n    \n    \n        \n        \n\n            \n\n\n            column_detail_STR_LENGTH AS (\n                SELECT\n                    1\n                    \n                            , MIN(STR_LENGTH) AS min\n                            , MAX(STR_LENGTH) AS max\n                            \n                                , ROUND(AVG(STR_LENGTH),4) AS avg\n                                \n                                , ROUND(TO_VARCHAR(APPROX_PERCENTILE(STR_LENGTH, 0.25),'999.999999'),4) AS percentile_25\n                                , ROUND(TO_VARCHAR(APPROX_PERCENTILE(STR_LENGTH, 0.5),'999.999999'),4) AS percentile_50\n                                , ROUND(TO_VARCHAR(APPROX_PERCENTILE(STR_LENGTH, 0.75),'999.999999'),4) AS percentile_75\n                                \n                            \n                    \n\n\n                    , SUM(COUNT(STR_LENGTH)) OVER () AS cnt_total\n                    , SUM(COUNT(DISTINCT STR_LENGTH)) OVER () AS cnt_unique\n                    , COUNT_IF(STR_LENGTH IS NULL) AS cnt_null\n\n                FROM dbt_db.dbt_schema.data_aggregated\n\n                GROUP BY ALL\n\n                \n\n            ) \n        \n\n        \n        , column_detail_info_numeric AS (\n            \n            \n            SELECT\n                'STR_LENGTH' AS column_name\n                , OBJECT_CONSTRUCT(\n                    'column_name', 'STR_LENGTH'\n                    , 'count' , MIN(cnt_total)\n                    , 'count_null' , MIN(cnt_null)\n                    \n                        , 'min' , MIN(min)\n                        , 'max' , MIN(max)\n                        \n                            , 'mean' , MIN(avg)\n                            , 'percentile_25' , MIN(percentile_25)\n                            , 'percentile_50' , MIN(percentile_50)\n                            , 'percentile_75' , MIN(percentile_75)\n                        \n                    \n                ) AS detail\n            FROM column_detail_STR_LENGTH\n            \n        \n\n        )\n    \n\n\n    \n        , \n\n    \n    \n\n    \n    \n    \n\n    \n    \n    \n        \n        \n\n            \n\n\n            column_detail_COUNTRY AS (\n                SELECT\n                    1\n                    \n                        , COUNTRY\n                        , COUNT(*) AS cnt\n                    \n\n\n                    , SUM(COUNT(COUNTRY)) OVER () AS cnt_total\n                    , SUM(COUNT(DISTINCT COUNTRY)) OVER () AS cnt_unique\n                    , COUNT_IF(COUNTRY IS NULL) AS cnt_null\n\n                FROM dbt_db.dbt_schema.data_aggregated\n\n                GROUP BY ALL\n\n                \n                    LIMIT 10\n                \n\n            ) ,\n        \n\n            \n\n\n            column_detail_COMPANY_NAME AS (\n                SELECT\n                    1\n                    \n                        , COMPANY_NAME\n                        , COUNT(*) AS cnt\n                    \n\n\n                    , SUM(COUNT(COMPANY_NAME)) OVER () AS cnt_total\n                    , SUM(COUNT(DISTINCT COMPANY_NAME)) OVER () AS cnt_unique\n                    , COUNT_IF(COMPANY_NAME IS NULL) AS cnt_null\n\n                FROM dbt_db.dbt_schema.data_aggregated\n\n                GROUP BY ALL\n\n                \n                    LIMIT 10\n                \n\n            ) \n        \n\n        \n        , column_detail_info_text AS (\n            \n            \n            SELECT\n                'COUNTRY' AS column_name\n                , OBJECT_CONSTRUCT(\n                    'column_name', 'COUNTRY'\n                    , 'count' , MIN(cnt_total)\n                    , 'count_null' , MIN(cnt_null)\n                    \n                        \n                            , 'unique' , MIN(cnt_unique)\n                        \n                        , 'value_counts_top10',\n                            OBJECT_AGG\n                                (\n                                    COALESCE(COUNTRY,'NULL'):: STRING\n                                , cnt)\n                                \n                    \n                ) AS detail\n            FROM column_detail_COUNTRY\n            UNION ALL\n        \n            \n            SELECT\n                'COMPANY_NAME' AS column_name\n                , OBJECT_CONSTRUCT(\n                    'column_name', 'COMPANY_NAME'\n                    , 'count' , MIN(cnt_total)\n                    , 'count_null' , MIN(cnt_null)\n                    \n                        \n                            , 'unique' , MIN(cnt_unique)\n                        \n                        , 'value_counts_top10',\n                            OBJECT_AGG\n                                (\n                                    COALESCE(COMPANY_NAME,'NULL'):: STRING\n                                , cnt)\n                                \n                    \n                ) AS detail\n            FROM column_detail_COMPANY_NAME\n            \n        \n\n        )\n    \n\n\n    \n        , \n\n    \n    \n\n    \n    \n    \n\n    \n    \n    \n        column_detail_info_date AS (\n            SELECT\n                '' AS column_name\n                , (NULL) AS detail\n        )\n    \n\n\n    \n        , \n\n    \n    \n\n    \n    \n    \n\n    \n    \n    \n        column_detail_info_boolean AS (\n            SELECT\n                '' AS column_name\n                , (NULL) AS detail\n        )\n    \n\n\n    \n\n    \n        \n\n\n\n\n\n    SELECT\n        assembed_result.meta_data_key\n        , assembed_result.meta_data_value\n        , assembed_result.identifier\n        , COALESCE(text_detail.detail, numeric_detail.detail,date_detail.detail, boolean_detail.detail) AS detail\n    FROM assembled_result AS assembed_result\n    LEFT JOIN column_detail_info_text AS text_detail\n    ON assembed_result.meta_data_key = text_detail.column_name\n    LEFT JOIN column_detail_info_numeric AS numeric_detail\n    ON assembed_result.meta_data_key = numeric_detail.column_name\n    LEFT JOIN column_detail_info_date AS date_detail\n    ON assembed_result.meta_data_key = date_detail.column_name\n    LEFT JOIN column_detail_info_boolean AS boolean_detail\n    ON assembed_result.meta_data_key = boolean_detail.column_name\n\n    ORDER BY index_pos ASC\n\n\n    \n\n", "relation_name": "dbt_db.dbt_schema.describe_ex2"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-02T15:15:20.864497Z", "completed_at": "2024-09-02T15:15:20.908493Z"}, {"name": "execute", "started_at": "2024-09-02T15:15:20.918768Z", "completed_at": "2024-09-02T15:15:22.466918Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.7243616580963135, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b6c393-0000-9fa2-0001-0e1a00055322"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.dbt_eda_tools.data_aggregated_yearly_granularity", "compiled": true, "compiled_code": "\n\nSELECT\n    *\nFROM dbt_db.dbt_schema.data_aggregated_mixed_granularity\nWHERE date_mixed_granularity <= DATE('2022-01-01')", "relation_name": "dbt_db.dbt_schema.data_aggregated_yearly_granularity"}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-09-02T15:15:06.143932Z", "completed_at": "2024-09-02T15:15:18.379893Z"}, {"name": "execute", "started_at": "2024-09-02T15:15:18.380495Z", "completed_at": "2024-09-02T15:15:23.370920Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 17.36055564880371, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b6c393-0000-9ff3-0001-0e1a000542c6"}, "message": null, "failures": 0, "unique_id": "test.dbt_eda_tools.assert_data_describe_structure", "compiled": true, "compiled_code": "\n\nWITH\ndescribe_dataframe AS (\n    \n\n    \n\n    \n    \n    \n    \n\n    \n\n    WITH\n    \n    dummy AS (SELECT 1)\n    \n        , \n    \n    \n    meta_data AS (\n        -- Need to explicitly cast the type before transposing the data\n        SELECT\n        column_name\n        , data_type\n        , COUNT(*) OVER ():: STRING AS nbr_of_columns\n        , CASE\n                \n                    \n                        WHEN DATA_TYPE IN ('VARCHAR', 'CHAR', 'CHARACTER', 'STRING', 'TEXT') THEN 'text'\n                    \n                \n                    \n                        WHEN DATA_TYPE IN ('DATE', 'DATETIME', 'TIMESTAMP', 'TIMESTAMP_LTZ', 'TIMESTAMP_NTZ', 'TIMESTAMP_TZ') THEN 'date'\n                    \n                \n                    \n                        WHEN DATA_TYPE IN ('NUMBER', 'DECIMAL', 'NUMERIC', 'INT', 'INTEGER', 'BIGINT', 'SMALLINT', 'FLOAT', 'FLOAT4', 'FLOAT8', 'DOUBLE', 'DOUBLE PRECISION', 'REAL', 'INT64', 'TINYINT', 'BYETEINT', 'BIGDECIMAL', 'FLOAT64') THEN 'numeric'\n                    \n                \n                    \n                        WHEN DATA_TYPE IN ('BOOLEAN', 'BOOL') THEN 'boolean'\n                    \n                \n                    \n                        WHEN DATA_TYPE IN ('TIME', 'NEEDSTOBEARRAY') THEN 'time'\n                    \n                \n                    \n                \n                    \n                \n                    \n                \n                    \n                \n        END AS data_type_input\n\n        \n            \n                , COUNT_IF(DATA_TYPE IN ('VARCHAR', 'CHAR', 'CHARACTER', 'STRING', 'TEXT')) OVER () :: STRING  AS nbr_of_text_columns\n            \n        \n            \n                , COUNT_IF(DATA_TYPE IN ('DATE', 'DATETIME', 'TIMESTAMP', 'TIMESTAMP_LTZ', 'TIMESTAMP_NTZ', 'TIMESTAMP_TZ')) OVER () :: STRING  AS nbr_of_date_columns\n            \n        \n            \n                , COUNT_IF(DATA_TYPE IN ('NUMBER', 'DECIMAL', 'NUMERIC', 'INT', 'INTEGER', 'BIGINT', 'SMALLINT', 'FLOAT', 'FLOAT4', 'FLOAT8', 'DOUBLE', 'DOUBLE PRECISION', 'REAL', 'INT64', 'TINYINT', 'BYETEINT', 'BIGDECIMAL', 'FLOAT64')) OVER () :: STRING  AS nbr_of_numeric_columns\n            \n        \n            \n                , COUNT_IF(DATA_TYPE IN ('BOOLEAN', 'BOOL')) OVER () :: STRING  AS nbr_of_boolean_columns\n            \n        \n            \n                , COUNT_IF(DATA_TYPE IN ('TIME', 'NEEDSTOBEARRAY')) OVER () :: STRING  AS nbr_of_time_columns\n            \n        \n            \n        \n            \n        \n            \n        \n            \n        \n\n        FROM INFORMATION_SCHEMA.TABLES t\n        INNER JOIN INFORMATION_SCHEMA.COLUMNS c ON\n                c.table_schema = t.table_schema AND c.table_name = t.table_name\n                WHERE t.table_name = 'DATA_GENERATOR_ENRICHED_DESCRIBE'\n    )\n\n\n        \n        , \n\n    \n\n        meta_data_unique AS (\n            SELECT\n                    DISTINCT\n                    'dataset' AS identifier\n                    , NULL AS detail\n                    , nbr_of_columns\n                    , nbr_of_text_columns\n                    , nbr_of_date_columns\n                    , nbr_of_numeric_columns\n                    , nbr_of_boolean_columns\n                    , nbr_of_time_columns\n                FROM meta_data\n        )\n        , dataset_info AS (\n            SELECT\n                    CASE LOWER(meta_data_key)\n                            WHEN 'nbr_of_columns' THEN 1\n                            WHEN 'nbr_of_text_columns' THEN 2\n                            WHEN 'nbr_of_date_columns' THEN 3\n                            WHEN 'nbr_of_numeric_columns' THEN 4\n                            WHEN 'nbr_of_boolean_columns' THEN 5\n                            WHEN 'nbr_of_time_columns' THEN 6\n                    END AS index_pos\n                    , meta_data_key\n                    , identifier\n                    , detail\n                    , meta_data_value:: STRING AS meta_data_value\n                FROM meta_data_unique\n                UNPIVOT (meta_data_value FOR meta_data_key IN (nbr_of_columns, nbr_of_text_columns, nbr_of_date_columns, nbr_of_numeric_columns,nbr_of_boolean_columns,nbr_of_time_columns))\n        )\n\n    \n\n\n        \n        , \n\n    \n        rowcount_info AS (\n            SELECT\n                    0 AS index_pos\n                    , UPPER('nbr_of_rows') AS meta_data_key\n                    , 'dataset' AS identifier\n                    , NULL AS detail\n                    , COUNT(*):: STRING AS meta_data_value\n            FROM dbt_db.dbt_schema.data_generator_enriched_describe\n            GROUP BY ALL\n        )\n    \n\n\n        \n        , \n\n    \n        column_info AS (\n            SELECT\n                20 + ROW_NUMBER() OVER (ORDER BY data_type) AS index_pos\n                , column_name AS meta_data_key\n                , 'column' AS identifier\n                , NULL AS detail\n                , data_type:: STRING AS meta_data_value\n            FROM meta_data\n        )\n    \n\n\n        \n        , \n    \n    assembled_result AS (\n        \n            SELECT\n                \n                     index_pos\n                \n                    , meta_data_key\n                \n                    , meta_data_value\n                \n                    , identifier\n                \n                    , detail\n                \n            FROM\n            dataset_info\n            UNION ALL\n        \n            SELECT\n                \n                     index_pos\n                \n                    , meta_data_key\n                \n                    , meta_data_value\n                \n                    , identifier\n                \n                    , detail\n                \n            FROM\n            rowcount_info\n            UNION ALL\n        \n            SELECT\n                \n                     index_pos\n                \n                    , meta_data_key\n                \n                    , meta_data_value\n                \n                    , identifier\n                \n                    , detail\n                \n            FROM\n            column_info\n            \n        \n    )\n\n\n    \n    \n        , \n\n    \n    \n\n    \n    \n    \n\n    \n    \n    \n        \n        \n\n            \n\n\n            column_detail_STR_LENGTH AS (\n                SELECT\n                    1\n                    \n                            , MIN(STR_LENGTH) AS min\n                            , MAX(STR_LENGTH) AS max\n                            \n                                , ROUND(AVG(STR_LENGTH),4) AS avg\n                                \n                                , ROUND(TO_VARCHAR(APPROX_PERCENTILE(STR_LENGTH, 0.25),'999.999999'),4) AS percentile_25\n                                , ROUND(TO_VARCHAR(APPROX_PERCENTILE(STR_LENGTH, 0.5),'999.999999'),4) AS percentile_50\n                                , ROUND(TO_VARCHAR(APPROX_PERCENTILE(STR_LENGTH, 0.75),'999.999999'),4) AS percentile_75\n                                \n                            \n                    \n\n\n                    , SUM(COUNT(STR_LENGTH)) OVER () AS cnt_total\n                    , SUM(COUNT(DISTINCT STR_LENGTH)) OVER () AS cnt_unique\n                    , COUNT_IF(STR_LENGTH IS NULL) AS cnt_null\n\n                FROM dbt_db.dbt_schema.data_generator_enriched_describe\n\n                GROUP BY ALL\n\n                \n\n            ) \n        \n\n        \n        , column_detail_info_numeric AS (\n            \n            \n            SELECT\n                'STR_LENGTH' AS column_name\n                , OBJECT_CONSTRUCT(\n                    'column_name', 'STR_LENGTH'\n                    , 'count' , MIN(cnt_total)\n                    , 'count_null' , MIN(cnt_null)\n                    \n                        , 'min' , MIN(min)\n                        , 'max' , MIN(max)\n                        \n                            , 'mean' , MIN(avg)\n                            , 'percentile_25' , MIN(percentile_25)\n                            , 'percentile_50' , MIN(percentile_50)\n                            , 'percentile_75' , MIN(percentile_75)\n                        \n                    \n                ) AS detail\n            FROM column_detail_STR_LENGTH\n            \n        \n\n        )\n    \n\n\n    \n        , \n\n    \n    \n\n    \n    \n    \n\n    \n    \n    \n        \n        \n\n            \n\n\n            column_detail_COMPANY_NAME AS (\n                SELECT\n                    1\n                    \n                        , COMPANY_NAME\n                        , COUNT(*) AS cnt\n                    \n\n\n                    , SUM(COUNT(COMPANY_NAME)) OVER () AS cnt_total\n                    , SUM(COUNT(DISTINCT COMPANY_NAME)) OVER () AS cnt_unique\n                    , COUNT_IF(COMPANY_NAME IS NULL) AS cnt_null\n\n                FROM dbt_db.dbt_schema.data_generator_enriched_describe\n\n                GROUP BY ALL\n\n                \n                    LIMIT 10\n                \n\n            ) ,\n        \n\n            \n\n\n            column_detail_COUNTRY AS (\n                SELECT\n                    1\n                    \n                        , COUNTRY\n                        , COUNT(*) AS cnt\n                    \n\n\n                    , SUM(COUNT(COUNTRY)) OVER () AS cnt_total\n                    , SUM(COUNT(DISTINCT COUNTRY)) OVER () AS cnt_unique\n                    , COUNT_IF(COUNTRY IS NULL) AS cnt_null\n\n                FROM dbt_db.dbt_schema.data_generator_enriched_describe\n\n                GROUP BY ALL\n\n                \n                    LIMIT 10\n                \n\n            ) \n        \n\n        \n        , column_detail_info_text AS (\n            \n            \n            SELECT\n                'COMPANY_NAME' AS column_name\n                , OBJECT_CONSTRUCT(\n                    'column_name', 'COMPANY_NAME'\n                    , 'count' , MIN(cnt_total)\n                    , 'count_null' , MIN(cnt_null)\n                    \n                        \n                            , 'unique' , MIN(cnt_unique)\n                        \n                        , 'value_counts_top10',\n                            OBJECT_AGG\n                                (\n                                    COALESCE(COMPANY_NAME,'NULL'):: STRING\n                                , cnt)\n                                \n                    \n                ) AS detail\n            FROM column_detail_COMPANY_NAME\n            UNION ALL\n        \n            \n            SELECT\n                'COUNTRY' AS column_name\n                , OBJECT_CONSTRUCT(\n                    'column_name', 'COUNTRY'\n                    , 'count' , MIN(cnt_total)\n                    , 'count_null' , MIN(cnt_null)\n                    \n                        \n                            , 'unique' , MIN(cnt_unique)\n                        \n                        , 'value_counts_top10',\n                            OBJECT_AGG\n                                (\n                                    COALESCE(COUNTRY,'NULL'):: STRING\n                                , cnt)\n                                \n                    \n                ) AS detail\n            FROM column_detail_COUNTRY\n            \n        \n\n        )\n    \n\n\n    \n        , \n\n    \n    \n\n    \n    \n    \n\n    \n    \n    \n        \n        \n\n            \n                \n            \n\n\n            column_detail_DATE_DAY AS (\n                SELECT\n                    1\n                    \n                            , MIN(DATE_DAY) AS min\n                            , MAX(DATE_DAY) AS max\n                            \n                                , MIN('Daily') AS estimated_granularity\n                                , MIN(1.000) AS estimated_granularity_confidence\n                            \n                    \n\n\n                    , SUM(COUNT(DATE_DAY)) OVER () AS cnt_total\n                    , SUM(COUNT(DISTINCT DATE_DAY)) OVER () AS cnt_unique\n                    , COUNT_IF(DATE_DAY IS NULL) AS cnt_null\n\n                FROM dbt_db.dbt_schema.data_generator_enriched_describe\n\n                GROUP BY ALL\n\n                \n\n            ) \n        \n\n        \n        , column_detail_info_date AS (\n            \n            \n            SELECT\n                'DATE_DAY' AS column_name\n                , OBJECT_CONSTRUCT(\n                    'column_name', 'DATE_DAY'\n                    , 'count' , MIN(cnt_total)\n                    , 'count_null' , MIN(cnt_null)\n                    \n                        , 'min' , MIN(min)\n                        , 'max' , MIN(max)\n                        \n                            , 'estimated_granularity' , MIN(estimated_granularity)\n                            , 'estimated_granularity_confidence' , MIN(estimated_granularity_confidence)\n                        \n                    \n                ) AS detail\n            FROM column_detail_DATE_DAY\n            \n        \n\n        )\n    \n\n\n    \n        , \n\n    \n    \n\n    \n    \n    \n\n    \n    \n    \n        \n        \n\n            \n\n\n            column_detail_IS_SHORT_STRING AS (\n                SELECT\n                    1\n                    \n                        , IS_SHORT_STRING\n                        , COUNT(*) AS cnt\n                    \n\n\n                    , SUM(COUNT(IS_SHORT_STRING)) OVER () AS cnt_total\n                    , SUM(COUNT(DISTINCT IS_SHORT_STRING)) OVER () AS cnt_unique\n                    , COUNT_IF(IS_SHORT_STRING IS NULL) AS cnt_null\n\n                FROM dbt_db.dbt_schema.data_generator_enriched_describe\n\n                GROUP BY ALL\n\n                \n\n            ) \n        \n\n        \n        , column_detail_info_boolean AS (\n            \n            \n            SELECT\n                'IS_SHORT_STRING' AS column_name\n                , OBJECT_CONSTRUCT(\n                    'column_name', 'IS_SHORT_STRING'\n                    , 'count' , MIN(cnt_total)\n                    , 'count_null' , MIN(cnt_null)\n                    \n                        \n                        , 'value_counts_top10',\n                            OBJECT_AGG\n                                (\n                                    COALESCE(IS_SHORT_STRING,'NULL'):: STRING\n                                , cnt)\n                                \n                    \n                ) AS detail\n            FROM column_detail_IS_SHORT_STRING\n            \n        \n\n        )\n    \n\n\n    \n\n    \n        \n\n\n\n\n\n    SELECT\n        assembed_result.meta_data_key\n        , assembed_result.meta_data_value\n        , assembed_result.identifier\n        , COALESCE(text_detail.detail, numeric_detail.detail,date_detail.detail, boolean_detail.detail) AS detail\n    FROM assembled_result AS assembed_result\n    LEFT JOIN column_detail_info_text AS text_detail\n    ON assembed_result.meta_data_key = text_detail.column_name\n    LEFT JOIN column_detail_info_numeric AS numeric_detail\n    ON assembed_result.meta_data_key = numeric_detail.column_name\n    LEFT JOIN column_detail_info_date AS date_detail\n    ON assembed_result.meta_data_key = date_detail.column_name\n    LEFT JOIN column_detail_info_boolean AS boolean_detail\n    ON assembed_result.meta_data_key = boolean_detail.column_name\n\n    ORDER BY index_pos ASC\n\n\n    \n\n\n)\nSELECT * FROM describe_dataframe\nWHERE\n    1=1\n    -- Columns = 4\n    AND\n    (\n        (LOWER(meta_data_key) = 'nbr_of_columns' AND meta_data_value <> 5)\n        -- Rows = 54800\n        OR (LOWER(meta_data_key) = 'nbr_of_rows' AND meta_data_value <> 54800)\n        -- Date Columns = 1\n        OR (LOWER(meta_data_key) = 'nbr_of_date_columns' AND meta_data_value <> 1)\n        -- Time Columns = 1\n        OR (LOWER(meta_data_key) = 'nbr_of_time_columns' AND meta_data_value <> 0)\n        -- Boolean Columns = 1\n        OR (LOWER(meta_data_key) = 'nbr_of_boolean_columns' AND meta_data_value <> 1)\n        -- Text Columns = 1\n        OR (LOWER(meta_data_key) = 'nbr_of_text_columns' AND meta_data_value <> 2)\n        -- Numeric Columns = 1\n        OR (LOWER(meta_data_key) = 'nbr_of_numeric_columns' AND meta_data_value <> 1)\n    )", "relation_name": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-09-02T15:15:02.989384Z", "completed_at": "2024-09-02T15:15:18.164058Z"}, {"name": "execute", "started_at": "2024-09-02T15:15:18.165931Z", "completed_at": "2024-09-02T15:15:24.687690Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 21.861358880996704, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b6c393-0000-a053-0001-0e1a0005722a"}, "message": null, "failures": 0, "unique_id": "test.dbt_eda_tools.assert_data_describe_column_details", "compiled": true, "compiled_code": "\n\nWITH\ndescribe_dataframe AS (\n    \n\n    \n\n    \n    \n    \n    \n\n    \n\n    WITH\n    \n    dummy AS (SELECT 1)\n    \n        , \n    \n    \n    meta_data AS (\n        -- Need to explicitly cast the type before transposing the data\n        SELECT\n        column_name\n        , data_type\n        , COUNT(*) OVER ():: STRING AS nbr_of_columns\n        , CASE\n                \n                    \n                        WHEN DATA_TYPE IN ('VARCHAR', 'CHAR', 'CHARACTER', 'STRING', 'TEXT') THEN 'text'\n                    \n                \n                    \n                        WHEN DATA_TYPE IN ('DATE', 'DATETIME', 'TIMESTAMP', 'TIMESTAMP_LTZ', 'TIMESTAMP_NTZ', 'TIMESTAMP_TZ') THEN 'date'\n                    \n                \n                    \n                        WHEN DATA_TYPE IN ('NUMBER', 'DECIMAL', 'NUMERIC', 'INT', 'INTEGER', 'BIGINT', 'SMALLINT', 'FLOAT', 'FLOAT4', 'FLOAT8', 'DOUBLE', 'DOUBLE PRECISION', 'REAL', 'INT64', 'TINYINT', 'BYETEINT', 'BIGDECIMAL', 'FLOAT64') THEN 'numeric'\n                    \n                \n                    \n                        WHEN DATA_TYPE IN ('BOOLEAN', 'BOOL') THEN 'boolean'\n                    \n                \n                    \n                        WHEN DATA_TYPE IN ('TIME', 'NEEDSTOBEARRAY') THEN 'time'\n                    \n                \n                    \n                \n                    \n                \n                    \n                \n                    \n                \n        END AS data_type_input\n\n        \n            \n                , COUNT_IF(DATA_TYPE IN ('VARCHAR', 'CHAR', 'CHARACTER', 'STRING', 'TEXT')) OVER () :: STRING  AS nbr_of_text_columns\n            \n        \n            \n                , COUNT_IF(DATA_TYPE IN ('DATE', 'DATETIME', 'TIMESTAMP', 'TIMESTAMP_LTZ', 'TIMESTAMP_NTZ', 'TIMESTAMP_TZ')) OVER () :: STRING  AS nbr_of_date_columns\n            \n        \n            \n                , COUNT_IF(DATA_TYPE IN ('NUMBER', 'DECIMAL', 'NUMERIC', 'INT', 'INTEGER', 'BIGINT', 'SMALLINT', 'FLOAT', 'FLOAT4', 'FLOAT8', 'DOUBLE', 'DOUBLE PRECISION', 'REAL', 'INT64', 'TINYINT', 'BYETEINT', 'BIGDECIMAL', 'FLOAT64')) OVER () :: STRING  AS nbr_of_numeric_columns\n            \n        \n            \n                , COUNT_IF(DATA_TYPE IN ('BOOLEAN', 'BOOL')) OVER () :: STRING  AS nbr_of_boolean_columns\n            \n        \n            \n                , COUNT_IF(DATA_TYPE IN ('TIME', 'NEEDSTOBEARRAY')) OVER () :: STRING  AS nbr_of_time_columns\n            \n        \n            \n        \n            \n        \n            \n        \n            \n        \n\n        FROM INFORMATION_SCHEMA.TABLES t\n        INNER JOIN INFORMATION_SCHEMA.COLUMNS c ON\n                c.table_schema = t.table_schema AND c.table_name = t.table_name\n                WHERE t.table_name = 'DATA_GENERATOR_ENRICHED_DESCRIBE'\n    )\n\n\n        \n        , \n\n    \n\n        meta_data_unique AS (\n            SELECT\n                    DISTINCT\n                    'dataset' AS identifier\n                    , NULL AS detail\n                    , nbr_of_columns\n                    , nbr_of_text_columns\n                    , nbr_of_date_columns\n                    , nbr_of_numeric_columns\n                    , nbr_of_boolean_columns\n                    , nbr_of_time_columns\n                FROM meta_data\n        )\n        , dataset_info AS (\n            SELECT\n                    CASE LOWER(meta_data_key)\n                            WHEN 'nbr_of_columns' THEN 1\n                            WHEN 'nbr_of_text_columns' THEN 2\n                            WHEN 'nbr_of_date_columns' THEN 3\n                            WHEN 'nbr_of_numeric_columns' THEN 4\n                            WHEN 'nbr_of_boolean_columns' THEN 5\n                            WHEN 'nbr_of_time_columns' THEN 6\n                    END AS index_pos\n                    , meta_data_key\n                    , identifier\n                    , detail\n                    , meta_data_value:: STRING AS meta_data_value\n                FROM meta_data_unique\n                UNPIVOT (meta_data_value FOR meta_data_key IN (nbr_of_columns, nbr_of_text_columns, nbr_of_date_columns, nbr_of_numeric_columns,nbr_of_boolean_columns,nbr_of_time_columns))\n        )\n\n    \n\n\n        \n        , \n\n    \n        rowcount_info AS (\n            SELECT\n                    0 AS index_pos\n                    , UPPER('nbr_of_rows') AS meta_data_key\n                    , 'dataset' AS identifier\n                    , NULL AS detail\n                    , COUNT(*):: STRING AS meta_data_value\n            FROM dbt_db.dbt_schema.data_generator_enriched_describe\n            GROUP BY ALL\n        )\n    \n\n\n        \n        , \n\n    \n        column_info AS (\n            SELECT\n                20 + ROW_NUMBER() OVER (ORDER BY data_type) AS index_pos\n                , column_name AS meta_data_key\n                , 'column' AS identifier\n                , NULL AS detail\n                , data_type:: STRING AS meta_data_value\n            FROM meta_data\n        )\n    \n\n\n        \n        , \n    \n    assembled_result AS (\n        \n            SELECT\n                \n                     index_pos\n                \n                    , meta_data_key\n                \n                    , meta_data_value\n                \n                    , identifier\n                \n                    , detail\n                \n            FROM\n            dataset_info\n            UNION ALL\n        \n            SELECT\n                \n                     index_pos\n                \n                    , meta_data_key\n                \n                    , meta_data_value\n                \n                    , identifier\n                \n                    , detail\n                \n            FROM\n            rowcount_info\n            UNION ALL\n        \n            SELECT\n                \n                     index_pos\n                \n                    , meta_data_key\n                \n                    , meta_data_value\n                \n                    , identifier\n                \n                    , detail\n                \n            FROM\n            column_info\n            \n        \n    )\n\n\n    \n    \n        , \n\n    \n    \n\n    \n    \n    \n\n    \n    \n    \n        \n        \n\n            \n\n\n            column_detail_STR_LENGTH AS (\n                SELECT\n                    1\n                    \n                            , MIN(STR_LENGTH) AS min\n                            , MAX(STR_LENGTH) AS max\n                            \n                                , ROUND(AVG(STR_LENGTH),4) AS avg\n                                \n                                , ROUND(TO_VARCHAR(APPROX_PERCENTILE(STR_LENGTH, 0.25),'999.999999'),4) AS percentile_25\n                                , ROUND(TO_VARCHAR(APPROX_PERCENTILE(STR_LENGTH, 0.5),'999.999999'),4) AS percentile_50\n                                , ROUND(TO_VARCHAR(APPROX_PERCENTILE(STR_LENGTH, 0.75),'999.999999'),4) AS percentile_75\n                                \n                            \n                    \n\n\n                    , SUM(COUNT(STR_LENGTH)) OVER () AS cnt_total\n                    , SUM(COUNT(DISTINCT STR_LENGTH)) OVER () AS cnt_unique\n                    , COUNT_IF(STR_LENGTH IS NULL) AS cnt_null\n\n                FROM dbt_db.dbt_schema.data_generator_enriched_describe\n\n                GROUP BY ALL\n\n                \n\n            ) \n        \n\n        \n        , column_detail_info_numeric AS (\n            \n            \n            SELECT\n                'STR_LENGTH' AS column_name\n                , OBJECT_CONSTRUCT(\n                    'column_name', 'STR_LENGTH'\n                    , 'count' , MIN(cnt_total)\n                    , 'count_null' , MIN(cnt_null)\n                    \n                        , 'min' , MIN(min)\n                        , 'max' , MIN(max)\n                        \n                            , 'mean' , MIN(avg)\n                            , 'percentile_25' , MIN(percentile_25)\n                            , 'percentile_50' , MIN(percentile_50)\n                            , 'percentile_75' , MIN(percentile_75)\n                        \n                    \n                ) AS detail\n            FROM column_detail_STR_LENGTH\n            \n        \n\n        )\n    \n\n\n    \n        , \n\n    \n    \n\n    \n    \n    \n\n    \n    \n    \n        \n        \n\n            \n\n\n            column_detail_COMPANY_NAME AS (\n                SELECT\n                    1\n                    \n                        , COMPANY_NAME\n                        , COUNT(*) AS cnt\n                    \n\n\n                    , SUM(COUNT(COMPANY_NAME)) OVER () AS cnt_total\n                    , SUM(COUNT(DISTINCT COMPANY_NAME)) OVER () AS cnt_unique\n                    , COUNT_IF(COMPANY_NAME IS NULL) AS cnt_null\n\n                FROM dbt_db.dbt_schema.data_generator_enriched_describe\n\n                GROUP BY ALL\n\n                \n                    LIMIT 10\n                \n\n            ) ,\n        \n\n            \n\n\n            column_detail_COUNTRY AS (\n                SELECT\n                    1\n                    \n                        , COUNTRY\n                        , COUNT(*) AS cnt\n                    \n\n\n                    , SUM(COUNT(COUNTRY)) OVER () AS cnt_total\n                    , SUM(COUNT(DISTINCT COUNTRY)) OVER () AS cnt_unique\n                    , COUNT_IF(COUNTRY IS NULL) AS cnt_null\n\n                FROM dbt_db.dbt_schema.data_generator_enriched_describe\n\n                GROUP BY ALL\n\n                \n                    LIMIT 10\n                \n\n            ) \n        \n\n        \n        , column_detail_info_text AS (\n            \n            \n            SELECT\n                'COMPANY_NAME' AS column_name\n                , OBJECT_CONSTRUCT(\n                    'column_name', 'COMPANY_NAME'\n                    , 'count' , MIN(cnt_total)\n                    , 'count_null' , MIN(cnt_null)\n                    \n                        \n                            , 'unique' , MIN(cnt_unique)\n                        \n                        , 'value_counts_top10',\n                            OBJECT_AGG\n                                (\n                                    COALESCE(COMPANY_NAME,'NULL'):: STRING\n                                , cnt)\n                                \n                    \n                ) AS detail\n            FROM column_detail_COMPANY_NAME\n            UNION ALL\n        \n            \n            SELECT\n                'COUNTRY' AS column_name\n                , OBJECT_CONSTRUCT(\n                    'column_name', 'COUNTRY'\n                    , 'count' , MIN(cnt_total)\n                    , 'count_null' , MIN(cnt_null)\n                    \n                        \n                            , 'unique' , MIN(cnt_unique)\n                        \n                        , 'value_counts_top10',\n                            OBJECT_AGG\n                                (\n                                    COALESCE(COUNTRY,'NULL'):: STRING\n                                , cnt)\n                                \n                    \n                ) AS detail\n            FROM column_detail_COUNTRY\n            \n        \n\n        )\n    \n\n\n    \n        , \n\n    \n    \n\n    \n    \n    \n\n    \n    \n    \n        \n        \n\n            \n                \n            \n\n\n            column_detail_DATE_DAY AS (\n                SELECT\n                    1\n                    \n                            , MIN(DATE_DAY) AS min\n                            , MAX(DATE_DAY) AS max\n                            \n                                , MIN('Daily') AS estimated_granularity\n                                , MIN(1.000) AS estimated_granularity_confidence\n                            \n                    \n\n\n                    , SUM(COUNT(DATE_DAY)) OVER () AS cnt_total\n                    , SUM(COUNT(DISTINCT DATE_DAY)) OVER () AS cnt_unique\n                    , COUNT_IF(DATE_DAY IS NULL) AS cnt_null\n\n                FROM dbt_db.dbt_schema.data_generator_enriched_describe\n\n                GROUP BY ALL\n\n                \n\n            ) \n        \n\n        \n        , column_detail_info_date AS (\n            \n            \n            SELECT\n                'DATE_DAY' AS column_name\n                , OBJECT_CONSTRUCT(\n                    'column_name', 'DATE_DAY'\n                    , 'count' , MIN(cnt_total)\n                    , 'count_null' , MIN(cnt_null)\n                    \n                        , 'min' , MIN(min)\n                        , 'max' , MIN(max)\n                        \n                            , 'estimated_granularity' , MIN(estimated_granularity)\n                            , 'estimated_granularity_confidence' , MIN(estimated_granularity_confidence)\n                        \n                    \n                ) AS detail\n            FROM column_detail_DATE_DAY\n            \n        \n\n        )\n    \n\n\n    \n        , \n\n    \n    \n\n    \n    \n    \n\n    \n    \n    \n        \n        \n\n            \n\n\n            column_detail_IS_SHORT_STRING AS (\n                SELECT\n                    1\n                    \n                        , IS_SHORT_STRING\n                        , COUNT(*) AS cnt\n                    \n\n\n                    , SUM(COUNT(IS_SHORT_STRING)) OVER () AS cnt_total\n                    , SUM(COUNT(DISTINCT IS_SHORT_STRING)) OVER () AS cnt_unique\n                    , COUNT_IF(IS_SHORT_STRING IS NULL) AS cnt_null\n\n                FROM dbt_db.dbt_schema.data_generator_enriched_describe\n\n                GROUP BY ALL\n\n                \n\n            ) \n        \n\n        \n        , column_detail_info_boolean AS (\n            \n            \n            SELECT\n                'IS_SHORT_STRING' AS column_name\n                , OBJECT_CONSTRUCT(\n                    'column_name', 'IS_SHORT_STRING'\n                    , 'count' , MIN(cnt_total)\n                    , 'count_null' , MIN(cnt_null)\n                    \n                        \n                        , 'value_counts_top10',\n                            OBJECT_AGG\n                                (\n                                    COALESCE(IS_SHORT_STRING,'NULL'):: STRING\n                                , cnt)\n                                \n                    \n                ) AS detail\n            FROM column_detail_IS_SHORT_STRING\n            \n        \n\n        )\n    \n\n\n    \n\n    \n        \n\n\n\n\n\n    SELECT\n        assembed_result.meta_data_key\n        , assembed_result.meta_data_value\n        , assembed_result.identifier\n        , COALESCE(text_detail.detail, numeric_detail.detail,date_detail.detail, boolean_detail.detail) AS detail\n    FROM assembled_result AS assembed_result\n    LEFT JOIN column_detail_info_text AS text_detail\n    ON assembed_result.meta_data_key = text_detail.column_name\n    LEFT JOIN column_detail_info_numeric AS numeric_detail\n    ON assembed_result.meta_data_key = numeric_detail.column_name\n    LEFT JOIN column_detail_info_date AS date_detail\n    ON assembed_result.meta_data_key = date_detail.column_name\n    LEFT JOIN column_detail_info_boolean AS boolean_detail\n    ON assembed_result.meta_data_key = boolean_detail.column_name\n\n    ORDER BY index_pos ASC\n\n\n    \n\n\n)\nSELECT * FROM describe_dataframe\nWHERE\n    identifier = 'column'\n    AND\n    (\n        (\n            LOWER(meta_data_value) = 'text'\n\n            AND (\n\n                detail IS NULL\n\n                OR (\n                    meta_data_key = 'COMPANY_NAME' AND (\n                    DETAIL:column_name::string <> 'COMPANY_NAME'\n                    OR DETAIL:count::integer <> 54800\n                    OR DETAIL:count_null::integer <> 0\n                    OR DETAIL:unique::integer <> 5\n                    OR DETAIL:value_counts_top10:A::int <> 10960\n                    OR DETAIL:value_counts_top10:AMZN::int <> 10960\n                    OR DETAIL:value_counts_top10:FB::int <> 10960\n                    OR DETAIL:value_counts_top10:GOG::int <> 10960\n                    OR DETAIL:value_counts_top10:MSFT::int <> 10960\n                    )\n                )\n\n                OR (\n                    meta_data_key = 'COUNTRY' AND (\n                    DETAIL:column_name::string <> 'COUNTRY'\n                    OR DETAIL:count::integer <> 54800\n                    OR DETAIL:count_null::integer <> 0\n                    OR DETAIL:unique::integer <> 5\n                    OR DETAIL:value_counts_top10:A::int <> 10960\n                    OR DETAIL:value_counts_top10:AMZN::int <> 10960\n                    OR DETAIL:value_counts_top10:FB::int <> 10960\n                    OR DETAIL:value_counts_top10:GOG::int <> 10960\n                    OR DETAIL:value_counts_top10:MSFT::int <> 10960\n                    )\n                )\n            )\n        )\n        OR (\n            LOWER(meta_data_value) = 'number'\n\n            AND (\n\n                detail IS NULL\n\n                OR (\n                    meta_data_key = 'STR_LENGTH' AND (\n                    DETAIL:column_name::string <> 'STR_LENGTH'\n                    OR DETAIL:count::integer <> 54800\n                    OR DETAIL:count_null::integer <> 0\n                    OR DETAIL:max::int <> 6\n                    OR DETAIL:min::int <> 3\n                    OR DETAIL:mean::float <> 4.8\n                    OR ROUND(DETAIL:percentile_25::float,0) <> 4\n                    OR ROUND(DETAIL:percentile_50::float,0) <> 5\n                    OR ROUND(DETAIL:percentile_75::float,0) <> 6\n                    )\n                )\n            )\n        )\n        OR (\n            LOWER(meta_data_value) = 'date'\n\n            AND (\n\n                detail IS NULL\n\n                OR (\n                    meta_data_key = 'DATE_DAY' AND (\n                    DETAIL:column_name::string <> 'DATE_DAY'\n                    OR DETAIL:estimated_granularity::string <> 'Daily'\n                    OR DETAIL:estimated_granularity_confidence::float <> 1\n                    OR DETAIL:count::integer <> 54800\n                    OR DETAIL:count_null::integer <> 0\n                    OR DETAIL:min::date <> DATE('2019-01-01')\n                    OR DETAIL:max::date <> DATE('2024-12-31')\n                    )\n                )\n            )\n        )\n        OR (\n            LOWER(meta_data_value) = 'boolean'\n\n            AND (\n\n                detail IS NULL\n\n                OR (\n                    meta_data_key = 'IS_SHORT_STRING' AND (\n                    DETAIL:column_name::string <> 'IS_SHORT_STRING'\n                    OR DETAIL:count::integer <> 54800\n                    OR DETAIL:count_null::integer <> 0\n                    OR DETAIL:value_counts_top10:false::float <> 43840\n                    OR DETAIL:value_counts_top10:true::float <> 10960\n                    )\n                )\n            )\n        )\n    )", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-02T15:15:20.883316Z", "completed_at": "2024-09-02T15:15:30.609542Z"}, {"name": "execute", "started_at": "2024-09-02T15:15:30.610703Z", "completed_at": "2024-09-02T15:15:31.959517Z"}], "thread_id": "Thread-9 (worker)", "execution_time": 11.205320119857788, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b6c393-0000-9fe4-0001-0e1a00050466"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.dbt_eda_tools.describe_ex3", "compiled": true, "compiled_code": "\n\n\n\n    \n\n    \n    \n    \n    \n\n    \n\n    WITH\n    \n    dummy AS (SELECT 1)\n    \n        , \n    \n    \n    meta_data AS (\n        -- Need to explicitly cast the type before transposing the data\n        SELECT\n        column_name\n        , data_type\n        , COUNT(*) OVER ():: STRING AS nbr_of_columns\n        , CASE\n                \n                    \n                        WHEN DATA_TYPE IN ('VARCHAR', 'CHAR', 'CHARACTER', 'STRING', 'TEXT') THEN 'text'\n                    \n                \n                    \n                        WHEN DATA_TYPE IN ('DATE', 'DATETIME', 'TIMESTAMP', 'TIMESTAMP_LTZ', 'TIMESTAMP_NTZ', 'TIMESTAMP_TZ') THEN 'date'\n                    \n                \n                    \n                        WHEN DATA_TYPE IN ('NUMBER', 'DECIMAL', 'NUMERIC', 'INT', 'INTEGER', 'BIGINT', 'SMALLINT', 'FLOAT', 'FLOAT4', 'FLOAT8', 'DOUBLE', 'DOUBLE PRECISION', 'REAL', 'INT64', 'TINYINT', 'BYETEINT', 'BIGDECIMAL', 'FLOAT64') THEN 'numeric'\n                    \n                \n                    \n                        WHEN DATA_TYPE IN ('BOOLEAN', 'BOOL') THEN 'boolean'\n                    \n                \n                    \n                        WHEN DATA_TYPE IN ('TIME', 'NEEDSTOBEARRAY') THEN 'time'\n                    \n                \n                    \n                \n                    \n                \n                    \n                \n                    \n                \n        END AS data_type_input\n\n        \n            \n                , COUNT_IF(DATA_TYPE IN ('VARCHAR', 'CHAR', 'CHARACTER', 'STRING', 'TEXT')) OVER () :: STRING  AS nbr_of_text_columns\n            \n        \n            \n                , COUNT_IF(DATA_TYPE IN ('DATE', 'DATETIME', 'TIMESTAMP', 'TIMESTAMP_LTZ', 'TIMESTAMP_NTZ', 'TIMESTAMP_TZ')) OVER () :: STRING  AS nbr_of_date_columns\n            \n        \n            \n                , COUNT_IF(DATA_TYPE IN ('NUMBER', 'DECIMAL', 'NUMERIC', 'INT', 'INTEGER', 'BIGINT', 'SMALLINT', 'FLOAT', 'FLOAT4', 'FLOAT8', 'DOUBLE', 'DOUBLE PRECISION', 'REAL', 'INT64', 'TINYINT', 'BYETEINT', 'BIGDECIMAL', 'FLOAT64')) OVER () :: STRING  AS nbr_of_numeric_columns\n            \n        \n            \n                , COUNT_IF(DATA_TYPE IN ('BOOLEAN', 'BOOL')) OVER () :: STRING  AS nbr_of_boolean_columns\n            \n        \n            \n                , COUNT_IF(DATA_TYPE IN ('TIME', 'NEEDSTOBEARRAY')) OVER () :: STRING  AS nbr_of_time_columns\n            \n        \n            \n        \n            \n        \n            \n        \n            \n        \n\n        FROM INFORMATION_SCHEMA.TABLES t\n        INNER JOIN INFORMATION_SCHEMA.COLUMNS c ON\n                c.table_schema = t.table_schema AND c.table_name = t.table_name\n                WHERE t.table_name = 'DATA_AGGREGATED_MIXED_GRANULARITY'\n    )\n\n\n        \n        , \n\n    \n\n        meta_data_unique AS (\n            SELECT\n                    DISTINCT\n                    'dataset' AS identifier\n                    , NULL AS detail\n                    , nbr_of_columns\n                    , nbr_of_text_columns\n                    , nbr_of_date_columns\n                    , nbr_of_numeric_columns\n                    , nbr_of_boolean_columns\n                    , nbr_of_time_columns\n                FROM meta_data\n        )\n        , dataset_info AS (\n            SELECT\n                    CASE LOWER(meta_data_key)\n                            WHEN 'nbr_of_columns' THEN 1\n                            WHEN 'nbr_of_text_columns' THEN 2\n                            WHEN 'nbr_of_date_columns' THEN 3\n                            WHEN 'nbr_of_numeric_columns' THEN 4\n                            WHEN 'nbr_of_boolean_columns' THEN 5\n                            WHEN 'nbr_of_time_columns' THEN 6\n                    END AS index_pos\n                    , meta_data_key\n                    , identifier\n                    , detail\n                    , meta_data_value:: STRING AS meta_data_value\n                FROM meta_data_unique\n                UNPIVOT (meta_data_value FOR meta_data_key IN (nbr_of_columns, nbr_of_text_columns, nbr_of_date_columns, nbr_of_numeric_columns,nbr_of_boolean_columns,nbr_of_time_columns))\n        )\n\n    \n\n\n        \n        , \n\n    \n        rowcount_info AS (\n            SELECT\n                    0 AS index_pos\n                    , UPPER('nbr_of_rows') AS meta_data_key\n                    , 'dataset' AS identifier\n                    , NULL AS detail\n                    , COUNT(*):: STRING AS meta_data_value\n            FROM dbt_db.dbt_schema.data_aggregated_mixed_granularity\n            GROUP BY ALL\n        )\n    \n\n\n        \n        , \n\n    \n        column_info AS (\n            SELECT\n                20 + ROW_NUMBER() OVER (ORDER BY data_type) AS index_pos\n                , column_name AS meta_data_key\n                , 'column' AS identifier\n                , NULL AS detail\n                , data_type:: STRING AS meta_data_value\n            FROM meta_data\n        )\n    \n\n\n        \n        , \n    \n    assembled_result AS (\n        \n            SELECT\n                \n                     index_pos\n                \n                    , meta_data_key\n                \n                    , meta_data_value\n                \n                    , identifier\n                \n                    , detail\n                \n            FROM\n            dataset_info\n            UNION ALL\n        \n            SELECT\n                \n                     index_pos\n                \n                    , meta_data_key\n                \n                    , meta_data_value\n                \n                    , identifier\n                \n                    , detail\n                \n            FROM\n            rowcount_info\n            UNION ALL\n        \n            SELECT\n                \n                     index_pos\n                \n                    , meta_data_key\n                \n                    , meta_data_value\n                \n                    , identifier\n                \n                    , detail\n                \n            FROM\n            column_info\n            \n        \n    )\n\n\n    \n    \n        , \n\n    \n    \n\n    \n    \n    \n\n    \n    \n    \n        column_detail_info_numeric AS (\n            SELECT\n                '' AS column_name\n                , (NULL) AS detail\n        )\n    \n\n\n    \n        , \n\n    \n    \n\n    \n    \n    \n\n    \n    \n    \n        \n        \n\n            \n\n\n            column_detail_COMPANY_NAME AS (\n                SELECT\n                    1\n                    \n                        , COMPANY_NAME\n                        , COUNT(*) AS cnt\n                    \n\n\n                    , SUM(COUNT(COMPANY_NAME)) OVER () AS cnt_total\n                    , SUM(COUNT(DISTINCT COMPANY_NAME)) OVER () AS cnt_unique\n                    , COUNT_IF(COMPANY_NAME IS NULL) AS cnt_null\n\n                FROM dbt_db.dbt_schema.data_aggregated_mixed_granularity\n\n                GROUP BY ALL\n\n                \n                    LIMIT 10\n                \n\n            ) ,\n        \n\n            \n\n\n            column_detail_COUNTRY AS (\n                SELECT\n                    1\n                    \n                        , COUNTRY\n                        , COUNT(*) AS cnt\n                    \n\n\n                    , SUM(COUNT(COUNTRY)) OVER () AS cnt_total\n                    , SUM(COUNT(DISTINCT COUNTRY)) OVER () AS cnt_unique\n                    , COUNT_IF(COUNTRY IS NULL) AS cnt_null\n\n                FROM dbt_db.dbt_schema.data_aggregated_mixed_granularity\n\n                GROUP BY ALL\n\n                \n                    LIMIT 10\n                \n\n            ) \n        \n\n        \n        , column_detail_info_text AS (\n            \n            \n            SELECT\n                'COMPANY_NAME' AS column_name\n                , OBJECT_CONSTRUCT(\n                    'column_name', 'COMPANY_NAME'\n                    , 'count' , MIN(cnt_total)\n                    , 'count_null' , MIN(cnt_null)\n                    \n                        \n                            , 'unique' , MIN(cnt_unique)\n                        \n                        , 'value_counts_top10',\n                            OBJECT_AGG\n                                (\n                                    COALESCE(COMPANY_NAME,'NULL'):: STRING\n                                , cnt)\n                                \n                    \n                ) AS detail\n            FROM column_detail_COMPANY_NAME\n            UNION ALL\n        \n            \n            SELECT\n                'COUNTRY' AS column_name\n                , OBJECT_CONSTRUCT(\n                    'column_name', 'COUNTRY'\n                    , 'count' , MIN(cnt_total)\n                    , 'count_null' , MIN(cnt_null)\n                    \n                        \n                            , 'unique' , MIN(cnt_unique)\n                        \n                        , 'value_counts_top10',\n                            OBJECT_AGG\n                                (\n                                    COALESCE(COUNTRY,'NULL'):: STRING\n                                , cnt)\n                                \n                    \n                ) AS detail\n            FROM column_detail_COUNTRY\n            \n        \n\n        )\n    \n\n\n    \n        , \n\n    \n    \n\n    \n    \n    \n\n    \n    \n    \n        \n        \n\n            \n                \n            \n\n\n            column_detail_DATE_MIXED_GRANULARITY AS (\n                SELECT\n                    1\n                    \n                            , MIN(DATE_MIXED_GRANULARITY) AS min\n                            , MAX(DATE_MIXED_GRANULARITY) AS max\n                            \n                                , MIN('Monthly') AS estimated_granularity\n                                , MIN(0.800) AS estimated_granularity_confidence\n                            \n                    \n\n\n                    , SUM(COUNT(DATE_MIXED_GRANULARITY)) OVER () AS cnt_total\n                    , SUM(COUNT(DISTINCT DATE_MIXED_GRANULARITY)) OVER () AS cnt_unique\n                    , COUNT_IF(DATE_MIXED_GRANULARITY IS NULL) AS cnt_null\n\n                FROM dbt_db.dbt_schema.data_aggregated_mixed_granularity\n\n                GROUP BY ALL\n\n                \n\n            ) \n        \n\n        \n        , column_detail_info_date AS (\n            \n            \n            SELECT\n                'DATE_MIXED_GRANULARITY' AS column_name\n                , OBJECT_CONSTRUCT(\n                    'column_name', 'DATE_MIXED_GRANULARITY'\n                    , 'count' , MIN(cnt_total)\n                    , 'count_null' , MIN(cnt_null)\n                    \n                        , 'min' , MIN(min)\n                        , 'max' , MIN(max)\n                        \n                            , 'estimated_granularity' , MIN(estimated_granularity)\n                            , 'estimated_granularity_confidence' , MIN(estimated_granularity_confidence)\n                        \n                    \n                ) AS detail\n            FROM column_detail_DATE_MIXED_GRANULARITY\n            \n        \n\n        )\n    \n\n\n    \n        , \n\n    \n    \n\n    \n    \n    \n\n    \n    \n    \n        column_detail_info_boolean AS (\n            SELECT\n                '' AS column_name\n                , (NULL) AS detail\n        )\n    \n\n\n    \n\n    \n        \n\n\n\n\n\n    SELECT\n        assembed_result.meta_data_key\n        , assembed_result.meta_data_value\n        , assembed_result.identifier\n        , COALESCE(text_detail.detail, numeric_detail.detail,date_detail.detail, boolean_detail.detail) AS detail\n    FROM assembled_result AS assembed_result\n    LEFT JOIN column_detail_info_text AS text_detail\n    ON assembed_result.meta_data_key = text_detail.column_name\n    LEFT JOIN column_detail_info_numeric AS numeric_detail\n    ON assembed_result.meta_data_key = numeric_detail.column_name\n    LEFT JOIN column_detail_info_date AS date_detail\n    ON assembed_result.meta_data_key = date_detail.column_name\n    LEFT JOIN column_detail_info_boolean AS boolean_detail\n    ON assembed_result.meta_data_key = boolean_detail.column_name\n\n    ORDER BY index_pos ASC\n\n\n    \n\n", "relation_name": "dbt_db.dbt_schema.describe_ex3"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-02T15:15:24.808307Z", "completed_at": "2024-09-02T15:15:36.545606Z"}, {"name": "execute", "started_at": "2024-09-02T15:15:36.548082Z", "completed_at": "2024-09-02T15:15:37.723258Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 13.008728265762329, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b6c393-0000-9ff3-0001-0e1a000542d6"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.dbt_eda_tools.describe_ex1", "compiled": true, "compiled_code": "\n\n\n\n    \n\n    \n    \n    \n    \n\n    \n\n    WITH\n    \n    dummy AS (SELECT 1)\n    \n        , \n    \n    \n    meta_data AS (\n        -- Need to explicitly cast the type before transposing the data\n        SELECT\n        column_name\n        , data_type\n        , COUNT(*) OVER ():: STRING AS nbr_of_columns\n        , CASE\n                \n                    \n                        WHEN DATA_TYPE IN ('VARCHAR', 'CHAR', 'CHARACTER', 'STRING', 'TEXT') THEN 'text'\n                    \n                \n                    \n                        WHEN DATA_TYPE IN ('DATE', 'DATETIME', 'TIMESTAMP', 'TIMESTAMP_LTZ', 'TIMESTAMP_NTZ', 'TIMESTAMP_TZ') THEN 'date'\n                    \n                \n                    \n                        WHEN DATA_TYPE IN ('NUMBER', 'DECIMAL', 'NUMERIC', 'INT', 'INTEGER', 'BIGINT', 'SMALLINT', 'FLOAT', 'FLOAT4', 'FLOAT8', 'DOUBLE', 'DOUBLE PRECISION', 'REAL', 'INT64', 'TINYINT', 'BYETEINT', 'BIGDECIMAL', 'FLOAT64') THEN 'numeric'\n                    \n                \n                    \n                        WHEN DATA_TYPE IN ('BOOLEAN', 'BOOL') THEN 'boolean'\n                    \n                \n                    \n                        WHEN DATA_TYPE IN ('TIME', 'NEEDSTOBEARRAY') THEN 'time'\n                    \n                \n                    \n                \n                    \n                \n                    \n                \n                    \n                \n        END AS data_type_input\n\n        \n            \n                , COUNT_IF(DATA_TYPE IN ('VARCHAR', 'CHAR', 'CHARACTER', 'STRING', 'TEXT')) OVER () :: STRING  AS nbr_of_text_columns\n            \n        \n            \n                , COUNT_IF(DATA_TYPE IN ('DATE', 'DATETIME', 'TIMESTAMP', 'TIMESTAMP_LTZ', 'TIMESTAMP_NTZ', 'TIMESTAMP_TZ')) OVER () :: STRING  AS nbr_of_date_columns\n            \n        \n            \n                , COUNT_IF(DATA_TYPE IN ('NUMBER', 'DECIMAL', 'NUMERIC', 'INT', 'INTEGER', 'BIGINT', 'SMALLINT', 'FLOAT', 'FLOAT4', 'FLOAT8', 'DOUBLE', 'DOUBLE PRECISION', 'REAL', 'INT64', 'TINYINT', 'BYETEINT', 'BIGDECIMAL', 'FLOAT64')) OVER () :: STRING  AS nbr_of_numeric_columns\n            \n        \n            \n                , COUNT_IF(DATA_TYPE IN ('BOOLEAN', 'BOOL')) OVER () :: STRING  AS nbr_of_boolean_columns\n            \n        \n            \n                , COUNT_IF(DATA_TYPE IN ('TIME', 'NEEDSTOBEARRAY')) OVER () :: STRING  AS nbr_of_time_columns\n            \n        \n            \n        \n            \n        \n            \n        \n            \n        \n\n        FROM INFORMATION_SCHEMA.TABLES t\n        INNER JOIN INFORMATION_SCHEMA.COLUMNS c ON\n                c.table_schema = t.table_schema AND c.table_name = t.table_name\n                WHERE t.table_name = 'DATA_GENERATOR_ENRICHED_DESCRIBE'\n    )\n\n\n        \n        , \n\n    \n\n        meta_data_unique AS (\n            SELECT\n                    DISTINCT\n                    'dataset' AS identifier\n                    , NULL AS detail\n                    , nbr_of_columns\n                    , nbr_of_text_columns\n                    , nbr_of_date_columns\n                    , nbr_of_numeric_columns\n                    , nbr_of_boolean_columns\n                    , nbr_of_time_columns\n                FROM meta_data\n        )\n        , dataset_info AS (\n            SELECT\n                    CASE LOWER(meta_data_key)\n                            WHEN 'nbr_of_columns' THEN 1\n                            WHEN 'nbr_of_text_columns' THEN 2\n                            WHEN 'nbr_of_date_columns' THEN 3\n                            WHEN 'nbr_of_numeric_columns' THEN 4\n                            WHEN 'nbr_of_boolean_columns' THEN 5\n                            WHEN 'nbr_of_time_columns' THEN 6\n                    END AS index_pos\n                    , meta_data_key\n                    , identifier\n                    , detail\n                    , meta_data_value:: STRING AS meta_data_value\n                FROM meta_data_unique\n                UNPIVOT (meta_data_value FOR meta_data_key IN (nbr_of_columns, nbr_of_text_columns, nbr_of_date_columns, nbr_of_numeric_columns,nbr_of_boolean_columns,nbr_of_time_columns))\n        )\n\n    \n\n\n        \n        , \n\n    \n        rowcount_info AS (\n            SELECT\n                    0 AS index_pos\n                    , UPPER('nbr_of_rows') AS meta_data_key\n                    , 'dataset' AS identifier\n                    , NULL AS detail\n                    , COUNT(*):: STRING AS meta_data_value\n            FROM dbt_db.dbt_schema.data_generator_enriched_describe\n            GROUP BY ALL\n        )\n    \n\n\n        \n        , \n\n    \n        column_info AS (\n            SELECT\n                20 + ROW_NUMBER() OVER (ORDER BY data_type) AS index_pos\n                , column_name AS meta_data_key\n                , 'column' AS identifier\n                , NULL AS detail\n                , data_type:: STRING AS meta_data_value\n            FROM meta_data\n        )\n    \n\n\n        \n        , \n    \n    assembled_result AS (\n        \n            SELECT\n                \n                     index_pos\n                \n                    , meta_data_key\n                \n                    , meta_data_value\n                \n                    , identifier\n                \n                    , detail\n                \n            FROM\n            dataset_info\n            UNION ALL\n        \n            SELECT\n                \n                     index_pos\n                \n                    , meta_data_key\n                \n                    , meta_data_value\n                \n                    , identifier\n                \n                    , detail\n                \n            FROM\n            rowcount_info\n            UNION ALL\n        \n            SELECT\n                \n                     index_pos\n                \n                    , meta_data_key\n                \n                    , meta_data_value\n                \n                    , identifier\n                \n                    , detail\n                \n            FROM\n            column_info\n            \n        \n    )\n\n\n    \n    \n        , \n\n    \n    \n\n    \n    \n    \n\n    \n    \n    \n        \n        \n\n            \n\n\n            column_detail_STR_LENGTH AS (\n                SELECT\n                    1\n                    \n                            , MIN(STR_LENGTH) AS min\n                            , MAX(STR_LENGTH) AS max\n                            \n                                , ROUND(AVG(STR_LENGTH),4) AS avg\n                                \n                                , ROUND(TO_VARCHAR(APPROX_PERCENTILE(STR_LENGTH, 0.25),'999.999999'),4) AS percentile_25\n                                , ROUND(TO_VARCHAR(APPROX_PERCENTILE(STR_LENGTH, 0.5),'999.999999'),4) AS percentile_50\n                                , ROUND(TO_VARCHAR(APPROX_PERCENTILE(STR_LENGTH, 0.75),'999.999999'),4) AS percentile_75\n                                \n                            \n                    \n\n\n                    , SUM(COUNT(STR_LENGTH)) OVER () AS cnt_total\n                    , SUM(COUNT(DISTINCT STR_LENGTH)) OVER () AS cnt_unique\n                    , COUNT_IF(STR_LENGTH IS NULL) AS cnt_null\n\n                FROM dbt_db.dbt_schema.data_generator_enriched_describe\n\n                GROUP BY ALL\n\n                \n\n            ) \n        \n\n        \n        , column_detail_info_numeric AS (\n            \n            \n            SELECT\n                'STR_LENGTH' AS column_name\n                , OBJECT_CONSTRUCT(\n                    'column_name', 'STR_LENGTH'\n                    , 'count' , MIN(cnt_total)\n                    , 'count_null' , MIN(cnt_null)\n                    \n                        , 'min' , MIN(min)\n                        , 'max' , MIN(max)\n                        \n                            , 'mean' , MIN(avg)\n                            , 'percentile_25' , MIN(percentile_25)\n                            , 'percentile_50' , MIN(percentile_50)\n                            , 'percentile_75' , MIN(percentile_75)\n                        \n                    \n                ) AS detail\n            FROM column_detail_STR_LENGTH\n            \n        \n\n        )\n    \n\n\n    \n        , \n\n    \n    \n\n    \n    \n    \n\n    \n    \n    \n        \n        \n\n            \n\n\n            column_detail_COMPANY_NAME AS (\n                SELECT\n                    1\n                    \n                        , COMPANY_NAME\n                        , COUNT(*) AS cnt\n                    \n\n\n                    , SUM(COUNT(COMPANY_NAME)) OVER () AS cnt_total\n                    , SUM(COUNT(DISTINCT COMPANY_NAME)) OVER () AS cnt_unique\n                    , COUNT_IF(COMPANY_NAME IS NULL) AS cnt_null\n\n                FROM dbt_db.dbt_schema.data_generator_enriched_describe\n\n                GROUP BY ALL\n\n                \n                    LIMIT 10\n                \n\n            ) ,\n        \n\n            \n\n\n            column_detail_COUNTRY AS (\n                SELECT\n                    1\n                    \n                        , COUNTRY\n                        , COUNT(*) AS cnt\n                    \n\n\n                    , SUM(COUNT(COUNTRY)) OVER () AS cnt_total\n                    , SUM(COUNT(DISTINCT COUNTRY)) OVER () AS cnt_unique\n                    , COUNT_IF(COUNTRY IS NULL) AS cnt_null\n\n                FROM dbt_db.dbt_schema.data_generator_enriched_describe\n\n                GROUP BY ALL\n\n                \n                    LIMIT 10\n                \n\n            ) \n        \n\n        \n        , column_detail_info_text AS (\n            \n            \n            SELECT\n                'COMPANY_NAME' AS column_name\n                , OBJECT_CONSTRUCT(\n                    'column_name', 'COMPANY_NAME'\n                    , 'count' , MIN(cnt_total)\n                    , 'count_null' , MIN(cnt_null)\n                    \n                        \n                            , 'unique' , MIN(cnt_unique)\n                        \n                        , 'value_counts_top10',\n                            OBJECT_AGG\n                                (\n                                    COALESCE(COMPANY_NAME,'NULL'):: STRING\n                                , cnt)\n                                \n                    \n                ) AS detail\n            FROM column_detail_COMPANY_NAME\n            UNION ALL\n        \n            \n            SELECT\n                'COUNTRY' AS column_name\n                , OBJECT_CONSTRUCT(\n                    'column_name', 'COUNTRY'\n                    , 'count' , MIN(cnt_total)\n                    , 'count_null' , MIN(cnt_null)\n                    \n                        \n                            , 'unique' , MIN(cnt_unique)\n                        \n                        , 'value_counts_top10',\n                            OBJECT_AGG\n                                (\n                                    COALESCE(COUNTRY,'NULL'):: STRING\n                                , cnt)\n                                \n                    \n                ) AS detail\n            FROM column_detail_COUNTRY\n            \n        \n\n        )\n    \n\n\n    \n        , \n\n    \n    \n\n    \n    \n    \n\n    \n    \n    \n        \n        \n\n            \n                \n            \n\n\n            column_detail_DATE_DAY AS (\n                SELECT\n                    1\n                    \n                            , MIN(DATE_DAY) AS min\n                            , MAX(DATE_DAY) AS max\n                            \n                                , MIN('Daily') AS estimated_granularity\n                                , MIN(1.000) AS estimated_granularity_confidence\n                            \n                    \n\n\n                    , SUM(COUNT(DATE_DAY)) OVER () AS cnt_total\n                    , SUM(COUNT(DISTINCT DATE_DAY)) OVER () AS cnt_unique\n                    , COUNT_IF(DATE_DAY IS NULL) AS cnt_null\n\n                FROM dbt_db.dbt_schema.data_generator_enriched_describe\n\n                GROUP BY ALL\n\n                \n\n            ) \n        \n\n        \n        , column_detail_info_date AS (\n            \n            \n            SELECT\n                'DATE_DAY' AS column_name\n                , OBJECT_CONSTRUCT(\n                    'column_name', 'DATE_DAY'\n                    , 'count' , MIN(cnt_total)\n                    , 'count_null' , MIN(cnt_null)\n                    \n                        , 'min' , MIN(min)\n                        , 'max' , MIN(max)\n                        \n                            , 'estimated_granularity' , MIN(estimated_granularity)\n                            , 'estimated_granularity_confidence' , MIN(estimated_granularity_confidence)\n                        \n                    \n                ) AS detail\n            FROM column_detail_DATE_DAY\n            \n        \n\n        )\n    \n\n\n    \n        , \n\n    \n    \n\n    \n    \n    \n\n    \n    \n    \n        \n        \n\n            \n\n\n            column_detail_IS_SHORT_STRING AS (\n                SELECT\n                    1\n                    \n                        , IS_SHORT_STRING\n                        , COUNT(*) AS cnt\n                    \n\n\n                    , SUM(COUNT(IS_SHORT_STRING)) OVER () AS cnt_total\n                    , SUM(COUNT(DISTINCT IS_SHORT_STRING)) OVER () AS cnt_unique\n                    , COUNT_IF(IS_SHORT_STRING IS NULL) AS cnt_null\n\n                FROM dbt_db.dbt_schema.data_generator_enriched_describe\n\n                GROUP BY ALL\n\n                \n\n            ) \n        \n\n        \n        , column_detail_info_boolean AS (\n            \n            \n            SELECT\n                'IS_SHORT_STRING' AS column_name\n                , OBJECT_CONSTRUCT(\n                    'column_name', 'IS_SHORT_STRING'\n                    , 'count' , MIN(cnt_total)\n                    , 'count_null' , MIN(cnt_null)\n                    \n                        \n                        , 'value_counts_top10',\n                            OBJECT_AGG\n                                (\n                                    COALESCE(IS_SHORT_STRING,'NULL'):: STRING\n                                , cnt)\n                                \n                    \n                ) AS detail\n            FROM column_detail_IS_SHORT_STRING\n            \n        \n\n        )\n    \n\n\n    \n\n    \n        \n\n\n\n\n\n    SELECT\n        assembed_result.meta_data_key\n        , assembed_result.meta_data_value\n        , assembed_result.identifier\n        , COALESCE(text_detail.detail, numeric_detail.detail,date_detail.detail, boolean_detail.detail) AS detail\n    FROM assembled_result AS assembed_result\n    LEFT JOIN column_detail_info_text AS text_detail\n    ON assembed_result.meta_data_key = text_detail.column_name\n    LEFT JOIN column_detail_info_numeric AS numeric_detail\n    ON assembed_result.meta_data_key = numeric_detail.column_name\n    LEFT JOIN column_detail_info_date AS date_detail\n    ON assembed_result.meta_data_key = date_detail.column_name\n    LEFT JOIN column_detail_info_boolean AS boolean_detail\n    ON assembed_result.meta_data_key = boolean_detail.column_name\n\n    ORDER BY index_pos ASC\n\n\n    \n\n", "relation_name": "dbt_db.dbt_schema.describe_ex1"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-02T15:15:24.849632Z", "completed_at": "2024-09-02T15:15:34.039918Z"}, {"name": "execute", "started_at": "2024-09-02T15:15:34.044170Z", "completed_at": "2024-09-02T15:15:38.167863Z"}], "thread_id": "Thread-8 (worker)", "execution_time": 13.432107210159302, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b6c393-0000-9fa2-0001-0e1a00055346"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.dbt_eda_tools.describe_ex5", "compiled": true, "compiled_code": "\n\n\n\n    \n\n    \n    \n    \n    \n\n    \n\n    WITH\n    \n    dummy AS (SELECT 1)\n    \n    \n        , \n\n    \n    \n\n    \n    \n    \n\n    \n    \n    \n        \n        \n\n            \n\n\n            column_detail_COMPANY_NAME AS (\n                SELECT\n                    1\n                    \n                        , COMPANY_NAME\n                        , COUNT(*) AS cnt\n                    \n\n\n                    , SUM(COUNT(COMPANY_NAME)) OVER () AS cnt_total\n                    , SUM(COUNT(DISTINCT COMPANY_NAME)) OVER () AS cnt_unique\n                    , COUNT_IF(COMPANY_NAME IS NULL) AS cnt_null\n\n                FROM dbt_db.dbt_schema.data_generator_enriched_describe\n\n                GROUP BY ALL\n\n                \n                    LIMIT 10\n                \n\n            ) ,\n        \n\n            \n\n\n            column_detail_COUNTRY AS (\n                SELECT\n                    1\n                    \n                        , COUNTRY\n                        , COUNT(*) AS cnt\n                    \n\n\n                    , SUM(COUNT(COUNTRY)) OVER () AS cnt_total\n                    , SUM(COUNT(DISTINCT COUNTRY)) OVER () AS cnt_unique\n                    , COUNT_IF(COUNTRY IS NULL) AS cnt_null\n\n                FROM dbt_db.dbt_schema.data_generator_enriched_describe\n\n                GROUP BY ALL\n\n                \n                    LIMIT 10\n                \n\n            ) \n        \n\n        \n        , column_detail_info_text AS (\n            \n            \n            SELECT\n                'COMPANY_NAME' AS column_name\n                , OBJECT_CONSTRUCT(\n                    'column_name', 'COMPANY_NAME'\n                    , 'count' , MIN(cnt_total)\n                    , 'count_null' , MIN(cnt_null)\n                    \n                        \n                            , 'unique' , MIN(cnt_unique)\n                        \n                        , 'value_counts_top10',\n                            OBJECT_AGG\n                                (\n                                    COALESCE(COMPANY_NAME,'NULL'):: STRING\n                                , cnt)\n                                \n                    \n                ) AS detail\n            FROM column_detail_COMPANY_NAME\n            UNION ALL\n        \n            \n            SELECT\n                'COUNTRY' AS column_name\n                , OBJECT_CONSTRUCT(\n                    'column_name', 'COUNTRY'\n                    , 'count' , MIN(cnt_total)\n                    , 'count_null' , MIN(cnt_null)\n                    \n                        \n                            , 'unique' , MIN(cnt_unique)\n                        \n                        , 'value_counts_top10',\n                            OBJECT_AGG\n                                (\n                                    COALESCE(COUNTRY,'NULL'):: STRING\n                                , cnt)\n                                \n                    \n                ) AS detail\n            FROM column_detail_COUNTRY\n            \n        \n\n        )\n    \n\n\n    \n        , \n\n    \n    \n\n    \n    \n    \n\n    \n    \n    \n        \n        \n\n            \n\n\n            column_detail_IS_SHORT_STRING AS (\n                SELECT\n                    1\n                    \n                        , IS_SHORT_STRING\n                        , COUNT(*) AS cnt\n                    \n\n\n                    , SUM(COUNT(IS_SHORT_STRING)) OVER () AS cnt_total\n                    , SUM(COUNT(DISTINCT IS_SHORT_STRING)) OVER () AS cnt_unique\n                    , COUNT_IF(IS_SHORT_STRING IS NULL) AS cnt_null\n\n                FROM dbt_db.dbt_schema.data_generator_enriched_describe\n\n                GROUP BY ALL\n\n                \n\n            ) \n        \n\n        \n        , column_detail_info_boolean AS (\n            \n            \n            SELECT\n                'IS_SHORT_STRING' AS column_name\n                , OBJECT_CONSTRUCT(\n                    'column_name', 'IS_SHORT_STRING'\n                    , 'count' , MIN(cnt_total)\n                    , 'count_null' , MIN(cnt_null)\n                    \n                        \n                        , 'value_counts_top10',\n                            OBJECT_AGG\n                                (\n                                    COALESCE(IS_SHORT_STRING,'NULL'):: STRING\n                                , cnt)\n                                \n                    \n                ) AS detail\n            FROM column_detail_IS_SHORT_STRING\n            \n        \n\n        )\n    \n\n\n    \n        , \n\n    \n    \n\n    \n    \n    \n\n    \n    \n    \n        \n        \n\n            \n\n\n            column_detail_STR_LENGTH AS (\n                SELECT\n                    1\n                    \n                            , MIN(STR_LENGTH) AS min\n                            , MAX(STR_LENGTH) AS max\n                            \n                                , ROUND(AVG(STR_LENGTH),4) AS avg\n                                \n                                , ROUND(TO_VARCHAR(APPROX_PERCENTILE(STR_LENGTH, 0.25),'999.999999'),4) AS percentile_25\n                                , ROUND(TO_VARCHAR(APPROX_PERCENTILE(STR_LENGTH, 0.5),'999.999999'),4) AS percentile_50\n                                , ROUND(TO_VARCHAR(APPROX_PERCENTILE(STR_LENGTH, 0.75),'999.999999'),4) AS percentile_75\n                                \n                            \n                    \n\n\n                    , SUM(COUNT(STR_LENGTH)) OVER () AS cnt_total\n                    , SUM(COUNT(DISTINCT STR_LENGTH)) OVER () AS cnt_unique\n                    , COUNT_IF(STR_LENGTH IS NULL) AS cnt_null\n\n                FROM dbt_db.dbt_schema.data_generator_enriched_describe\n\n                GROUP BY ALL\n\n                \n\n            ) \n        \n\n        \n        , column_detail_info_numeric AS (\n            \n            \n            SELECT\n                'STR_LENGTH' AS column_name\n                , OBJECT_CONSTRUCT(\n                    'column_name', 'STR_LENGTH'\n                    , 'count' , MIN(cnt_total)\n                    , 'count_null' , MIN(cnt_null)\n                    \n                        , 'min' , MIN(min)\n                        , 'max' , MIN(max)\n                        \n                            , 'mean' , MIN(avg)\n                            , 'percentile_25' , MIN(percentile_25)\n                            , 'percentile_50' , MIN(percentile_50)\n                            , 'percentile_75' , MIN(percentile_75)\n                        \n                    \n                ) AS detail\n            FROM column_detail_STR_LENGTH\n            \n        \n\n        )\n    \n\n\n    \n\n    \n        \n\n\n\n\n\n    , unioned_data AS (\n            \n                SELECT\n                   'text' AS dtype\n                    , * FROM\n                column_detail_info_text\n                WHERE column_name != ''\n                \n                    UNION ALL\n                \n            \n                SELECT\n                   'boolean' AS dtype\n                    , * FROM\n                column_detail_info_boolean\n                WHERE column_name != ''\n                \n                    UNION ALL\n                \n            \n                SELECT\n                   'numeric' AS dtype\n                    , * FROM\n                column_detail_info_numeric\n                WHERE column_name != ''\n                \n            \n        )\n        \n        , unpivoted_data AS (\n                SELECT\n                    column_name\n                    , dtype\n                    , key AS pivot_key\n                    , value AS pivot_value\n                FROM\n            \n                unioned_data\n                , LATERAL FLATTEN(input => detail) f\n            \n\n        )\n        SELECT\n            column_name\n            , dtype\n            , \"'count'\"\n            , \"'count_null'\"\n            , ROUND(DIV0NULL(\n                \"'count_null'\"::double\n                , \"'count'\"::double+\"'count_null'\"::double\n            ),3) AS percent_null\n            , * EXCLUDE(column_name, dtype\n                , \"'count'\"\n                , \"'count_null'\"\n            )\n        FROM\n        unpivoted_data\n        PIVOT(MIN(pivot_value) FOR pivot_key IN (ANY))\n        ORDER BY dtype\n\n\n    \n\n", "relation_name": "dbt_db.dbt_schema.describe_ex5"}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2024-09-02T15:15:22.607467Z", "completed_at": "2024-09-02T15:15:34.354783Z"}, {"name": "execute", "started_at": "2024-09-02T15:15:34.356584Z", "completed_at": "2024-09-02T15:15:39.977246Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 17.4846134185791, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b6c393-0000-a06a-0001-0e1a0005826e"}, "message": null, "failures": 0, "unique_id": "test.dbt_eda_tools.assert_data_describe_column_details_estimated_granularity_yearly", "compiled": true, "compiled_code": "\n\nWITH\ndescribe_dataframe AS (\n    \n\n    \n\n    \n    \n    \n    \n\n    \n\n    WITH\n    \n    dummy AS (SELECT 1)\n    \n        , \n    \n    \n    meta_data AS (\n        -- Need to explicitly cast the type before transposing the data\n        SELECT\n        column_name\n        , data_type\n        , COUNT(*) OVER ():: STRING AS nbr_of_columns\n        , CASE\n                \n                    \n                        WHEN DATA_TYPE IN ('VARCHAR', 'CHAR', 'CHARACTER', 'STRING', 'TEXT') THEN 'text'\n                    \n                \n                    \n                        WHEN DATA_TYPE IN ('DATE', 'DATETIME', 'TIMESTAMP', 'TIMESTAMP_LTZ', 'TIMESTAMP_NTZ', 'TIMESTAMP_TZ') THEN 'date'\n                    \n                \n                    \n                        WHEN DATA_TYPE IN ('NUMBER', 'DECIMAL', 'NUMERIC', 'INT', 'INTEGER', 'BIGINT', 'SMALLINT', 'FLOAT', 'FLOAT4', 'FLOAT8', 'DOUBLE', 'DOUBLE PRECISION', 'REAL', 'INT64', 'TINYINT', 'BYETEINT', 'BIGDECIMAL', 'FLOAT64') THEN 'numeric'\n                    \n                \n                    \n                        WHEN DATA_TYPE IN ('BOOLEAN', 'BOOL') THEN 'boolean'\n                    \n                \n                    \n                        WHEN DATA_TYPE IN ('TIME', 'NEEDSTOBEARRAY') THEN 'time'\n                    \n                \n                    \n                \n                    \n                \n                    \n                \n                    \n                \n        END AS data_type_input\n\n        \n            \n                , COUNT_IF(DATA_TYPE IN ('VARCHAR', 'CHAR', 'CHARACTER', 'STRING', 'TEXT')) OVER () :: STRING  AS nbr_of_text_columns\n            \n        \n            \n                , COUNT_IF(DATA_TYPE IN ('DATE', 'DATETIME', 'TIMESTAMP', 'TIMESTAMP_LTZ', 'TIMESTAMP_NTZ', 'TIMESTAMP_TZ')) OVER () :: STRING  AS nbr_of_date_columns\n            \n        \n            \n                , COUNT_IF(DATA_TYPE IN ('NUMBER', 'DECIMAL', 'NUMERIC', 'INT', 'INTEGER', 'BIGINT', 'SMALLINT', 'FLOAT', 'FLOAT4', 'FLOAT8', 'DOUBLE', 'DOUBLE PRECISION', 'REAL', 'INT64', 'TINYINT', 'BYETEINT', 'BIGDECIMAL', 'FLOAT64')) OVER () :: STRING  AS nbr_of_numeric_columns\n            \n        \n            \n                , COUNT_IF(DATA_TYPE IN ('BOOLEAN', 'BOOL')) OVER () :: STRING  AS nbr_of_boolean_columns\n            \n        \n            \n                , COUNT_IF(DATA_TYPE IN ('TIME', 'NEEDSTOBEARRAY')) OVER () :: STRING  AS nbr_of_time_columns\n            \n        \n            \n        \n            \n        \n            \n        \n            \n        \n\n        FROM INFORMATION_SCHEMA.TABLES t\n        INNER JOIN INFORMATION_SCHEMA.COLUMNS c ON\n                c.table_schema = t.table_schema AND c.table_name = t.table_name\n                WHERE t.table_name = 'DATA_AGGREGATED_YEARLY_GRANULARITY'\n    )\n\n\n        \n        , \n\n    \n\n        meta_data_unique AS (\n            SELECT\n                    DISTINCT\n                    'dataset' AS identifier\n                    , NULL AS detail\n                    , nbr_of_columns\n                    , nbr_of_text_columns\n                    , nbr_of_date_columns\n                    , nbr_of_numeric_columns\n                    , nbr_of_boolean_columns\n                    , nbr_of_time_columns\n                FROM meta_data\n        )\n        , dataset_info AS (\n            SELECT\n                    CASE LOWER(meta_data_key)\n                            WHEN 'nbr_of_columns' THEN 1\n                            WHEN 'nbr_of_text_columns' THEN 2\n                            WHEN 'nbr_of_date_columns' THEN 3\n                            WHEN 'nbr_of_numeric_columns' THEN 4\n                            WHEN 'nbr_of_boolean_columns' THEN 5\n                            WHEN 'nbr_of_time_columns' THEN 6\n                    END AS index_pos\n                    , meta_data_key\n                    , identifier\n                    , detail\n                    , meta_data_value:: STRING AS meta_data_value\n                FROM meta_data_unique\n                UNPIVOT (meta_data_value FOR meta_data_key IN (nbr_of_columns, nbr_of_text_columns, nbr_of_date_columns, nbr_of_numeric_columns,nbr_of_boolean_columns,nbr_of_time_columns))\n        )\n\n    \n\n\n        \n        , \n\n    \n        rowcount_info AS (\n            SELECT\n                    0 AS index_pos\n                    , UPPER('nbr_of_rows') AS meta_data_key\n                    , 'dataset' AS identifier\n                    , NULL AS detail\n                    , COUNT(*):: STRING AS meta_data_value\n            FROM dbt_db.dbt_schema.data_aggregated_yearly_granularity\n            GROUP BY ALL\n        )\n    \n\n\n        \n        , \n\n    \n        column_info AS (\n            SELECT\n                20 + ROW_NUMBER() OVER (ORDER BY data_type) AS index_pos\n                , column_name AS meta_data_key\n                , 'column' AS identifier\n                , NULL AS detail\n                , data_type:: STRING AS meta_data_value\n            FROM meta_data\n        )\n    \n\n\n        \n        , \n    \n    assembled_result AS (\n        \n            SELECT\n                \n                     index_pos\n                \n                    , meta_data_key\n                \n                    , meta_data_value\n                \n                    , identifier\n                \n                    , detail\n                \n            FROM\n            dataset_info\n            UNION ALL\n        \n            SELECT\n                \n                     index_pos\n                \n                    , meta_data_key\n                \n                    , meta_data_value\n                \n                    , identifier\n                \n                    , detail\n                \n            FROM\n            rowcount_info\n            UNION ALL\n        \n            SELECT\n                \n                     index_pos\n                \n                    , meta_data_key\n                \n                    , meta_data_value\n                \n                    , identifier\n                \n                    , detail\n                \n            FROM\n            column_info\n            \n        \n    )\n\n\n    \n    \n        , \n\n    \n    \n\n    \n    \n    \n\n    \n    \n    \n        column_detail_info_numeric AS (\n            SELECT\n                '' AS column_name\n                , (NULL) AS detail\n        )\n    \n\n\n    \n        , \n\n    \n    \n\n    \n    \n    \n\n    \n    \n    \n        \n        \n\n            \n\n\n            column_detail_COUNTRY AS (\n                SELECT\n                    1\n                    \n                        , COUNTRY\n                        , COUNT(*) AS cnt\n                    \n\n\n                    , SUM(COUNT(COUNTRY)) OVER () AS cnt_total\n                    , SUM(COUNT(DISTINCT COUNTRY)) OVER () AS cnt_unique\n                    , COUNT_IF(COUNTRY IS NULL) AS cnt_null\n\n                FROM dbt_db.dbt_schema.data_aggregated_yearly_granularity\n\n                GROUP BY ALL\n\n                \n                    LIMIT 10\n                \n\n            ) ,\n        \n\n            \n\n\n            column_detail_COMPANY_NAME AS (\n                SELECT\n                    1\n                    \n                        , COMPANY_NAME\n                        , COUNT(*) AS cnt\n                    \n\n\n                    , SUM(COUNT(COMPANY_NAME)) OVER () AS cnt_total\n                    , SUM(COUNT(DISTINCT COMPANY_NAME)) OVER () AS cnt_unique\n                    , COUNT_IF(COMPANY_NAME IS NULL) AS cnt_null\n\n                FROM dbt_db.dbt_schema.data_aggregated_yearly_granularity\n\n                GROUP BY ALL\n\n                \n                    LIMIT 10\n                \n\n            ) \n        \n\n        \n        , column_detail_info_text AS (\n            \n            \n            SELECT\n                'COUNTRY' AS column_name\n                , OBJECT_CONSTRUCT(\n                    'column_name', 'COUNTRY'\n                    , 'count' , MIN(cnt_total)\n                    , 'count_null' , MIN(cnt_null)\n                    \n                        \n                            , 'unique' , MIN(cnt_unique)\n                        \n                        , 'value_counts_top10',\n                            OBJECT_AGG\n                                (\n                                    COALESCE(COUNTRY,'NULL'):: STRING\n                                , cnt)\n                                \n                    \n                ) AS detail\n            FROM column_detail_COUNTRY\n            UNION ALL\n        \n            \n            SELECT\n                'COMPANY_NAME' AS column_name\n                , OBJECT_CONSTRUCT(\n                    'column_name', 'COMPANY_NAME'\n                    , 'count' , MIN(cnt_total)\n                    , 'count_null' , MIN(cnt_null)\n                    \n                        \n                            , 'unique' , MIN(cnt_unique)\n                        \n                        , 'value_counts_top10',\n                            OBJECT_AGG\n                                (\n                                    COALESCE(COMPANY_NAME,'NULL'):: STRING\n                                , cnt)\n                                \n                    \n                ) AS detail\n            FROM column_detail_COMPANY_NAME\n            \n        \n\n        )\n    \n\n\n    \n        , \n\n    \n    \n\n    \n    \n    \n\n    \n    \n    \n        \n        \n\n            \n                \n            \n\n\n            column_detail_DATE_MIXED_GRANULARITY AS (\n                SELECT\n                    1\n                    \n                            , MIN(DATE_MIXED_GRANULARITY) AS min\n                            , MAX(DATE_MIXED_GRANULARITY) AS max\n                            \n                                , MIN('Yearly') AS estimated_granularity\n                                , MIN(1.000) AS estimated_granularity_confidence\n                            \n                    \n\n\n                    , SUM(COUNT(DATE_MIXED_GRANULARITY)) OVER () AS cnt_total\n                    , SUM(COUNT(DISTINCT DATE_MIXED_GRANULARITY)) OVER () AS cnt_unique\n                    , COUNT_IF(DATE_MIXED_GRANULARITY IS NULL) AS cnt_null\n\n                FROM dbt_db.dbt_schema.data_aggregated_yearly_granularity\n\n                GROUP BY ALL\n\n                \n\n            ) \n        \n\n        \n        , column_detail_info_date AS (\n            \n            \n            SELECT\n                'DATE_MIXED_GRANULARITY' AS column_name\n                , OBJECT_CONSTRUCT(\n                    'column_name', 'DATE_MIXED_GRANULARITY'\n                    , 'count' , MIN(cnt_total)\n                    , 'count_null' , MIN(cnt_null)\n                    \n                        , 'min' , MIN(min)\n                        , 'max' , MIN(max)\n                        \n                            , 'estimated_granularity' , MIN(estimated_granularity)\n                            , 'estimated_granularity_confidence' , MIN(estimated_granularity_confidence)\n                        \n                    \n                ) AS detail\n            FROM column_detail_DATE_MIXED_GRANULARITY\n            \n        \n\n        )\n    \n\n\n    \n        , \n\n    \n    \n\n    \n    \n    \n\n    \n    \n    \n        column_detail_info_boolean AS (\n            SELECT\n                '' AS column_name\n                , (NULL) AS detail\n        )\n    \n\n\n    \n\n    \n        \n\n\n\n\n\n    SELECT\n        assembed_result.meta_data_key\n        , assembed_result.meta_data_value\n        , assembed_result.identifier\n        , COALESCE(text_detail.detail, numeric_detail.detail,date_detail.detail, boolean_detail.detail) AS detail\n    FROM assembled_result AS assembed_result\n    LEFT JOIN column_detail_info_text AS text_detail\n    ON assembed_result.meta_data_key = text_detail.column_name\n    LEFT JOIN column_detail_info_numeric AS numeric_detail\n    ON assembed_result.meta_data_key = numeric_detail.column_name\n    LEFT JOIN column_detail_info_date AS date_detail\n    ON assembed_result.meta_data_key = date_detail.column_name\n    LEFT JOIN column_detail_info_boolean AS boolean_detail\n    ON assembed_result.meta_data_key = boolean_detail.column_name\n\n    ORDER BY index_pos ASC\n\n\n    \n\n\n)\nSELECT * FROM describe_dataframe\nWHERE\n    identifier = 'column'\n    AND\n    (\n        (\n            LOWER(meta_data_value) = 'date'\n\n            AND (\n\n                detail IS NULL\n\n                OR (\n                    meta_data_key = 'DATE_MIXED_GRANULARITY' AND (\n                    DETAIL:column_name::string <> 'DATE_MIXED_GRANULARITY'\n                    OR DETAIL:estimated_granularity::string <> 'Yearly'\n                    OR DETAIL:estimated_granularity_confidence::float <> 1\n                    OR DETAIL:count::integer <> 4\n                    OR DETAIL:count_null::integer <> 0\n                    OR DETAIL:min::date <> DATE('2019-01-01')\n                    OR DETAIL:max::date <> DATE('2022-01-01')\n                    )\n                )\n            )\n        )\n    )", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-09-02T15:15:24.831862Z", "completed_at": "2024-09-02T15:15:36.940658Z"}, {"name": "execute", "started_at": "2024-09-02T15:15:36.941926Z", "completed_at": "2024-09-02T15:15:40.265328Z"}], "thread_id": "Thread-10 (worker)", "execution_time": 15.536026239395142, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01b6c393-0000-a06a-0001-0e1a00058272"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.dbt_eda_tools.describe_ex4", "compiled": true, "compiled_code": "\n\n\n\n    \n\n    \n    \n    \n    \n\n    \n\n    WITH\n    \n    dummy AS (SELECT 1)\n    \n    \n        , \n\n    \n    \n\n    \n    \n    \n\n    \n    \n    \n        \n        \n\n            \n\n\n            column_detail_STR_LENGTH AS (\n                SELECT\n                    1\n                    \n                            , MIN(STR_LENGTH) AS min\n                            , MAX(STR_LENGTH) AS max\n                            \n                                , ROUND(AVG(STR_LENGTH),4) AS avg\n                                \n                                , ROUND(TO_VARCHAR(APPROX_PERCENTILE(STR_LENGTH, 0.25),'999.999999'),4) AS percentile_25\n                                , ROUND(TO_VARCHAR(APPROX_PERCENTILE(STR_LENGTH, 0.5),'999.999999'),4) AS percentile_50\n                                , ROUND(TO_VARCHAR(APPROX_PERCENTILE(STR_LENGTH, 0.75),'999.999999'),4) AS percentile_75\n                                \n                            \n                    \n\n\n                    , SUM(COUNT(STR_LENGTH)) OVER () AS cnt_total\n                    , SUM(COUNT(DISTINCT STR_LENGTH)) OVER () AS cnt_unique\n                    , COUNT_IF(STR_LENGTH IS NULL) AS cnt_null\n\n                FROM dbt_db.dbt_schema.data_generator_enriched_describe\n\n                GROUP BY ALL\n\n                \n\n            ) \n        \n\n        \n        , column_detail_info_numeric AS (\n            \n            \n            SELECT\n                'STR_LENGTH' AS column_name\n                , OBJECT_CONSTRUCT(\n                    'column_name', 'STR_LENGTH'\n                    , 'count' , MIN(cnt_total)\n                    , 'count_null' , MIN(cnt_null)\n                    \n                        , 'min' , MIN(min)\n                        , 'max' , MIN(max)\n                        \n                            , 'mean' , MIN(avg)\n                            , 'percentile_25' , MIN(percentile_25)\n                            , 'percentile_50' , MIN(percentile_50)\n                            , 'percentile_75' , MIN(percentile_75)\n                        \n                    \n                ) AS detail\n            FROM column_detail_STR_LENGTH\n            \n        \n\n        )\n    \n\n\n    \n        , \n\n    \n    \n\n    \n    \n    \n\n    \n    \n    \n        \n        \n\n            \n\n\n            column_detail_COMPANY_NAME AS (\n                SELECT\n                    1\n                    \n                        , COMPANY_NAME\n                        , COUNT(*) AS cnt\n                    \n\n\n                    , SUM(COUNT(COMPANY_NAME)) OVER () AS cnt_total\n                    , SUM(COUNT(DISTINCT COMPANY_NAME)) OVER () AS cnt_unique\n                    , COUNT_IF(COMPANY_NAME IS NULL) AS cnt_null\n\n                FROM dbt_db.dbt_schema.data_generator_enriched_describe\n\n                GROUP BY ALL\n\n                \n                    LIMIT 10\n                \n\n            ) ,\n        \n\n            \n\n\n            column_detail_COUNTRY AS (\n                SELECT\n                    1\n                    \n                        , COUNTRY\n                        , COUNT(*) AS cnt\n                    \n\n\n                    , SUM(COUNT(COUNTRY)) OVER () AS cnt_total\n                    , SUM(COUNT(DISTINCT COUNTRY)) OVER () AS cnt_unique\n                    , COUNT_IF(COUNTRY IS NULL) AS cnt_null\n\n                FROM dbt_db.dbt_schema.data_generator_enriched_describe\n\n                GROUP BY ALL\n\n                \n                    LIMIT 10\n                \n\n            ) \n        \n\n        \n        , column_detail_info_text AS (\n            \n            \n            SELECT\n                'COMPANY_NAME' AS column_name\n                , OBJECT_CONSTRUCT(\n                    'column_name', 'COMPANY_NAME'\n                    , 'count' , MIN(cnt_total)\n                    , 'count_null' , MIN(cnt_null)\n                    \n                        \n                            , 'unique' , MIN(cnt_unique)\n                        \n                        , 'value_counts_top10',\n                            OBJECT_AGG\n                                (\n                                    COALESCE(COMPANY_NAME,'NULL'):: STRING\n                                , cnt)\n                                \n                    \n                ) AS detail\n            FROM column_detail_COMPANY_NAME\n            UNION ALL\n        \n            \n            SELECT\n                'COUNTRY' AS column_name\n                , OBJECT_CONSTRUCT(\n                    'column_name', 'COUNTRY'\n                    , 'count' , MIN(cnt_total)\n                    , 'count_null' , MIN(cnt_null)\n                    \n                        \n                            , 'unique' , MIN(cnt_unique)\n                        \n                        , 'value_counts_top10',\n                            OBJECT_AGG\n                                (\n                                    COALESCE(COUNTRY,'NULL'):: STRING\n                                , cnt)\n                                \n                    \n                ) AS detail\n            FROM column_detail_COUNTRY\n            \n        \n\n        )\n    \n\n\n    \n        , \n\n    \n    \n\n    \n    \n    \n\n    \n    \n    \n        \n        \n\n            \n                \n            \n\n\n            column_detail_DATE_DAY AS (\n                SELECT\n                    1\n                    \n                            , MIN(DATE_DAY) AS min\n                            , MAX(DATE_DAY) AS max\n                            \n                                , MIN('Daily') AS estimated_granularity\n                                , MIN(1.000) AS estimated_granularity_confidence\n                            \n                    \n\n\n                    , SUM(COUNT(DATE_DAY)) OVER () AS cnt_total\n                    , SUM(COUNT(DISTINCT DATE_DAY)) OVER () AS cnt_unique\n                    , COUNT_IF(DATE_DAY IS NULL) AS cnt_null\n\n                FROM dbt_db.dbt_schema.data_generator_enriched_describe\n\n                GROUP BY ALL\n\n                \n\n            ) \n        \n\n        \n        , column_detail_info_date AS (\n            \n            \n            SELECT\n                'DATE_DAY' AS column_name\n                , OBJECT_CONSTRUCT(\n                    'column_name', 'DATE_DAY'\n                    , 'count' , MIN(cnt_total)\n                    , 'count_null' , MIN(cnt_null)\n                    \n                        , 'min' , MIN(min)\n                        , 'max' , MIN(max)\n                        \n                            , 'estimated_granularity' , MIN(estimated_granularity)\n                            , 'estimated_granularity_confidence' , MIN(estimated_granularity_confidence)\n                        \n                    \n                ) AS detail\n            FROM column_detail_DATE_DAY\n            \n        \n\n        )\n    \n\n\n    \n        , \n\n    \n    \n\n    \n    \n    \n\n    \n    \n    \n        \n        \n\n            \n\n\n            column_detail_IS_SHORT_STRING AS (\n                SELECT\n                    1\n                    \n                        , IS_SHORT_STRING\n                        , COUNT(*) AS cnt\n                    \n\n\n                    , SUM(COUNT(IS_SHORT_STRING)) OVER () AS cnt_total\n                    , SUM(COUNT(DISTINCT IS_SHORT_STRING)) OVER () AS cnt_unique\n                    , COUNT_IF(IS_SHORT_STRING IS NULL) AS cnt_null\n\n                FROM dbt_db.dbt_schema.data_generator_enriched_describe\n\n                GROUP BY ALL\n\n                \n\n            ) \n        \n\n        \n        , column_detail_info_boolean AS (\n            \n            \n            SELECT\n                'IS_SHORT_STRING' AS column_name\n                , OBJECT_CONSTRUCT(\n                    'column_name', 'IS_SHORT_STRING'\n                    , 'count' , MIN(cnt_total)\n                    , 'count_null' , MIN(cnt_null)\n                    \n                        \n                        , 'value_counts_top10',\n                            OBJECT_AGG\n                                (\n                                    COALESCE(IS_SHORT_STRING,'NULL'):: STRING\n                                , cnt)\n                                \n                    \n                ) AS detail\n            FROM column_detail_IS_SHORT_STRING\n            \n        \n\n        )\n    \n\n\n    \n\n    \n        \n\n\n\n\n\n    , unioned_data AS (\n            \n                SELECT\n                   'numeric' AS dtype\n                    , * FROM\n                column_detail_info_numeric\n                WHERE column_name != ''\n                \n                    UNION ALL\n                \n            \n                SELECT\n                   'text' AS dtype\n                    , * FROM\n                column_detail_info_text\n                WHERE column_name != ''\n                \n                    UNION ALL\n                \n            \n                SELECT\n                   'date' AS dtype\n                    , * FROM\n                column_detail_info_date\n                WHERE column_name != ''\n                \n                    UNION ALL\n                \n            \n                SELECT\n                   'boolean' AS dtype\n                    , * FROM\n                column_detail_info_boolean\n                WHERE column_name != ''\n                \n            \n        )\n        \n        , unpivoted_data AS (\n                SELECT\n                    column_name\n                    , dtype\n                    , key AS pivot_key\n                    , value AS pivot_value\n                FROM\n            \n                unioned_data\n                , LATERAL FLATTEN(input => detail) f\n            \n\n        )\n        SELECT\n            column_name\n            , dtype\n            , \"'count'\"\n            , \"'count_null'\"\n            , ROUND(DIV0NULL(\n                \"'count_null'\"::double\n                , \"'count'\"::double+\"'count_null'\"::double\n            ),3) AS percent_null\n            , * EXCLUDE(column_name, dtype\n                , \"'count'\"\n                , \"'count_null'\"\n            )\n        FROM\n        unpivoted_data\n        PIVOT(MIN(pivot_value) FOR pivot_key IN (ANY))\n        ORDER BY dtype\n\n\n    \n\n", "relation_name": "dbt_db.dbt_schema.describe_ex4"}], "elapsed_time": 44.704265117645264, "args": {"partial_parse_file_diff": true, "populate_cache": true, "partial_parse": true, "log_path": "C:\\Users\\shank\\Google Drive\\Jupyter Data\\Consulting\\External\\Kering\\Sourcev1\\Coding\\dbt_eda_tools\\logs", "log_format": "default", "use_colors": true, "log_level": "info", "which": "build", "exclude": [], "log_level_file": "debug", "introspect": true, "export_saved_queries": false, "profiles_dir": "C:\\Users\\shank\\.dbt", "use_colors_file": true, "favor_state": false, "vars": {}, "print": true, "log_format_file": "debug", "require_explicit_package_overrides_for_builtin_materializations": true, "log_file_max_bytes": 10485760, "send_anonymous_usage_stats": true, "macro_debugging": false, "static_parser": true, "invocation_command": "dbt build", "enable_legacy_logger": false, "version_check": true, "empty": false, "printer_width": 80, "write_json": true, "indirect_selection": "eager", "source_freshness_run_project_hooks": false, "cache_selected_only": false, "quiet": false, "resource_types": [], "warn_error_options": {"include": [], "exclude": []}, "exclude_resource_types": [], "select": [], "require_resource_names_without_spaces": false, "strict_mode": false, "show": false, "defer": false, "show_resource_report": false, "include_saved_query": false, "project_dir": "C:\\Users\\shank\\Google Drive\\Jupyter Data\\Consulting\\External\\Kering\\Sourcev1\\Coding\\dbt_eda_tools"}}