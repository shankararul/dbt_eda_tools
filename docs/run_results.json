{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.8.4", "generated_at": "2024-08-05T18:42:47.741389Z", "invocation_id": "ff8b1f15-6c1a-4d3b-ad40-fe77da03764b", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T18:42:45.603177Z", "completed_at": "2024-08-05T18:42:46.912612Z"}, {"name": "execute", "started_at": "2024-08-05T18:42:46.912612Z", "completed_at": "2024-08-05T18:42:46.912612Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.409226894378662, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_eda_tools.data_generator", "compiled": true, "compiled_code": "WITH date_gen AS (\n    \n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n     + \n    \n    p7.generated_number * power(2, 7)\n     + \n    \n    p8.generated_number * power(2, 8)\n     + \n    \n    p9.generated_number * power(2, 9)\n     + \n    \n    p10.generated_number * power(2, 10)\n     + \n    \n    p11.generated_number * power(2, 11)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n     cross join \n    \n    p as p11\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 2192\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        cast('2019-01-01' as date)\n        )\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= cast('2025-01-01' as date)\n\n)\n\nselect * from filtered\n\n\n),\ncompany_gen AS (\n     SELECT 'MSFT' AS company_name\n     UNION ALL\n     SELECT 'GOG' AS company_name\n     UNION ALL\n     SELECT 'AMZN' AS company_name\n     UNION ALL\n     SELECT 'A' AS company_name\n     UNION ALL\n     SELECT 'FB' AS company_name\n),\ncountry_gen AS (\n    SELECT 'FR' AS country\n    UNION ALL\n    SELECT 'DE' AS country\n    UNION ALL\n    SELECT 'GB' AS country\n    UNION ALL\n    SELECT 'US' AS country\n    UNION all\n    SELECT 'CA' AS country\n)\n\nSELECT *, LENGTH(company_name)+LENGTH(country) AS str_length\nFROM date_gen, company_gen, country_gen", "relation_name": "dbt_db.dbt_schema.data_generator"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T18:42:47.039545Z", "completed_at": "2024-08-05T18:42:47.132820Z"}, {"name": "execute", "started_at": "2024-08-05T18:42:47.155415Z", "completed_at": "2024-08-05T18:42:47.155415Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.1343381404876709, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_eda_tools.data_aggregated", "compiled": true, "compiled_code": "SELECT\n    company_name\n    , country\n    , MIN(str_length) AS str_length\nFROM dbt_db.dbt_schema.data_generator\nWHERE\n    --exclude some rows. Keeps only 2 companies for France and 3 countries for MSFT\n    NOT (\n        (company_name = 'MSFT' AND country = 'DE')\n        OR\n        (country = 'FR' AND (company_name IN ('GOG','A','MSFT')))\n    )\nGROUP BY 1,2", "relation_name": "dbt_db.dbt_schema.data_aggregated"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T18:42:47.063923Z", "completed_at": "2024-08-05T18:42:47.159282Z"}, {"name": "execute", "started_at": "2024-08-05T18:42:47.176613Z", "completed_at": "2024-08-05T18:42:47.176613Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.15446758270263672, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_eda_tools.data_generator_enriched_describe", "compiled": true, "compiled_code": "\n\n\n\nSELECT\n    *\n    , IFF(str_length<4,True,False)   AS is_short_string\nFROM dbt_db.dbt_schema.data_generator", "relation_name": "dbt_db.dbt_schema.data_generator_enriched_describe"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T18:42:47.095160Z", "completed_at": "2024-08-05T18:42:47.165587Z"}, {"name": "execute", "started_at": "2024-08-05T18:42:47.193176Z", "completed_at": "2024-08-05T18:42:47.193176Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.16109824180603027, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_eda_tools.missing_day", "compiled": true, "compiled_code": "\nWITH\nmissing_day AS (\n    SELECT *\n    FROM dbt_db.dbt_schema.data_generator\n    WHERE NOT (\n        \n        (company_name = 'FB' AND country = 'CA' AND date_day BETWEEN DATE('2019-05-01') AND DATE('2019-05-17')) OR\n        (company_name = 'GOOG' AND country = 'FR' AND date_day BETWEEN DATE('2020-01-01') AND DATE('2020-05-01')) OR\n        (company_name = 'AAPL' AND country = 'US' AND date_day BETWEEN DATE('2021-12-15') AND DATE('2021-12-26')) OR\n        \n        (date_day  BETWEEN DATE('2022-05-01') AND DATE('2022-05-05')) OR\n        \n        (country = 'DE' AND date_day BETWEEN DATE('2019-09-07') AND DATE('2019-09-09')) OR\n        \n        (company_name = 'AMZN' AND date_day BETWEEN DATE('2019-09-07') AND DATE('2019-09-09'))\n    )\n)\nSELECT * FROM missing_day", "relation_name": "dbt_db.dbt_schema.missing_day"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T18:42:47.137380Z", "completed_at": "2024-08-05T18:42:47.176613Z"}, {"name": "execute", "started_at": "2024-08-05T18:42:47.208046Z", "completed_at": "2024-08-05T18:42:47.208046Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 0.1690199375152588, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_eda_tools.missing_year", "compiled": true, "compiled_code": "\nWITH\nraw_data AS (\n    SELECT\n        DISTINCT\n        company_name\n        , country\n        , CAST(date_trunc('year', date_day) AS Date) AS date_year\n    FROM dbt_db.dbt_schema.data_generator\n)\n, missing_year AS (\n    SELECT * FROM raw_data\n    WHERE NOT (\n        \n        (company_name = 'FB' AND country = 'CA' AND date_year BETWEEN DATE('2019-05-01') AND DATE('2020-07-05')) OR\n        (company_name = 'GOOG' AND country = 'FR' AND date_year BETWEEN DATE('2020-01-01') AND DATE('2021-05-01')) OR\n        \n        (date_year  BETWEEN DATE('2021-05-01') AND DATE('2022-08-05')) OR\n        \n        (country = 'DE' AND date_year BETWEEN DATE('2019-09-07') AND DATE('2020-11-09')) OR\n        \n        (company_name = 'AMZN' AND date_year BETWEEN DATE('2020-01-07') AND DATE('2021-09-09')) OR\n        (date_year BETWEEN DATE('2021-05-07') AND DATE('2022-09-09'))\n    )\n)\nSELECT * FROM missing_year", "relation_name": "dbt_db.dbt_schema.missing_year"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T18:42:47.100179Z", "completed_at": "2024-08-05T18:42:47.188140Z"}, {"name": "execute", "started_at": "2024-08-05T18:42:47.210363Z", "completed_at": "2024-08-05T18:42:47.210363Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.17133021354675293, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_eda_tools.missing_month", "compiled": true, "compiled_code": "\nWITH  raw_data AS (\n    SELECT\n        DISTINCT\n        company_name\n        , country\n        , CAST(date_trunc('month', date_day) AS Date) AS date_month\n    FROM dbt_db.dbt_schema.data_generator\n),\nmissing_month AS (\n    SELECT * FROM raw_data\n    WHERE NOT (\n        \n        (company_name = 'FB' AND country = 'CA' AND date_month BETWEEN DATE('2019-05-01') AND DATE('2019-07-05')) OR\n        (company_name = 'GOOG' AND country = 'FR' AND date_month BETWEEN DATE('2020-01-01') AND DATE('2020-05-01')) OR\n        (company_name = 'AAPL' AND country = 'US' AND date_month BETWEEN DATE('2021-05-15') AND DATE('2021-12-26')) OR\n        \n        (date_month  BETWEEN DATE('2022-05-01') AND DATE('2022-08-05')) OR\n        \n        (country = 'DE' AND date_month BETWEEN DATE('2019-09-07') AND DATE('2019-11-09')) OR\n        \n        (company_name = 'AMZN' AND date_month BETWEEN DATE('2019-01-07') AND DATE('2019-09-09'))\n    )\n)\nSELECT * FROM missing_month", "relation_name": "dbt_db.dbt_schema.missing_month"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T18:42:47.237032Z", "completed_at": "2024-08-05T18:42:47.367642Z"}, {"name": "execute", "started_at": "2024-08-05T18:42:47.412734Z", "completed_at": "2024-08-05T18:42:47.412734Z"}], "thread_id": "Thread-9 (worker)", "execution_time": 0.21683382987976074, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_eda_tools.percent_of_total_ex1", "compiled": true, "compiled_code": "SELECT\n    country\n    , SUM(str_length) AS sum_2_str_length\n    -- example: sum\n    , \n\n\n\n\n    ROUND(\n      \n        sum(str_length)\n        /\n        SUM(sum(str_length)) OVER ()\n      \n    , 3)\n AS sum_percent\n\n    , COUNT(company_name) AS count_company_name\n    -- example: count\n    -- defaults to count if no aggregation function is specified and 1 decimal if no precision is specified\n\n    , \n\n\n\n\n    ROUND(\n      \n        COUNT(company_name)\n        /\n        SUM(COUNT(company_name)) OVER ()\n      \n    , 3)\n AS count_percent\n\n    , COUNT(DISTINCT company_name) AS count_distinct_company_name\n    -- example: countdistinct\n    , \n\n\n\n\n    ROUND(\n      \n      COUNT(DISTINCT company_name)\n        /\n        SUM(COUNT(DISTINCT company_name)) OVER ()\n      \n    , 3)\n AS count_distinct_percent\n\nFROM dbt_db.dbt_schema.data_aggregated\nGROUP BY 1\nORDER BY sum(str_length)  DESC", "relation_name": "dbt_db.dbt_schema.percent_of_total_ex1"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T18:42:47.255727Z", "completed_at": "2024-08-05T18:42:47.380631Z"}, {"name": "execute", "started_at": "2024-08-05T18:42:47.418441Z", "completed_at": "2024-08-05T18:42:47.418441Z"}], "thread_id": "Thread-10 (worker)", "execution_time": 0.2250521183013916, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_eda_tools.percent_of_total_ex2", "compiled": true, "compiled_code": "SELECT\n    company_name\n    , country\n    , count(str_length) AS count_str_length\n    -- the percentages are caclulated at the aggregation of company_name and not entire column\n    , \n\n\n\n  \n\n\n    ROUND(\n      \n        count(str_length)\n        /\n        SUM(count(str_length)) OVER (PARTITION BY company_name)\n      \n    , 3)\n AS count_percent\n\nFROM dbt_db.dbt_schema.data_aggregated\nGROUP BY 1,2\nORDER BY company_name, country, count(str_length)  DESC", "relation_name": "dbt_db.dbt_schema.percent_of_total_ex2"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T18:42:47.274555Z", "completed_at": "2024-08-05T18:42:47.383649Z"}, {"name": "execute", "started_at": "2024-08-05T18:42:47.429501Z", "completed_at": "2024-08-05T18:42:47.429501Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.2255871295928955, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_eda_tools.assert_percent_of_total_level", "compiled": true, "compiled_code": "WITH\npercent_of_total AS (\n    SELECT\n        company_name\n        , country\n        , \n\n\n\n\n    ROUND(\n      \n        COUNT(str_length)\n        /\n        SUM(COUNT(str_length)) OVER ()\n      \n    , 3)\n AS count_percent\n        , \n\n\n\n  \n\n\n    ROUND(\n      \n        COUNT(str_length)\n        /\n        SUM(COUNT(str_length)) OVER (PARTITION BY company_name)\n      \n    , 3)\n AS count_percent_level\n\n    FROM dbt_db.dbt_schema.data_aggregated\n    GROUP BY 1,2\n    ORDER BY company_name, country, sum(str_length)  DESC\n)\nSELECT * FROM percent_of_total\nWHERE\n    1=1\n    -- aggregated percent at level is always greater than percent of entire column\n    AND\n    (\n        count_percent_level < count_percent\n    -- MSFT has 3 countries, so each should be 1/3 of the total\n    OR (company_name = 'MSFT' AND count_percent_level <> .333)\n    -- AMZN & FB are unfiltered and have 5 countries, so each should be 1/5 of the total\n    OR (company_name IN ('AMZN','FB') AND count_percent_level <> .2)\n    -- Each with 4 countries, so each should be 1/4 of the total\n    OR (company_name IN ('GOG','A') AND count_percent_level <> .25)\n    )", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T18:42:47.285793Z", "completed_at": "2024-08-05T18:42:47.406148Z"}, {"name": "execute", "started_at": "2024-08-05T18:42:47.448777Z", "completed_at": "2024-08-05T18:42:47.448777Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.23892831802368164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_eda_tools.assert_percent_of_total_rounding", "compiled": true, "compiled_code": "WITH\npercent_of_total AS (\n    SELECT\n    country\n    -- rounding defaults to 2 if unspecified\n    , \n\n\n\n\n    ROUND(\n      \n        sum(str_length)\n        /\n        SUM(sum(str_length)) OVER ()\n      \n    , 2)\n AS sum_percent\n    , \n\n\n\n\n    ROUND(\n      \n        sum(str_length)\n        /\n        SUM(sum(str_length)) OVER ()\n      \n    , 2)\n AS sum_percent_3\n\nFROM dbt_db.dbt_schema.data_aggregated\nGROUP BY 1\n)\nSELECT * FROM percent_of_total\nWHERE\n    country = 'GB'\n    AND sum_percent <> 0.2\n    AND sum_percent <> 0.24", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T18:42:47.303224Z", "completed_at": "2024-08-05T18:42:47.412734Z"}, {"name": "execute", "started_at": "2024-08-05T18:42:47.452199Z", "completed_at": "2024-08-05T18:42:47.452199Z"}], "thread_id": "Thread-8 (worker)", "execution_time": 0.23682808876037598, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_eda_tools.assert_percent_of_total_sum_to_1", "compiled": true, "compiled_code": "WITH\npercent_of_total AS (\n    SELECT\n    country\n    -- precision needs to be atleast 4 for the sum to be 100%\n    , \n\n\n\n\n    ROUND(\n      \n        sum(str_length)\n        /\n        SUM(sum(str_length)) OVER ()\n      \n    , 4)\n AS sum_percent\n    , \n\n\n\n\n    ROUND(\n      \n        count(company_name)\n        /\n        SUM(count(company_name)) OVER ()\n      \n    , 4)\n AS count_percent\n    , \n\n\n\n\n    ROUND(\n      \n      COUNT(DISTINCT company_name)\n        /\n        SUM(COUNT(DISTINCT company_name)) OVER ()\n      \n    , 4)\n AS count_distinct_percent\n    , \n\n\n\n\n    ROUND(\n      \n        NULL\n      \n    , 2)\n AS incorrect_returns_null\n\nFROM dbt_db.dbt_schema.data_aggregated\nGROUP BY 1\n)\n, sum_percent_of_total AS (\n    SELECT\n        sum(sum_percent) AS sum_percent\n        , sum(count_percent) AS count_percent\n        , sum(count_distinct_percent) AS count_distinct_percent\n        , sum(incorrect_returns_null) AS incorrect_returns_null\n    FROM percent_of_total\n)\nSELECT * FROM sum_percent_of_total\nWHERE\n    sum_percent<>1\n    OR count_percent<>1\n    OR count_distinct_percent<>1\n    OR incorrect_returns_null IS NOT NULL", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T18:42:47.325129Z", "completed_at": "2024-08-05T18:42:47.418441Z"}, {"name": "execute", "started_at": "2024-08-05T18:42:47.457055Z", "completed_at": "2024-08-05T18:42:47.457055Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.23368144035339355, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_eda_tools.describe_ex1", "compiled": true, "compiled_code": "\n\n    \n    \n    \n    \n    \n    \n\n    \n\n    \n    \n    \n\n    WITH\n    meta_data AS (\n        -- Need to explicitly cast the type before transposing the data\n        SELECT\n        'dataset' AS identifier\n        , NULL AS detail\n        , COUNT(*):: number AS nbr_of_columns\n        , COUNT_IF(DATA_TYPE IN ('VARCHAR','CHAR', 'CHARACTER', 'STRING', 'TEXT')):: number  AS nbr_of_text_columns\n        , COUNT_IF(DATA_TYPE IN ('DATE','DATETIME','TIMESTAMP','TIMESTAMP_LTZ','TIMESTAMP_NTZ','TIMESTAMP_TZ')):: number  AS nbr_of_date_columns\n        , COUNT_IF(DATA_TYPE IN ('NUMBER','DECIMAL','NUMERIC','INT','INTEGER','BIGINT','SMALLINT','FLOAT','FLOAT4','FLOAT8','DOUBLE','DOUBLE PRECISION','REAL','INT64', 'TINYINT','BYETEINT', 'BIGDECIMAL','FLOAT64')):: number  AS nbr_of_numeric_columns\n        , COUNT_IF(DATA_TYPE IN ('BOOLEAN','BOOL')):: number  AS nbr_of_boolean_columns\n        , COUNT_IF(DATA_TYPE = 'TIME'):: number  AS nbr_of_time_columns\n        FROM INFORMATION_SCHEMA.TABLES t\n        INNER JOIN INFORMATION_SCHEMA.COLUMNS c ON\n                c.table_schema = t.table_schema AND c.table_name = t.table_name\n                WHERE t.table_name = 'DATA_GENERATOR_ENRICHED_DESCRIBE'\n        GROUP BY 1,2\n    )\n    , unpivot_result AS (\n        SELECT\n                CASE meta_data_key\n                        WHEN 'nbr_of_columns' THEN 1\n                        WHEN 'nbr_of_text_columns' THEN 2\n                        WHEN 'nbr_of_date_columns' THEN 3\n                        WHEN 'nbr_of_numeric_columns' THEN 4\n                        WHEN 'nbr_of_boolean_columns' THEN 5\n                        WHEN 'nbr_of_time_columns' THEN 6\n                END AS index_pos\n                , *\n            FROM meta_data\n            UNPIVOT (meta_data_value FOR meta_data_key IN (nbr_of_columns, nbr_of_text_columns, nbr_of_date_columns, nbr_of_numeric_columns,nbr_of_boolean_columns,nbr_of_time_columns))\n    )\n    , row_count AS (\n        SELECT\n                'nbr_of_rows' AS meta_data_key\n                , 'dataset' AS identifier\n                , NULL AS detail\n                , COUNT(*) AS meta_data_value\n        FROM dbt_db.dbt_schema.data_generator_enriched_describe\n        GROUP BY 1,2,3\n    )\n    , assembled_result AS (\n        SELECT\n                index_pos\n                , meta_data_key\n                , meta_data_value:: number AS meta_data_value\n                , identifier\n                , detail\n        FROM unpivot_result\n\n        UNION ALL\n\n        SELECT\n                0 AS index_pos\n                , meta_data_key\n                , meta_data_value\n                , identifier\n                , detail\n        FROM row_count\n    )\n\n    SELECT\n        meta_data_key\n        , meta_data_value\n        , identifier\n        , detail\n    FROM assembled_result\n    ORDER BY index_pos ASC\n\n", "relation_name": "dbt_db.dbt_schema.describe_ex1"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T18:42:47.371429Z", "completed_at": "2024-08-05T18:42:47.447558Z"}, {"name": "execute", "started_at": "2024-08-05T18:42:47.463244Z", "completed_at": "2024-08-05T18:42:47.463244Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.2398698329925537, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_eda_tools.assert_data_describe_structure", "compiled": true, "compiled_code": "WITH\ndescribe_dataframe AS (\n    \n\n    \n    \n    \n    \n    \n    \n\n    \n\n    \n    \n    \n\n    WITH\n    meta_data AS (\n        -- Need to explicitly cast the type before transposing the data\n        SELECT\n        'dataset' AS identifier\n        , NULL AS detail\n        , COUNT(*):: number AS nbr_of_columns\n        , COUNT_IF(DATA_TYPE IN ('VARCHAR','CHAR', 'CHARACTER', 'STRING', 'TEXT')):: number  AS nbr_of_text_columns\n        , COUNT_IF(DATA_TYPE IN ('DATE','DATETIME','TIMESTAMP','TIMESTAMP_LTZ','TIMESTAMP_NTZ','TIMESTAMP_TZ')):: number  AS nbr_of_date_columns\n        , COUNT_IF(DATA_TYPE IN ('NUMBER','DECIMAL','NUMERIC','INT','INTEGER','BIGINT','SMALLINT','FLOAT','FLOAT4','FLOAT8','DOUBLE','DOUBLE PRECISION','REAL','INT64', 'TINYINT','BYETEINT', 'BIGDECIMAL','FLOAT64')):: number  AS nbr_of_numeric_columns\n        , COUNT_IF(DATA_TYPE IN ('BOOLEAN','BOOL')):: number  AS nbr_of_boolean_columns\n        , COUNT_IF(DATA_TYPE = 'TIME'):: number  AS nbr_of_time_columns\n        FROM INFORMATION_SCHEMA.TABLES t\n        INNER JOIN INFORMATION_SCHEMA.COLUMNS c ON\n                c.table_schema = t.table_schema AND c.table_name = t.table_name\n                WHERE t.table_name = 'DATA_GENERATOR_ENRICHED_DESCRIBE'\n        GROUP BY 1,2\n    )\n    , unpivot_result AS (\n        SELECT\n                CASE meta_data_key\n                        WHEN 'nbr_of_columns' THEN 1\n                        WHEN 'nbr_of_text_columns' THEN 2\n                        WHEN 'nbr_of_date_columns' THEN 3\n                        WHEN 'nbr_of_numeric_columns' THEN 4\n                        WHEN 'nbr_of_boolean_columns' THEN 5\n                        WHEN 'nbr_of_time_columns' THEN 6\n                END AS index_pos\n                , *\n            FROM meta_data\n            UNPIVOT (meta_data_value FOR meta_data_key IN (nbr_of_columns, nbr_of_text_columns, nbr_of_date_columns, nbr_of_numeric_columns,nbr_of_boolean_columns,nbr_of_time_columns))\n    )\n    , row_count AS (\n        SELECT\n                'nbr_of_rows' AS meta_data_key\n                , 'dataset' AS identifier\n                , NULL AS detail\n                , COUNT(*) AS meta_data_value\n        FROM dbt_db.dbt_schema.data_generator_enriched_describe\n        GROUP BY 1,2,3\n    )\n    , assembled_result AS (\n        SELECT\n                index_pos\n                , meta_data_key\n                , meta_data_value:: number AS meta_data_value\n                , identifier\n                , detail\n        FROM unpivot_result\n\n        UNION ALL\n\n        SELECT\n                0 AS index_pos\n                , meta_data_key\n                , meta_data_value\n                , identifier\n                , detail\n        FROM row_count\n    )\n\n    SELECT\n        meta_data_key\n        , meta_data_value\n        , identifier\n        , detail\n    FROM assembled_result\n    ORDER BY index_pos ASC\n\n\n)\nSELECT * FROM describe_dataframe\nWHERE\n    1=1\n    -- Columns = 4\n    AND\n    (\n        (LOWER(meta_data_key) = 'nbr_of_columns' AND meta_data_value <> 5)\n        -- Rows = 54800\n        OR (LOWER(meta_data_key) = 'nbr_of_rows' AND meta_data_value <> 54800)\n        -- Date Columns = 1\n        OR (LOWER(meta_data_key) = 'nbr_of_date_columns' AND meta_data_value <> 1)\n        -- Time Columns = 1\n        OR (LOWER(meta_data_key) = 'nbr_of_time_columns' AND meta_data_value <> 0)\n        -- Boolean Columns = 1\n        OR (LOWER(meta_data_key) = 'nbr_of_boolean_columns' AND meta_data_value <> 1)\n        -- Text Columns = 1\n        OR (LOWER(meta_data_key) = 'nbr_of_text_columns' AND meta_data_value <> 2)\n        -- Numeric Columns = 1\n        OR (LOWER(meta_data_key) = 'nbr_of_numeric_columns' AND meta_data_value <> 1)\n    )", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T18:42:47.385420Z", "completed_at": "2024-08-05T18:42:47.457055Z"}, {"name": "execute", "started_at": "2024-08-05T18:42:47.473586Z", "completed_at": "2024-08-05T18:42:47.473586Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.23655414581298828, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_eda_tools.get_missing_dates_ex1", "compiled": true, "compiled_code": "/**\n * Retrieves the missing dates in the date_day column of the missing_day model at the Day level granularity.\n *\n * @param {string} missing_day - The name of the model.\n * @param {string} date_day - The name of the column containing the dates.\n * @param {array} [dimensions] - An optional array of dimensions across which the missing dates are computed.\n * @param {object} [filters] - An optional filter object.\n * @param {string} [expected_frequency] - The interval to use when generating the missing dates (e.g. 'DAY', 'MONTH', 'YEAR').\n * @returns {rows} Rows of missing dates.\n */\n\n\nWITH\nunique_dates AS (\n  SELECT\n    DISTINCT\n        date_day\n        \n  FROM dbt_db.dbt_schema.missing_day\n  \n)\n, dates_lagged AS (\n  SELECT *\n  , LAG(date_day,1) OVER (\n        ORDER BY\n        \n        date_day DESC) AS next_date_day\n  FROM unique_dates\n)\nSELECT\n    date_day\n    \n    , next_date_day\n    , ABS(datediff(\n        DAY,\n        next_date_day,\n        date_day\n        )) AS missing_day\nFROM dates_lagged\nWHERE datediff(\n        DAY,\n        next_date_day,\n        date_day\n        ) < -1\n", "relation_name": "dbt_db.dbt_schema.get_missing_dates_ex1"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T18:42:47.423606Z", "completed_at": "2024-08-05T18:42:47.467915Z"}, {"name": "execute", "started_at": "2024-08-05T18:42:47.485761Z", "completed_at": "2024-08-05T18:42:47.485761Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 0.20047402381896973, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_eda_tools.get_missing_dates_ex3", "compiled": true, "compiled_code": "/**\n * Retrieves the missing dates in the date_day column of the missing_day model at the Day level granularity.\n *\n * @param {string} missing_day - The name of the model.\n * @param {string} date_day - The name of the column containing the dates.\n * @param {array} [dimensions] - An optional array of dimensions across which the missing dates are computed.\n * @param {object} [filters] - An optional filter object.\n * @param {string} [expected_frequency] - The interval to use when generating the missing dates (e.g. 'DAY', 'MONTH', 'YEAR').\n * @returns {rows} Rows of missing dates.\n */\n\n\nWITH\nunique_dates AS (\n  SELECT\n    DISTINCT\n        date_day\n        \n            , (country) AS country\n        \n            , (company_name) AS company_name\n        \n  FROM dbt_db.dbt_schema.missing_day\n  \n    \n        \n          WHERE 1=1\n        \n\n        \n        \n          AND country IN ('DE', 'US')\n        \n    \n        \n\n        \n        \n          \n            AND  company_name = 'MSFT'\n          \n\n        \n    \n        \n\n        \n        \n          \n            AND  str_length >2\n          \n\n        \n    \n  \n)\n, dates_lagged AS (\n  SELECT *\n  , LAG(date_day,1) OVER (\n        ORDER BY\n        \n            (country) DESC,\n        \n            (company_name) DESC,\n        \n        date_day DESC) AS next_date_day\n  FROM unique_dates\n)\nSELECT\n    date_day\n    \n        , (country) AS country\n    \n        , (company_name) AS company_name\n    \n    , next_date_day\n    , ABS(datediff(\n        DAY,\n        next_date_day,\n        date_day\n        )) AS missing_day\nFROM dates_lagged\nWHERE datediff(\n        DAY,\n        next_date_day,\n        date_day\n        ) < -1\n", "relation_name": "dbt_db.dbt_schema.get_missing_dates_ex3"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T18:42:47.436106Z", "completed_at": "2024-08-05T18:42:47.471733Z"}, {"name": "execute", "started_at": "2024-08-05T18:42:47.489145Z", "completed_at": "2024-08-05T18:42:47.489145Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.18645811080932617, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_eda_tools.get_missing_dates_ex4", "compiled": true, "compiled_code": "/**\n * Retrieves the missing dates in the date_day column of the missing_day model at the Day level granularity.\n *\n * @param {string} missing_day - The name of the model.\n * @param {string} date_day - The name of the column containing the dates.\n * @param {array} [dimensions] - An optional array of dimensions across which the missing dates are computed.\n * @param {object} [filters] - An optional filter object.\n * @param {string} [expected_frequency] - The interval to use when generating the missing dates (e.g. 'DAY', 'MONTH', 'YEAR').\n * @returns {rows} Rows of missing dates.\n */\n\n\nWITH\nunique_dates AS (\n  SELECT\n    DISTINCT\n        date_day\n        \n            , (country) AS country\n        \n            , (company_name) AS company_name\n        \n  FROM dbt_db.dbt_schema.missing_day\n  \n    \n        \n          WHERE 1=1\n        \n\n        \n        \n          AND country IN ('DE', 'US')\n        \n    \n        \n\n        \n        \n          AND company_name IN ('GOG', 'A')\n        \n    \n        \n\n        \n        \n          \n            AND  str_length =3\n          \n\n        \n    \n  \n)\n, dates_lagged AS (\n  SELECT *\n  , LAG(date_day,1) OVER (\n        ORDER BY\n        \n            (country) DESC,\n        \n            (company_name) DESC,\n        \n        date_day DESC) AS next_date_day\n  FROM unique_dates\n)\nSELECT\n    date_day\n    \n        , (country) AS country\n    \n        , (company_name) AS company_name\n    \n    , next_date_day\n    , ABS(datediff(\n        DAY,\n        next_date_day,\n        date_day\n        )) AS missing_day\nFROM dates_lagged\nWHERE datediff(\n        DAY,\n        next_date_day,\n        date_day\n        ) < -1\n", "relation_name": "dbt_db.dbt_schema.get_missing_dates_ex4"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T18:42:47.500130Z", "completed_at": "2024-08-05T18:42:47.556983Z"}, {"name": "execute", "started_at": "2024-08-05T18:42:47.608092Z", "completed_at": "2024-08-05T18:42:47.608092Z"}], "thread_id": "Thread-9 (worker)", "execution_time": 0.13830065727233887, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_eda_tools.assert_missing_day", "compiled": true, "compiled_code": "WITH\nmissing_values AS (\n    \nWITH\nunique_dates AS (\n  SELECT\n    DISTINCT\n        date_day\n        \n  FROM dbt_db.dbt_schema.missing_day\n  \n)\n, dates_lagged AS (\n  SELECT *\n  , LAG(date_day,1) OVER (\n        ORDER BY\n        \n        date_day DESC) AS next_date_day\n  FROM unique_dates\n)\nSELECT\n    date_day\n    \n    , next_date_day\n    , ABS(datediff(\n        DAY,\n        next_date_day,\n        date_day\n        )) AS missing_day\nFROM dates_lagged\nWHERE datediff(\n        DAY,\n        next_date_day,\n        date_day\n        ) < -1\n\n)\n, row_count_missing_values AS (\n    SELECT COUNT(missing_day) AS row_count\n    FROM missing_values\n)\nSELECT * FROM row_count_missing_values WHERE row_count <> 1", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T18:42:47.517109Z", "completed_at": "2024-08-05T18:42:47.582637Z"}, {"name": "execute", "started_at": "2024-08-05T18:42:47.624716Z", "completed_at": "2024-08-05T18:42:47.624716Z"}], "thread_id": "Thread-10 (worker)", "execution_time": 0.14628982543945312, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_eda_tools.assert_missing_day_by_company", "compiled": true, "compiled_code": "WITH\nmissing_values AS (\n    \nWITH\nunique_dates AS (\n  SELECT\n    DISTINCT\n        date_day\n        \n            , (company_name) AS company_name\n        \n  FROM dbt_db.dbt_schema.missing_day\n  \n)\n, dates_lagged AS (\n  SELECT *\n  , LAG(date_day,1) OVER (\n        ORDER BY\n        \n            (company_name) DESC,\n        \n        date_day DESC) AS next_date_day\n  FROM unique_dates\n)\nSELECT\n    date_day\n    \n        , (company_name) AS company_name\n    \n    , next_date_day\n    , ABS(datediff(\n        DAY,\n        next_date_day,\n        date_day\n        )) AS missing_day\nFROM dates_lagged\nWHERE datediff(\n        DAY,\n        next_date_day,\n        date_day\n        ) < -1\n\n)\n, row_count_missing_values AS (\n    SELECT COUNT(missing_day) AS row_count\n    FROM missing_values\n)\nSELECT * FROM row_count_missing_values WHERE row_count <> 6", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T18:42:47.532574Z", "completed_at": "2024-08-05T18:42:47.596166Z"}, {"name": "execute", "started_at": "2024-08-05T18:42:47.641652Z", "completed_at": "2024-08-05T18:42:47.641652Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.1576976776123047, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_eda_tools.assert_missing_day_by_country_company", "compiled": true, "compiled_code": "WITH\nmissing_values AS (\n    \nWITH\nunique_dates AS (\n  SELECT\n    DISTINCT\n        date_day\n        \n            , (country) AS country\n        \n            , (company_name) AS company_name\n        \n  FROM dbt_db.dbt_schema.missing_day\n  \n)\n, dates_lagged AS (\n  SELECT *\n  , LAG(date_day,1) OVER (\n        ORDER BY\n        \n            (country) DESC,\n        \n            (company_name) DESC,\n        \n        date_day DESC) AS next_date_day\n  FROM unique_dates\n)\nSELECT\n    date_day\n    \n        , (country) AS country\n    \n        , (company_name) AS company_name\n    \n    , next_date_day\n    , ABS(datediff(\n        DAY,\n        next_date_day,\n        date_day\n        )) AS missing_day\nFROM dates_lagged\nWHERE datediff(\n        DAY,\n        next_date_day,\n        date_day\n        ) < -1\n\n)\n, row_count_missing_values AS (\n    SELECT COUNT(missing_day) AS row_count\n    FROM missing_values\n)\nSELECT * FROM row_count_missing_values WHERE row_count <> 35", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T18:42:47.524263Z", "completed_at": "2024-08-05T18:42:47.604113Z"}, {"name": "execute", "started_at": "2024-08-05T18:42:47.644737Z", "completed_at": "2024-08-05T18:42:47.644737Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.16454052925109863, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_eda_tools.assert_missing_day_by_country", "compiled": true, "compiled_code": "WITH\nmissing_values AS (\n    \nWITH\nunique_dates AS (\n  SELECT\n    DISTINCT\n        date_day\n        \n            , (country) AS country\n        \n  FROM dbt_db.dbt_schema.missing_day\n  \n)\n, dates_lagged AS (\n  SELECT *\n  , LAG(date_day,1) OVER (\n        ORDER BY\n        \n            (country) DESC,\n        \n        date_day DESC) AS next_date_day\n  FROM unique_dates\n)\nSELECT\n    date_day\n    \n        , (country) AS country\n    \n    , next_date_day\n    , ABS(datediff(\n        DAY,\n        next_date_day,\n        date_day\n        )) AS missing_day\nFROM dates_lagged\nWHERE datediff(\n        DAY,\n        next_date_day,\n        date_day\n        ) < -1\n\n)\n, row_count_missing_values AS (\n    SELECT COUNT(missing_day) AS row_count\n    FROM missing_values\n)\nSELECT * FROM row_count_missing_values WHERE row_count <> 6", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T18:42:47.545435Z", "completed_at": "2024-08-05T18:42:47.611417Z"}, {"name": "execute", "started_at": "2024-08-05T18:42:47.650115Z", "completed_at": "2024-08-05T18:42:47.650115Z"}], "thread_id": "Thread-8 (worker)", "execution_time": 0.1584625244140625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_eda_tools.assert_missing_day_by_country_company_filtered_both", "compiled": true, "compiled_code": "WITH\nmissing_values AS (\n    \nWITH\nunique_dates AS (\n  SELECT\n    DISTINCT\n        date_day\n        \n            , (country) AS country\n        \n            , (company_name) AS company_name\n        \n  FROM dbt_db.dbt_schema.missing_day\n  \n    \n        \n          WHERE 1=1\n        \n\n        \n        \n          \n            AND  country = 'DE'\n          \n\n        \n    \n        \n\n        \n        \n          \n            AND  company_name = 'A'\n          \n\n        \n    \n  \n)\n, dates_lagged AS (\n  SELECT *\n  , LAG(date_day,1) OVER (\n        ORDER BY\n        \n            (country) DESC,\n        \n            (company_name) DESC,\n        \n        date_day DESC) AS next_date_day\n  FROM unique_dates\n)\nSELECT\n    date_day\n    \n        , (country) AS country\n    \n        , (company_name) AS company_name\n    \n    , next_date_day\n    , ABS(datediff(\n        DAY,\n        next_date_day,\n        date_day\n        )) AS missing_day\nFROM dates_lagged\nWHERE datediff(\n        DAY,\n        next_date_day,\n        date_day\n        ) < -1\n\n)\n, row_count_missing_values AS (\n    SELECT COUNT(missing_day) AS row_count\n    FROM missing_values\n)\nSELECT * FROM row_count_missing_values WHERE row_count <> 2", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T18:42:47.563033Z", "completed_at": "2024-08-05T18:42:47.639867Z"}, {"name": "execute", "started_at": "2024-08-05T18:42:47.661337Z", "completed_at": "2024-08-05T18:42:47.661337Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.16379594802856445, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_eda_tools.assert_missing_day_by_country_company_numeric_filter", "compiled": true, "compiled_code": "WITH\nmissing_values AS (\n    \nWITH\nunique_dates AS (\n  SELECT\n    DISTINCT\n        date_day\n        \n            , (country) AS country\n        \n            , (company_name) AS company_name\n        \n  FROM dbt_db.dbt_schema.missing_day\n  \n    \n        \n          WHERE 1=1\n        \n\n        \n        \n          AND country IN ('DE', 'US')\n        \n    \n        \n\n        \n        \n          AND company_name IN ('GOG', 'A')\n        \n    \n        \n\n        \n        \n          \n            AND  str_length =3\n          \n\n        \n    \n  \n)\n, dates_lagged AS (\n  SELECT *\n  , LAG(date_day,1) OVER (\n        ORDER BY\n        \n            (country) DESC,\n        \n            (company_name) DESC,\n        \n        date_day DESC) AS next_date_day\n  FROM unique_dates\n)\nSELECT\n    date_day\n    \n        , (country) AS country\n    \n        , (company_name) AS company_name\n    \n    , next_date_day\n    , ABS(datediff(\n        DAY,\n        next_date_day,\n        date_day\n        )) AS missing_day\nFROM dates_lagged\nWHERE datediff(\n        DAY,\n        next_date_day,\n        date_day\n        ) < -1\n\n\n)\n, row_count_missing_values AS (\n    SELECT COUNT(missing_day) AS row_count\n    FROM missing_values\n)\n-- Only rows corresponding to company A are picked up as the str_length is set to 3\nSELECT * FROM row_count_missing_values WHERE row_count <> 3", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T18:42:47.556983Z", "completed_at": "2024-08-05T18:42:47.644737Z"}, {"name": "execute", "started_at": "2024-08-05T18:42:47.665337Z", "completed_at": "2024-08-05T18:42:47.665337Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.1713874340057373, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_eda_tools.assert_missing_day_by_country_company_filtered_country", "compiled": true, "compiled_code": "WITH\nmissing_values AS (\n    \nWITH\nunique_dates AS (\n  SELECT\n    DISTINCT\n        date_day\n        \n            , (country) AS country\n        \n            , (company_name) AS company_name\n        \n  FROM dbt_db.dbt_schema.missing_day\n  \n    \n        \n          WHERE 1=1\n        \n\n        \n        \n          \n            AND  country = 'DE'\n          \n\n        \n    \n  \n)\n, dates_lagged AS (\n  SELECT *\n  , LAG(date_day,1) OVER (\n        ORDER BY\n        \n            (country) DESC,\n        \n            (company_name) DESC,\n        \n        date_day DESC) AS next_date_day\n  FROM unique_dates\n)\nSELECT\n    date_day\n    \n        , (country) AS country\n    \n        , (company_name) AS company_name\n    \n    , next_date_day\n    , ABS(datediff(\n        DAY,\n        next_date_day,\n        date_day\n        )) AS missing_day\nFROM dates_lagged\nWHERE datediff(\n        DAY,\n        next_date_day,\n        date_day\n        ) < -1\n\n)\n, row_count_missing_values AS (\n    SELECT COUNT(missing_day) AS row_count\n    FROM missing_values\n)\nSELECT * FROM row_count_missing_values WHERE row_count <> 10", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T18:42:47.590759Z", "completed_at": "2024-08-05T18:42:47.653723Z"}, {"name": "execute", "started_at": "2024-08-05T18:42:47.676230Z", "completed_at": "2024-08-05T18:42:47.676230Z"}], "thread_id": "Thread-5 (worker)", "execution_time": 0.16497206687927246, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_eda_tools.assert_missing_year", "compiled": true, "compiled_code": "WITH\nmissing_values AS (\n    \nWITH\nunique_dates AS (\n  SELECT\n    DISTINCT\n        date_year\n        \n  FROM dbt_db.dbt_schema.missing_year\n  \n)\n, dates_lagged AS (\n  SELECT *\n  , LAG(date_year,1) OVER (\n        ORDER BY\n        \n        date_year DESC) AS next_date_year\n  FROM unique_dates\n)\nSELECT\n    date_year\n    \n    , next_date_year\n    , ABS(datediff(\n        YEAR,\n        next_date_year,\n        date_year\n        )) AS missing_year\nFROM dates_lagged\nWHERE datediff(\n        YEAR,\n        next_date_year,\n        date_year\n        ) < -1\n\n)\n, row_count_missing_values AS (\n    SELECT COUNT(missing_year) AS row_count\n    FROM missing_values\n)\nSELECT * FROM row_count_missing_values WHERE row_count <> 1", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T18:42:47.612470Z", "completed_at": "2024-08-05T18:42:47.665337Z"}, {"name": "execute", "started_at": "2024-08-05T18:42:47.689693Z", "completed_at": "2024-08-05T18:42:47.689693Z"}], "thread_id": "Thread-7 (worker)", "execution_time": 0.15264034271240234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_eda_tools.assert_missing_year_by_month", "compiled": true, "compiled_code": "WITH\nmissing_values AS (\n    \nWITH\nunique_dates AS (\n  SELECT\n    DISTINCT\n        date_year\n        \n  FROM dbt_db.dbt_schema.missing_year\n  \n)\n, dates_lagged AS (\n  SELECT *\n  , LAG(date_year,1) OVER (\n        ORDER BY\n        \n        date_year DESC) AS next_date_year\n  FROM unique_dates\n)\nSELECT\n    date_year\n    \n    , next_date_year\n    , ABS(datediff(\n        MONTH,\n        next_date_year,\n        date_year\n        )) AS missing_month\nFROM dates_lagged\nWHERE datediff(\n        MONTH,\n        next_date_year,\n        date_year\n        ) < -1\n\n)\n, row_count_missing_values AS (\n    SELECT COUNT(missing_month) AS row_count\n    FROM missing_values\n)\nSELECT * FROM row_count_missing_values WHERE row_count <> 4", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T18:42:47.628724Z", "completed_at": "2024-08-05T18:42:47.671346Z"}, {"name": "execute", "started_at": "2024-08-05T18:42:47.695355Z", "completed_at": "2024-08-05T18:42:47.695355Z"}], "thread_id": "Thread-6 (worker)", "execution_time": 0.15935826301574707, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_eda_tools.get_missing_dates_ex2", "compiled": true, "compiled_code": "/**\n * Retrieves the missing dates in the date_month column of the missing_month model at the Monthly level granularity.\n *\n * @param {string} missing_day - The name of the model.\n * @param {string} date_day - The name of the column containing the dates.\n * @param {array} [dimensions] - An optional array of dimensions across which the missing dates are computed.\n * @param {object} [filters] - An optional filter object.\n * @param {string} [expected_frequency] - The interval to use when generating the missing dates (e.g. 'DAY', 'MONTH', 'YEAR').\n * @returns {rows} Rows of missing dates.\n */\n\n\nWITH\nunique_dates AS (\n  SELECT\n    DISTINCT\n        date_month\n        \n            , (country) AS country\n        \n  FROM dbt_db.dbt_schema.missing_month\n  \n)\n, dates_lagged AS (\n  SELECT *\n  , LAG(date_month,1) OVER (\n        ORDER BY\n        \n            (country) DESC,\n        \n        date_month DESC) AS next_date_month\n  FROM unique_dates\n)\nSELECT\n    date_month\n    \n        , (country) AS country\n    \n    , next_date_month\n    , ABS(datediff(\n        MONTH,\n        next_date_month,\n        date_month\n        )) AS missing_month\nFROM dates_lagged\nWHERE datediff(\n        MONTH,\n        next_date_month,\n        date_month\n        ) < -1\n", "relation_name": "dbt_db.dbt_schema.get_missing_dates_ex2"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T18:42:47.700990Z", "completed_at": "2024-08-05T18:42:47.730056Z"}, {"name": "execute", "started_at": "2024-08-05T18:42:47.730056Z", "completed_at": "2024-08-05T18:42:47.730056Z"}], "thread_id": "Thread-9 (worker)", "execution_time": 0.05382561683654785, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_eda_tools.assert_missing_month", "compiled": true, "compiled_code": "WITH\nmissing_values AS (\n    \nWITH\nunique_dates AS (\n  SELECT\n    DISTINCT\n        date_month\n        \n  FROM dbt_db.dbt_schema.missing_month\n  \n)\n, dates_lagged AS (\n  SELECT *\n  , LAG(date_month,1) OVER (\n        ORDER BY\n        \n        date_month DESC) AS next_date_month\n  FROM unique_dates\n)\nSELECT\n    date_month\n    \n    , next_date_month\n    , ABS(datediff(\n        MONTH,\n        next_date_month,\n        date_month\n        )) AS missing_month\nFROM dates_lagged\nWHERE datediff(\n        MONTH,\n        next_date_month,\n        date_month\n        ) < -1\n\n)\n, row_count_missing_values AS (\n    SELECT COUNT(missing_month) AS row_count\n    FROM missing_values\n)\nSELECT * FROM row_count_missing_values WHERE row_count <> 1", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T18:42:47.718910Z", "completed_at": "2024-08-05T18:42:47.730056Z"}, {"name": "execute", "started_at": "2024-08-05T18:42:47.735574Z", "completed_at": "2024-08-05T18:42:47.735574Z"}], "thread_id": "Thread-10 (worker)", "execution_time": 0.05159115791320801, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_eda_tools.assert_missing_month_by_days", "compiled": true, "compiled_code": "WITH\nmissing_values AS (\n    \nWITH\nunique_dates AS (\n  SELECT\n    DISTINCT\n        date_month\n        \n  FROM dbt_db.dbt_schema.missing_month\n  \n)\n, dates_lagged AS (\n  SELECT *\n  , LAG(date_month,1) OVER (\n        ORDER BY\n        \n        date_month DESC) AS next_date_month\n  FROM unique_dates\n)\nSELECT\n    date_month\n    \n    , next_date_month\n    , ABS(datediff(\n        DAY,\n        next_date_month,\n        date_month\n        )) AS missing_day\nFROM dates_lagged\nWHERE datediff(\n        DAY,\n        next_date_month,\n        date_month\n        ) < -1\n\n)\n, row_count_missing_values AS (\n    SELECT COUNT(missing_day) AS row_count\n    FROM missing_values\n)\nSELECT * FROM row_count_missing_values WHERE row_count <> 67", "relation_name": null}], "elapsed_time": 3.572049617767334, "args": {"strict_mode": false, "project_dir": "C:\\Users\\shank\\Google Drive\\Jupyter Data\\Consulting\\External\\Kering\\Sourcev1\\Coding\\dbt_eda_tools", "source_freshness_run_project_hooks": false, "partial_parse_file_diff": true, "compile": true, "profiles_dir": "C:\\Users\\shank\\.dbt", "printer_width": 80, "send_anonymous_usage_stats": true, "macro_debugging": false, "indirect_selection": "eager", "static": false, "log_format_file": "debug", "require_explicit_package_overrides_for_builtin_materializations": true, "log_path": "C:\\Users\\shank\\Google Drive\\Jupyter Data\\Consulting\\External\\Kering\\Sourcev1\\Coding\\dbt_eda_tools\\logs", "use_colors": true, "which": "generate", "static_parser": true, "log_file_max_bytes": 10485760, "cache_selected_only": false, "select": [], "empty_catalog": false, "log_format": "default", "log_level_file": "debug", "require_resource_names_without_spaces": false, "introspect": true, "partial_parse": true, "print": true, "warn_error_options": {"include": [], "exclude": []}, "vars": {}, "populate_cache": true, "show_resource_report": false, "enable_legacy_logger": false, "invocation_command": "dbt docs generate", "version_check": true, "write_json": true, "defer": false, "log_level": "info", "use_colors_file": true, "favor_state": false, "exclude": [], "quiet": false}}